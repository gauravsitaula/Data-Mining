NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


18437      %let em_filemodtime=;
18438      data _null_;
18439      format modate best.;
18440      set sashelp.Vextfl;
18441      where fileref eq "#LN00134";
18442      call symput('EM_FILEMODTIME', put(modate, best.));
18443      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00134';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18444      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18445      %let em_Train = N;
18446      %let em_Score = N;
18447      %let em_Report = N;
18448      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
18450     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
18451     +  %global &nLevel;
18452     +  proc dmdb batch data=&indata
18453     +    classout=_tmp_dmdbout;
18454     +    class &target;
18455     +  run;
18456     +  data _tmp_dmdbout;
18457     +    set _tmp_dmdbout;
18458     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
18459     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
18460     +  run;
18461     +  data _null_;
18462     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
18463     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
18464     +    %let dsid = %sysfunc(close(&dsid));
18465     +     call symput("&nLevel", put(&_obs, Best12.));
18466     +  run;
18468     +  proc datasets lib=work nolist;
18469     +     delete _tmp_dmdbout;
18470     +  run;
18471     +  quit;
18472     +%Mend EM_CheckBinaryTargetLevel;
18475     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
18477     +  /* determine the number of obs in training data */
18478     +  proc sql;
18479     +    reset noprint;
18480     +    select count(*) into :em_nobs from &indata;
18481     +  quit;
18483     +  /* determine the number of input variables */
18484     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
18485     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
18487     +  /* retrieve targetEvent from decmeta */
18488     +  %let targetEvent=;
18489     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18490     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
18491     +      data _null_;
18492     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
18493     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18494     +      run;
18495     +    %end;
18496     +  %end;
18498     +  /* create targetTable if multipleTar eq Y */
18499     +  data temptarget;
18500     +    set &EM_DATA_VARIABLESET;
18501     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
18502     +  run;
18504     + /* data sets */
18505     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
18506     + %EM_GETNAME(key=EMTREE,        type=DATA);
18507     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
18508     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
18509     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
18510     + %EM_GETNAME(key=OUTNODES,      type=DATA);
18511     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
18512     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
18513     + %EM_GETNAME(key=OUTPATH,       type=DATA);
18514     + %EM_GETNAME(key=OUTRULES,      type=DATA);
18516     + /* files */
18517     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
18518     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
18520     + /* turn on pmml if requested */
18521     + %let nnpmml=0;
18522     + %if %symexist(EM_PMML) %then %do;
18523     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
18524     +       %let nnpmml=1;
18526     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
18527     +%end;
18529     + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
18531     + %if &nnpmml or &numClassTarget %then %do;
18533     +       /* create dmdb needed for pmml generation */
18534     +       %let tree_maxlevel = 512;
18535     +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
18536     +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
18537     +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
18538     +         %end;
18539     +       %end;
18540     +       %if &tree_maxlevel gt 0 %then %do;
18541     +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
18542     +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
18543     +       %end;
18545     +       %let targetOrderString =;
18546     +       %let targetString = ;
18547     +       data _null_;
18548     +          length orderString nameString $10000;
18549     +          retain orderString nameString;
18550     +          set &em_data_variableset end=eof;
18551     +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
18552     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
18553     +          %end;
18554     +          %else %do;
18555     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
18556     +          %end;          select(order);
18557     +            when('')        order ='DESC';
18558     +            when('FMTASC')  order='ASCFMT';
18559     +            when('FMTDESC') order='DESFMT';
18560     +            otherwise;
18561     +          end;
18562     +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
18563     +          nameString = trim(nameString)!!' '!!trim(NAME);
18565     +          if eof then do;
18566     +             call symput('targetOrderString', trim(orderString));
18567     +             call symput('targetString', trim(nameString));
18568     +          end;
18569     +       run;
18571     +       %let arborkluge= "work._treeDMDB";
18573     +       proc dmdb batch data=&indata
18574     +       %if &nnpmml %then %do;
18575     +           PMML
18576     +       %end;
18577     +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
18580     +   %if &nnpmml %then %do;
18581     +        %if "%EM_ID" ne "" %then %do;
18582     +          id %EM_ID;
18583     +        %end;
18584     +        %if &EM_NUM_CLASS gt 0 %then %do;
18585     +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18586     +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18587     +               &targetOrderString;
18588     +        %end;
18589     +        %if &EM_NUM_INTERVAL gt 0 %then %do;
18590     +          var %EM_INTERVAL;
18591     +        %end;
18592     +        target &targetString %EM_INTERVAL_TARGET;
18593     +        %if "%EM_FREQ" ne "" %then %do;
18594     +          freq %EM_FREQ;
18595     +        %end;
18596     +  %end;
18597     +  %else %do;
18598     +      class  &targetOrderString;
18599     +      target &targetString %EM_INTERVAL_TARGET;
18600     +  %end;
18601     +       run;
18602     +       quit;
18604     +       proc datasets lib=work nolist;
18605     +          delete classout varout;
18606     +       run;
18607     +       quit;
18609     +    %end;
18610     + %end;
18612     + /* run Arbor procedure */
18613     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
18614     +  proc arbor data=&INDATA
18616     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
18617     +    Leafsize = &EM_PROPERTY_LEAFSIZE
18618     +  %end;
18620     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
18621     +    Splitsize = &EM_PROPERTY_SPLITSIZE
18622     +  %end;
18624     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
18625     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
18626     +  %end;
18628     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
18629     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
18630     +  %end;
18632     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
18633     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
18634     +  %end;
18636     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
18637     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
18638     +  %end;
18639     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
18640     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
18641     +  %end;
18642     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18643     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
18644     +  %end;
18646     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
18647     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
18648     +      alpha = &EM_PROPERTY_SIGLEVEL
18649     +    %end;
18650     +  %end;
18652     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
18653     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
18654     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
18655     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
18656     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
18658     +        padjust =
18659     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
18660     +          &chaid
18661     +        %end;
18662     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
18663     +          DEPTH
18664     +        %end;
18665     +      %end;
18666     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
18667     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
18668     +         pvars = &num_inputs
18669     +      %end;
18670     +    %end;
18671     +  %end;
18672     +  %else %do;
18673     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
18674     +         padjust = NONE
18675     +      %end;
18676     +  %end;
18678     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
18679     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
18680     +    Maxrules = &num_nrules
18681     +  %end;
18683     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
18684     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
18685     +    Maxsurrs = &num_nsurrs
18686     +  %end;
18688     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
18689     +     Missing=&EM_PROPERTY_MISSINGVALUE
18690     +  %end;
18692     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
18693     +     USEVARONCE
18694     +  %end;
18696     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
18697     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
18698     +  %end;
18701     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
18702     +    event = "&targetEvent"
18703     +  %end;
18705     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
18706     +     DECSEARCH
18707     +  %end;
18709     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
18710     +     PRIORSSEARCH
18711     +  %end;
18713     +  %if &arbor_1 ne %then %do;
18714     +    &arbor_1
18715     +  %end;
18717     +  %if &em_arbor ne %then %do;
18718     +     &em_arbor
18719     +  %end;
18720     +  ;
18721     + %end;
18722     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
18723     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
18724     +       interact;
18725     + %end;
18726     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
18727     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
18728     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
18729     +    %put &em_codebar;
18730     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
18731     +    %put &errormsg;
18732     +    %put &em_codebar;
18733     +    %goto doendm;
18734     +   %end;
18735     +   %else %do;
18736     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
18737     +       interact;
18738     +   %end;
18739     + %end;
18741     + %else %do;
18742     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
18743     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
18744     +    %put &em_codebar;
18745     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
18746     +    %put &errormsg;
18747     +    %put &em_codebar;
18748     +    %goto doendm;
18749     +   %end;
18750     +   %else %do;
18751     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
18752     +        interact;
18753     +   %end;
18754     + %end;
18756     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
18757     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
18758     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
18759     +    %end;
18761     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
18762     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
18763     +    %end;
18765     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
18766     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
18767     +    %end;
18769     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
18770     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
18771     +    %end;
18773     +    %if "%EM_FREQ" ne "" %then %do;
18774     +       freq %EM_FREQ;
18775     +    %end;
18777     +    %if "&multipleTar" eq "Y" %then %do;
18778     +       /* cycle through all target vars in variableset */
18779     +       %let tdsid = %sysfunc(open(temptarget));
18780     +       %if &tdsid %then %do;
18781     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
18782     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
18783     +          %do %while(^ %sysfunc(fetch(&tdsid)));
18784     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
18785     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
18786     +             target &var / level = &lvl
18787     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
18788     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
18789     +             %end;
18790     +             %else %if "&lvl" eq "INTERVAL" %then %do;
18791     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
18792     +             %end;
18793     +             %else %if "&lvl" eq "ORDINAL" %then %do;
18794     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
18795     +             %end;
18796     +          %end;
18797     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
18798     +       %end;
18799     +       useTarget variable = %EM_TARGET;
18800     +    %end;
18801     +    %else %do;
18802     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
18803     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
18804     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
18805     +      %end;
18806     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18807     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
18808     +      %end;
18809     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
18810     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
18811     +      %end;
18812     +    %end;
18814     +    %if "&multipleTar" eq "N" %then %do;
18815     +      &EM_DEC_STATEMENT;
18816     +    %end;
18818     +    Performance &EM_PROPERTY_PERFORMANCE
18819     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
18820     +      nodesize=&EM_PROPERTY_NODESAMPLE
18821     +    %end;
18822     +    ;
18824     +    %if "&intFlag" eq "Y" %then %do;
18825     +       INTERACT Largest;
18826     +       Train maxnewdepth=0;
18827     +    %end;
18829     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
18830     +         Assess
18831     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
18832     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
18833     +              %put &em_codebar;
18834     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
18835     +              %put &errormsg;
18836     +              %put &em_codebar;
18837     +            %end;
18838     +            %else %do;
18839     +               Validata=&EM_IMPORT_VALIDATE
18840     +            %end;
18841     +         %end;
18842     +         %else %do;
18843     +           NoValidata
18844     +         %end;
18845     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
18846     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
18847     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
18848     +               %if &dsid %then %do;
18849     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
18850     +                 %do %while(^ %sysfunc(fetch(&dsid)));
18851     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
18852     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
18853     +                   %else %do;
18854     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
18855     +                      %else %let measure= MISC;
18856     +                   %end;
18857     +                 %end;
18858     +               %end;
18859     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
18860     +            %end;
18861     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
18862     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
18863     +                 %let measure=ASE;
18864     +              %end;
18865     +              %else %do;
18866     +                 %let measure=MISC;
18867     +              %end;
18868     +            %end;
18869     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
18870     +              %let measure=ASE;
18871     +            %end;
18872     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
18873     +               %let measure = LIFT;
18874     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
18875     +               %if &dsid %then %do;
18876     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
18877     +                 %do %while(^ %sysfunc(fetch(&dsid)));
18878     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
18879     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
18880     +                 %end;
18881     +               %end;
18882     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
18883     +            %end;
18884     +            measure=&measure
18885     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
18886     +               event = "&targetEvent"
18887     +            %end;
18888     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
18889     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
18890     +            %end;
18891     +         %end;
18892     +         %if "&multipleTar" eq "N" %then %do;
18893     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
18894     +               CV
18895     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
18896     +                 CVNITer = &EM_PROPERTY_CVNITER
18897     +               %end;
18898     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
18899     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
18900     +               %end;
18901     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
18902     +                 CVSeed = &EM_PROPERTY_CVSEED
18903     +               %end;
18904     +            %end;
18905     +         %end;
18906     +       %end;
18907     +      ;
18909     +      %if "&intFlag" ne "Y" %then %do;
18910     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
18911     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
18912     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
18913     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
18915     +          SUBTREE &subtree
18916     +          %if "&subtree" eq "NLEAVES" %then %do;
18917     +            =&EM_PROPERTY_NSUBTREE
18918     +          %end;
18919     +          ;
18920     +        %end;
18922     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
18923     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
18924     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
18925     +          %end;
18926     +       %end;
18927     +      %end;
18928     + %end;
18931     + MakeMacro nleaves = nleaves;
18932     + save
18933     + %if "&EM_USER_EMTREE" ne "" %then %do;
18934     +   MODEL=&EM_USER_EMTREE
18935     + %end;
18936     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
18937     +   SEQUENCE=&EM_USER_OUTSEQ
18938     + %end;
18939     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
18940     +   IMPORTANCE=&EM_USER_OUTIMPORT
18941     + %end;
18942     + %if "&EM_USER_OUTNODES" ne "" %then %do;
18943     +   NODESTAT=&EM_USER_OUTNODES
18944     + %end;
18945     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
18946     +   SUMMARY=&EM_USER_OUTSUMMARY
18947     + %end;
18948     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
18949     +   STATSBYNODE=&EM_USER_OUTSTATS
18950     + %end;
18951     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
18952     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
18953     + %end;
18954     + %if "&EM_USER_OUTPATH" ne "" %then %do;
18955     +   Pathlistnonmissing=&EM_USER_OUTPATH
18956     + %end;
18957     + %if "&EM_USER_OUTRULES" ne "" %then %do;
18958     +   RULES = &EM_USER_OUTRULES
18959     + %end;
18960     + ;
18962     + %if "&intFlag" ne "Y" %then %do;
18964     +   %let lookupString = ;
18965     +   %if ^%symexist(EM_OPTION) %then
18966     +      %let EM_OPTION=;
18968     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
18969     +      %let lookupString = LOOKUP=SELECT;
18970     +   %end;
18972     +   %let codetext=;
18973     +   %let norescodetxt=;
18975     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
18976     +     %let codetext=&codetext DUMMY;
18977     +     %let norescodetxt=&norescodetxt DUMMY;
18978     +   %end;
18979     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
18980     +     %let codetext=&codetext NOLEAFID;
18981     +     %let norescodetxt=&norescodetxt NOLEAFID;
18982     +   %end;
18983     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
18984     +     %let norescodetxt=&norescodetxt NOPRED;
18985     +   %end;
18987     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
18988     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
18990     +   %if &nnpmml %then %do;
18991     +     code pmml;
18992     +   %end;
18994     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
18995     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
18996     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
18997     +   %end;
18998     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
18999     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19000     +   %end;
19001     + %end;
19003     + run;
19004     + quit;
19006     + /*%em_checkerror(); */
19007     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
19008     +   /* Delete DMDB catalog */
19009     +   proc datasets lib=work nolist;
19010     +       delete _treeDMDB / mt=cat;
19011     +  run;
19012     +  %end;
19014     + %if &nnpmml %then %do;
19015     +    ods pmml close;
19016     + %end;
19018     +  %doendm:
19020     +%mend em_tree_runTreeProcedure;
19022     +%macro em_tree_createFitStats( multipleTar= );
19025     +  /* create targetTable is multipleTar eq Y */
19026     +  data temptarget;
19027     +    set &EM_DATA_VARIABLESET;
19028     +    where ROLE="TARGET";
19029     +  run;
19031     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
19032     +   data &EM_USER_EMOUTFIT;
19033     +     length target $32;
19034     +     merge work.fit_train
19035     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19036     +       work.fit_valid
19037     +     %end;
19038     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
19039     +       work.fit_test
19040     +     %end;
19041     +     ;
19042     +     %if "&multipleTar" eq "N" %then %do;
19043     +       target="%EM_TARGET";
19044     +     %end;
19045     +     %else %do;
19046     +       target = _TARGET_;
19047     +     %end;
19048     +     drop _NW_ _SUMW_
19049     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19050     +        _VSUMW_
19051     +     %end;
19052     +     ;
19053     +   run;
19055     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19056     +     proc datasets library=work nolist;
19057     +       delete fit_valid;
19058     +     run;
19059     +   %end;
19060     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
19061     +     proc datasets library=work nolist;
19062     +       delete fit_test;
19063     +     run;
19064     +   %end;
19066     +%mend em_tree_createFitStats;
19069     +%macro em_tree_makeEnglishRules;
19071     +  %EM_GETNAME(key=OUTNODES, type=DATA);
19072     +  %EM_GETNAME(key=OUTPATH, type=DATA);
19074     +  /* verify that necessary tables exist and if not, skip processing */
19075     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
19076     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19077     +    %goto doendm;
19078     +  %end;
19079     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
19080     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19081     +    %goto doendm;
19082     +  %end;
19084     +  /* determine length of variable in outpath dataset */
19085     +  %let vlength= ;
19086     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
19087     +  %if &dsid ne %then %do;
19088     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
19089     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
19090     +  %end;
19091     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
19093     +  data tempoutpath;
19094     +    length varname $&vlength;
19095     +    retain varname;
19096     +    set &EM_USER_OUTPATH;
19098     +    if ^missing(variable) then varname=variable;
19099     +    else if ^missing(var_name) then varname=var_name;
19100     +    output;
19101     +  run;
19103     +  /* create an array of generated predicted variable names */
19104     +  %let tree_pred_vars = ;
19105     +  %let tree_pred_label = ;
19106     +  %let numpred= 0;
19107     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19109     +    data _null_;
19110     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
19111     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
19112     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
19113     +     if eof then
19114     +       call symput('numpred', strip(put(_N_, BEST.)));
19115     +    run;
19116     +  %end;
19118     +  /* determine if NPRIORS exists in outnodes  */
19119     +  %local nprior_flag;
19120     +  data _null_;
19121     +    set &EM_USER_OUTNODES(obs=2) end=eof;
19122     +    if eof then do;
19123     +      call symput('nprior_flag', strip(put(npriors, best.)));
19124     +    end;
19125     +  run;
19127     +  proc sort data=tempoutpath; by node; run;
19128     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
19130     +  data tempoutpath;
19131     +    merge tempoutpath(in=_a) outnodes(keep= node
19132     +    %if "&nprior_flag" ne "." %then %do;
19133     +      NPRIORS
19134     +    %end;
19135     +    %else %do;
19136     +      N
19137     +    %end;
19138     +    %if &numpred gt 0 %then %do;
19139     +      %do i=1 %to &numpred;
19140     +        &&tree_pred_vars&i
19141     +      %end;
19142     +    %end;
19143     +    );
19144     +    by node;
19145     +    if _a;
19146     +  run;
19148     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
19150     +  data _null_;
19151     +    file x;
19152     +    set tempoutpath;
19153     +    by node descending varname;
19154     +    retain origvar oldnode string;
19155     +    length origvar $32 oldnode 8 string $200;
19157     +    if _N_ = 1 then do;
19158     +      origvar = varname;
19159     +      oldnode = node;
19160     +    end;
19162     +    if first.node then do;
19163     +       put "&EM_CODEBAR";
19164     +       put " Node = " node;
19165     +       put "&EM_CODEBAR";
19166     +    end;
19168     +      if first.varname then do;
19169     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19170     +            if MISSING(CHARACTER_VALUE) then do;
19171     +             if NUMERIC_VALUE ne .  then do;
19172     +              if ^first.node then do;
19173     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19174     +              end;
19175     +              else do;
19176     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19177     +              end;
19178     +             end;
19179     +            end;
19180     +            else do;
19181     +              if ^first.node then do;
19182     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19183     +              end;
19184     +              else do;
19185     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19186     +              end;
19187     +             end;
19188     +         end;
19189     +         else if RELATION in ("=") then do;
19190     +            if ^first.node then do;
19191     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
19192     +            end;
19193     +            else do;
19194     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
19195     +            end;
19196     +         end;
19197     +         else if RELATION in ("ISMISSING") then do;
19198     +            if ^first.node then do;
19199     +              string = " AND "|| strip(varname) || " equals Missing";
19200     +            end;
19201     +            else do;
19202     +              string = "if "|| strip(varname) ||" equals Missing";
19203     +            end;
19204     +         end;
19205     +         else if RELATION in ("ISNOTMISSING") then do;
19206     +            if ^first.node then do;
19207     +              string = " AND "|| strip(varname) || " equals All Values";
19208     +            end;
19209     +            else do;
19210     +              string = "if "|| strip(varname) ||" equals All Values";
19211     +            end;
19212     +         end;
19213     +         if ^missing(varname) then origvar = varname;
19214     +         oldnode=node;
19216     +      end;
19217     +      else do;
19218     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19219     +          if MISSING(CHARACTER_VALUE) then do;
19220     +           if  NUMERIC_VALUE ne .  then do;
19221     +            if ^MISSING(string) then
19222     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19223     +            else
19224     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19225     +           end;
19226     +          end;
19227     +          else do;
19228     +            if ^MISSING(string) then
19229     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19230     +            else
19231     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19232     +          end;
19234     +         end;
19235     +         else if RELATION in ("=") then do;
19236     +           string = strip(string)||", "||strip(character_value);
19237     +         end;
19238     +         else if RELATION in ("ISMISSING") then do;
19240     +         end;
19241     +         if ^missing(varname) then origvar = varname;
19242     +         oldnode=node;
19243     +      end;
19244     +      if last.varname then do;
19245     +         if RELATION in ("ISMISSING") then do;
19246     +           if ^first.varname then do;
19247     +             string = strip(string) || " or MISSING";
19248     +           end;
19249     +         end;
19250     +         put string;
19251     +         if ^missing(varname) then origvar = varname;
19252     +         oldnode=node;
19253     +      end;
19255     +      if last.node then do;
19256     +         put "then ";
19257     +         put " Tree Node Identifier   = " node;
19259     +         %if "&nprior_flag" ne "." %then %do;
19260     +           put " Number of Observations = " NPRIORS;
19261     +         %end;
19262     +         %else %do;
19263     +           put " Number of Observations = " N;
19264     +         %end;
19266     +         %if &numpred gt 0 %then %do;
19267     +           %do i=1 %to &numpred;
19268     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
19269     +           %end;
19270     +         %end;
19272     +         put " ";
19273     +         if ^missing(varname) then origvar = varname;
19274     +         oldnode=node;
19275     +      end;
19277     +  run;
19279     +  proc datasets lib=work nolist;
19280     +    delete tempoutpath outnodes;
19281     +  run;
19283     +  %doendm:
19284     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS1.Part_TRAIN : vars= 39 : recl= 312 : max=20000 : def= 2000

NOTE: There were 1490 observations read from the data set EMWS1.TREE_EMTREE.
NOTE: The data set EMWS1.TREE_BROWSETREE has 1490 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      



MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:40:58" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 27, 2017
Time:                12:40:58
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O114I0U4 "C:\Users\Gaurav\Desktop\second sem\Data 
Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Tree4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O114I0U4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:40:58" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70125477";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:40:58" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Gaurav\Desktop\second sem\Data 
Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Tree4\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
133440     proc freq data=EMWS1.Tree4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree4_VariableSet noprint;
133441     table ROLE*LEVEL/out=WORK.Tree4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree4META;
133442     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 47 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.TREE4META has 10 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
      

133443     proc print data=WORK.Tree4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree4META label noobs;
133444     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
133445     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
133445   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
133445   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
133446     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
133447     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
133448     run;

NOTE: There were 10 observations read from the data set WORK.TREE4META.
NOTE: The PROCEDURE PRINT printed page 69.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

133449     title10;
MPRINT(EM_DIAGRAM):   title10;
133450     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.TextTopic2_TRAIN EMWS1.TextTopic2_TRAIN 
EMWS1.TextTopic2_TRAIN EMWS1.TextTopic2_TRAIN EMWS1 TextTopic2_TRAIN 
EMWS1.TextTopic2_TRAIN EMWS1.TextTopic2_TRAIN 
EMWS1.TextTopic2_TRAIN EMWS1.TextTopic2_TRAIN EMWS1 TextTopic2_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.TextTopic2_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class SubroFlag(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="SubroFlag";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=SubroFlag));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="SubroFlag";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_SubroFlag_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by SubroFlag;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by SubroFlag;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
133479     data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
133480     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
133481     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
133481   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
133481   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
133482        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
133482   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
133482   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
133483     set EMWS1.IDS_SUBROFLAG_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_SUBROFLAG_DM( where=(_TYPE_="TARGET"));
133484     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
133485     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
133486     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
133487     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
133488     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
133489     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
133490     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
133491     end;
MPRINT(EM_DIAGRAM):   end;
133492     output;
MPRINT(EM_DIAGRAM):   output;
133493     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_SUBROFLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

133494     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
133495     proc print data=WORK.Tree4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree4_EVENT noobs label;
133496     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
133497     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
133498     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
133499     run;

NOTE: There were 1 observations read from the data set WORK.TREE4_EVENT.
NOTE: The PROCEDURE PRINT printed page 70.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

133500     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "SubroFlag"." 
133501     proc print data = EMWS1.Ids_SubroFlag_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_SubroFlag_DM noobs label;
133502     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
133503     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
133504     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
133504   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
133504   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
133505     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
133506     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
133507     run;

NOTE: There were 7 observations read from the data set EMWS1.IDS_SUBROFLAG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 71.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

133508     title10;
MPRINT(EM_DIAGRAM):   title10;
133509     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify SubroFlag(type=PROFIT label= SubroFlag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree4: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.SubroFlag;
MPRINT(EM_DECDATA):   length SubroFlag $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   SubroFlag="1";
MPRINT(EM_DECDATA):   COUNT=1135;
MPRINT(EM_DECDATA):   DATAPRIOR=0.37372406980572;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.37372406980572;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   SubroFlag="0";
MPRINT(EM_DECDATA):   COUNT=1902;
MPRINT(EM_DECDATA):   DATAPRIOR=0.62627593019427;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.62627593019427;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify SubroFlag(type=PROFIT label= SubroFlag);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify SubroFlag(type=PROFIT label= SubroFlag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.TextTopic2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="SubroFlag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_SubroFlag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_SubroFlag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="SubroFlag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_SubroFlag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_SubroFlag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
134052     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
134053     * Tree4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree4: Generation of macros and macro variables;
134054     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
134055     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

134056     %let EMEXCEPTIONSTRING=;
134057     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
134058     * TRAIN: Tree4;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree4;
134059     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
134060     %let EM_ACTION = TRAIN;
134061     %let syscc = 0;
134062     %macro main;
134063     
134064       %if %upcase(&EM_ACTION) = CREATE %then %do;
134065         filename temp catalog 'sashelp.emmodl.tree_create.source';
134066         %include temp;
134067         filename temp;
134068     
134069         %em_tree_create;
134070       %end;
134071     
134072        %else
134073        %if %upcase(&EM_ACTION) = TRAIN %then %do;
134074     
134075            filename temp catalog 'sashelp.emmodl.tree_train.source';
134076            %include temp;
134077            filename temp;
134078            %em_tree_train;
134079        %end;
134080     
134081       %else
134082       %if %upcase(&EM_ACTION) = SCORE %then %do;
134083         filename temp catalog 'sashelp.emmodl.tree_score.source';
134084         %include temp;
134085         filename temp;
134086     
134087         %em_tree_score;
134088     
134089       %end;
134090     
134091       %else
134092       %if %upcase(&EM_ACTION) = REPORT %then %do;
134093     
134094            filename temp catalog 'sashelp.emmodl.tree_report.source';
134095            %include temp;
134096            filename temp;
134097     
134098            %em_tree_report;
134099        %end;
134100     
134101       %else
134102       %if %upcase(&EM_ACTION) = OPENINT %then %do;
134103     
134104            filename temp catalog 'sashelp.emmodl.tree_actions.source';
134105            %include temp;
134106            filename temp;
134107            %EM_TREE_OPENTREEVIEWER;
134108     
134109        %end;
134110     
134111       %else
134112       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
134113     
134114            filename temp catalog 'sashelp.emmodl.tree_actions.source';
134115            %include temp;
134116            filename temp;
134117            %EM_TREE_CLOSETREEVIEWER;
134118     
134119        %end;
134120     
134121     
134122        %doendm:
134123     %mend main;
134124     
134125     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
134127    +%macro em_tree_train;
134129    +   %if &EM_IMPORT_DATA eq %then %do;
134130    +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
134131    +       %put &em_codebar;
134132    +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
134132   !+NOQUOTE));
134133    +       %put &errormsg;
134134    +       %put &em_codebar;
134135    +       %goto doendm;
134136    +   %end;
134137    +   %else
134138    +       %let EMEXCEPTIONSTRING =;
134140    +   %if  &EM_NUM_TARGET lt 1 %then %do;
134141    +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
134142    +        %put &em_codebar;
134143    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
134143   !+NOQUOTE));
134144    +        %put &errormsg;
134145    +        %put &em_codebar;
134146    +        %goto doendm;
134147    +   %end;
134149    +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
134149   !+(&EM_NUM_ORDINAL_INPUT < 1)
134150    +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
134150   !+(&EM_NUM_BINARY_REJECTED <1)
134151    +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
134151   !+%do;
134152    +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
134153    +        %put &em_codebar;
134154    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
134154   !+;
134155    +        %put &errormsg;
134156    +        %put &em_codebar;
134157    +        %goto doendm;
134158    +   %end;
134160    +   /* Initialize property macro variables */
134161    +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
134162    +   %include temp;
134163    +   filename temp;
134165    +   %EM_SetProperties;
134167    +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
134168    +   %EM_GETNAME(key=EMTREE, type=DATA);
134169    +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
134170    +     /* if import eq Y and no importtable defined, throw an exception */
134171    +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
134172    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
134173    +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR ,
134173   !+NOQUOTE));
134174    +         %put &em_codebar;
134175    +         %put &errmsg;
134176    +         %put &em_codebar;
134177    +         %goto doendm;
134178    +      %end;
134179    +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
134180    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
134181    +         %put &em_codebar;
134182    +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
134182   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
134183    +         %put &errormsg;
134184    +         %put &em_codebar;
134185    +         %goto doendm;
134186    +      %end;
134187    +      %else %do;
134188    +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
134189    +         %let varnumID = %sysfunc(varnum(&dsid,ID));
134190    +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
134191    +         %let varnumX = %sysfunc(varnum(&dsid,X));
134192    +         %let varnumY = %sysfunc(varnum(&dsid,Y));
134193    +         %let dsid = %sysfunc(close(&dsid));
134194    +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
134195    +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET
134195   !+;
134196    +            %put &em_codebar;
134197    +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
134197   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
134198    +            %put &errormsg;
134199    +            %put &em_codebar;
134200    +            %goto doendm;
134201    +         %end;
134202    +      %end;
134203    +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and
134203   !+(%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then
134203   !+%do;
134204    +         proc delete data=&EM_USER_EMTREE;
134205    +         run;
134206    +      %end;
134207    +   %end;
134208    +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or
134208   !+%sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
134209    +      proc delete data=&EM_USER_EMTREE;
134210    +      run;
134211    +   %end;
134213    +   /* load tree macros */
134214    +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
134215    +   %include temp;
134216    +   filename temp;
134218    +   /* data sets */
134219    +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
134220    +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
134221    +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
134223    +   /* files */
134224    +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
134226    +   /* check actual num of target levels */
134227    +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
134228    +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
134229    +                              nLevel=_nTargetLevel );
134230    +      %if &_nTargetLevel  > 2 %then %do;
134231    +        %let EMEXCEPTIONSTRING =
134231   !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
134232    +        %put &em_codebar;
134233    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
134233   !+NOQUOTE));
134234    +        %put &errormsg;
134235    +        %put &em_codebar;
134236    +        %goto doendm;
134237    +      %end;
134238    +   %end;
134240    +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
134241    +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
134242    +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
134243    +        %let costflag=0;
134244    +        data _null_;
134245    +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
134245   !+^missing(COST) )) end=eof;
134246    +          if eof then call symput("costflag", _N_);
134247    +        run;
134248    +        %if &costflag gt 0 %then %do;
134249    +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
134250    +          %put &em_codebar;
134251    +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
134251   !+costnotvalidwithusedecisions_note_err, NOQUOTE));
134252    +          %put &errormsg;
134253    +          %put &em_codebar;
134254    +          %goto doendm;
134255    +       %end;
134256    +     %end;
134257    +   %end;
134259    +   /* determine if multiple targets will be processed */
134260    +   %let em_tree_multipleTargets=N;
134261    +   %let em_tree_numTarget = 1;
134262    +   %let em_tree_targetVars=;
134264    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
134265    +      /* determine if there are any ordinal target variables - if so, multiple
134265   !+targets are not supported */
134266    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
134267    +         %let em_tree_multipleTargets=N;
134268    +      %end;
134269    +      %else %do;
134270    +         /* create macro array of targets  */
134271    +         data _null_;
134272    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
134272   !+end=eof;
134273    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
134274    +           if eof then
134275    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
134276    +        run;
134278    +        %if &em_tree_numTarget gt 1 %then %do;
134279    +           %let em_tree_multipleTargets=Y;
134280    +        %end;
134281    +      %end;
134282    +   %end;
134284    +   /* create view of only necessary variable for performance reasons */
134285    +   %let tempData = &EM_LIB..em_&EM_NODEID;
134286    +   data &tempData / view=&tempData;
134287    +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
134288    +     %if "&em_tree_multipleTargets" eq "N" %then %do;
134289    +       %EM_TARGET
134290    +     %end;
134291    +     %else %do;
134292    +       %if &em_tree_numTarget ne 0 %then %do;
134293    +         %do i=1 %to &em_tree_numTarget;
134294    +            &&em_tree_targetVars&i
134295    +         %end;
134296    +       %end;
134297    +     %end;
134298    +     );
134299    +   run;
134301    +   /* run Tree procedure */
134302    +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
134302   !+;
134304    +   /* Check return code and throw exception if error is detected */
134305    +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
134306    +   %if &syserr %then %do;
134307    +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
134308    +     %goto doendm;
134309    +   %end;
134311    +   /* add decision score code if multiple targets are processed */
134312    +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
134313    +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
134313   !+;
134314    +   %end;
134316    +   /* create outfit dataset if multiple score statements have been executed */
134317    +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
134319    +   /* create English Rules */
134320    +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
134321    +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
134322    +       %em_tree_makeEnglishRules;
134324    +       /* English Rules */
134325    +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
134325   !+description=ENGLISHRULES, autodisplay=N);
134327    +     %end;
134328    +   filename x;
134330    +   %doendm:
134331    +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
134332    +%macro EM_SetProperties;
134334    +   /* train properties */
134335    +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
134336    +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
134337    +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
134338    +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
134339    +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
134339   !+global=Y);
134340    +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
134341    +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
134342    +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
134343    +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
134344    +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
134345    +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
134346    +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
134347    +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
134348    +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
134349    +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
134350    +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
134351    +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
134351   !+global=Y);
134352    +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
134353    +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
134353   !+global=Y);
134354    +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
134355    +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
134355   !+global=Y);
134356    +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
134357    +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
134358    +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
134359    +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
134360    +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
134361    +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
134362    +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
134363    +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
134364    +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
134365    +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
134366    +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
134367    +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
134368    +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
134369    +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
134370    +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
134371    +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
134372    +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
134373    +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
134374    +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
134375    +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
134377    +   /* properties for interactive sample */
134378    +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
134379    +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
134380    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
134381    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
134383    +   /* report properties */
134384    +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
134385    +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
134386    +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
134386   !+global=Y);
134387    +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
134388    +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
134389    +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
134390    +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
134391    +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
134392    +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
134393    +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
134394    +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
134395    +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
134396    +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
134398    +   /* score properties */
134399    +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
134400    +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
134402    +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree4_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE4_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
134404    +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
134405    +  %global &nLevel;
134406    +  proc dmdb batch data=&indata
134407    +    classout=_tmp_dmdbout;
134408    +    class &target;
134409    +  run;
134410    +  data _tmp_dmdbout;
134411    +    set _tmp_dmdbout;
134412    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
134413    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
134414    +  run;
134415    +  data _null_;
134416    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
134417    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
134418    +    %let dsid = %sysfunc(close(&dsid));
134419    +     call symput("&nLevel", put(&_obs, Best12.));
134420    +  run;
134422    +  proc datasets lib=work nolist;
134423    +     delete _tmp_dmdbout;
134424    +  run;
134425    +  quit;
134426    +%Mend EM_CheckBinaryTargetLevel;
134429    +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
134431    +  /* determine the number of obs in training data */
134432    +  proc sql;
134433    +    reset noprint;
134434    +    select count(*) into :em_nobs from &indata;
134435    +  quit;
134437    +  /* determine the number of input variables */
134438    +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
134438   !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
134439    +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
134439   !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
134441    +  /* retrieve targetEvent from decmeta */
134442    +  %let targetEvent=;
134443    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
134444    +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
134445    +      data _null_;
134446    +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
134447    +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
134448    +      run;
134449    +    %end;
134450    +  %end;
134452    +  /* create targetTable if multipleTar eq Y */
134453    +  data temptarget;
134454    +    set &EM_DATA_VARIABLESET;
134455    +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
134456    +  run;
134458    + /* data sets */
134459    + %EM_GETNAME(key=OUTSTATS,      type=DATA);
134460    + %EM_GETNAME(key=EMTREE,        type=DATA);
134461    + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
134462    + %EM_GETNAME(key=OUTSEQ,        type=DATA);
134463    + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
134464    + %EM_GETNAME(key=OUTNODES,      type=DATA);
134465    + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
134466    + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
134467    + %EM_GETNAME(key=OUTPATH,       type=DATA);
134468    + %EM_GETNAME(key=OUTRULES,      type=DATA);
134470    + /* files */
134471    + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
134472    + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
134474    + /* turn on pmml if requested */
134475    + %let nnpmml=0;
134476    + %if %symexist(EM_PMML) %then %do;
134477    +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
134478    +       %let nnpmml=1;
134480    +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
134481    +%end;
134483    + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
134483   !+&EM_NUM_ORDINAL_TARGET);
134485    + %if &nnpmml or &numClassTarget %then %do;
134487    +       /* create dmdb needed for pmml generation */
134488    +       %let tree_maxlevel = 512;
134489    +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
134490    +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
134491    +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
134492    +         %end;
134493    +       %end;
134494    +       %if &tree_maxlevel gt 0 %then %do;
134495    +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
134496    +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
134497    +       %end;
134499    +       %let targetOrderString =;
134500    +       %let targetString = ;
134501    +       data _null_;
134502    +          length orderString nameString $10000;
134503    +          retain orderString nameString;
134504    +          set &em_data_variableset end=eof;
134505    +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target
134505   !+%then %do;
134506    +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
134507    +          %end;
134508    +          %else %do;
134509    +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and
134509   !+USE ='Y';
134510    +          %end;          select(order);
134511    +            when('')        order ='DESC';
134512    +            when('FMTASC')  order='ASCFMT';
134513    +            when('FMTDESC') order='DESFMT';
134514    +            otherwise;
134515    +          end;
134516    +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
134517    +          nameString = trim(nameString)!!' '!!trim(NAME);
134519    +          if eof then do;
134520    +             call symput('targetOrderString', trim(orderString));
134521    +             call symput('targetString', trim(nameString));
134522    +          end;
134523    +       run;
134525    +       %let arborkluge= "work._treeDMDB";
134527    +       proc dmdb batch data=&indata
134528    +       %if &nnpmml %then %do;
134529    +           PMML
134530    +       %end;
134531    +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
134534    +   %if &nnpmml %then %do;
134535    +        %if "%EM_ID" ne "" %then %do;
134536    +          id %EM_ID;
134537    +        %end;
134538    +        %if &EM_NUM_CLASS gt 0 %then %do;
134539    +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
134540    +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
134541    +               &targetOrderString;
134542    +        %end;
134543    +        %if &EM_NUM_INTERVAL gt 0 %then %do;
134544    +          var %EM_INTERVAL;
134545    +        %end;
134546    +        target &targetString %EM_INTERVAL_TARGET;
134547    +        %if "%EM_FREQ" ne "" %then %do;
134548    +          freq %EM_FREQ;
134549    +        %end;
134550    +  %end;
134551    +  %else %do;
134552    +      class  &targetOrderString;
134553    +      target &targetString %EM_INTERVAL_TARGET;
134554    +  %end;
134555    +       run;
134556    +       quit;
134558    +       proc datasets lib=work nolist;
134559    +          delete classout varout;
134560    +       run;
134561    +       quit;
134563    +    %end;
134564    + %end;
134566    + /* run Arbor procedure */
134567    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
134568    +  proc arbor data=&INDATA
134570    +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
134571    +    Leafsize = &EM_PROPERTY_LEAFSIZE
134572    +  %end;
134574    +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
134574   !+%then %do;
134575    +    Splitsize = &EM_PROPERTY_SPLITSIZE
134576    +  %end;
134578    +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
134579    +    MinCatSize = &EM_PROPERTY_MINCATSIZE
134580    +  %end;
134582    +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
134583    +    MaxBranch = &EM_PROPERTY_MAXBRANCH
134584    +  %end;
134586    +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
134587    +    MaxDepth = &EM_PROPERTY_MAXDEPTH
134588    +  %end;
134590    +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
134590   !+%do;
134591    +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
134592    +  %end;
134593    +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
134594    +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
134595    +  %end;
134596    +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
134597    +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
134598    +  %end;
134600    +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
134601    +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
134602    +      alpha = &EM_PROPERTY_SIGLEVEL
134603    +    %end;
134604    +  %end;
134606    +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
134606   !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
134607    +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
134607   !+ eq "DEFAULT")) %then %do;
134608    +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
134609    +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
134610    +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
134612    +        padjust =
134613    +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
134614    +          &chaid
134615    +        %end;
134616    +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
134617    +          DEPTH
134618    +        %end;
134619    +      %end;
134620    +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
134621    +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
134622    +         pvars = &num_inputs
134623    +      %end;
134624    +    %end;
134625    +  %end;
134626    +  %else %do;
134627    +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR
134627   !+("&Criterion" eq "DEFAULT")) %then %do;
134628    +         padjust = NONE
134629    +      %end;
134630    +  %end;
134632    +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
134633    +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
134634    +    Maxrules = &num_nrules
134635    +  %end;
134637    +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
134638    +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
134639    +    Maxsurrs = &num_nsurrs
134640    +  %end;
134642    +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
134643    +     Missing=&EM_PROPERTY_MISSINGVALUE
134644    +  %end;
134646    +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
134647    +     USEVARONCE
134648    +  %end;
134650    +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
134651    +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
134652    +  %end;
134655    +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
134656    +    event = "&targetEvent"
134657    +  %end;
134659    +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
134660    +     DECSEARCH
134661    +  %end;
134663    +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
134664    +     PRIORSSEARCH
134665    +  %end;
134667    +  %if &arbor_1 ne %then %do;
134668    +    &arbor_1
134669    +  %end;
134671    +  %if &em_arbor ne %then %do;
134672    +     &em_arbor
134673    +  %end;
134674    +  ;
134675    + %end;
134676    + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
134677    +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
134678    +       interact;
134679    + %end;
134680    + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
134681    +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
134682    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
134683    +    %put &em_codebar;
134684    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
134684   !+NOQUOTE));
134685    +    %put &errormsg;
134686    +    %put &em_codebar;
134687    +    %goto doendm;
134688    +   %end;
134689    +   %else %do;
134690    +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
134691    +       interact;
134692    +   %end;
134693    + %end;
134695    + %else %do;
134696    +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
134697    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
134698    +    %put &em_codebar;
134699    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
134699   !+NOQUOTE));
134700    +    %put &errormsg;
134701    +    %put &em_codebar;
134702    +    %goto doendm;
134703    +   %end;
134704    +   %else %do;
134705    +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
134706    +        interact;
134707    +   %end;
134708    + %end;
134710    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
134711    +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
134712    +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
134713    +    %end;
134715    +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
134716    +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
134717    +    %end;
134719    +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
134720    +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
134721    +    %end;
134723    +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
134724    +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
134725    +    %end;
134727    +    %if "%EM_FREQ" ne "" %then %do;
134728    +       freq %EM_FREQ;
134729    +    %end;
134731    +    %if "&multipleTar" eq "Y" %then %do;
134732    +       /* cycle through all target vars in variableset */
134733    +       %let tdsid = %sysfunc(open(temptarget));
134734    +       %if &tdsid %then %do;
134735    +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
134736    +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
134737    +          %do %while(^ %sysfunc(fetch(&tdsid)));
134738    +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
134739    +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
134740    +             target &var / level = &lvl
134741    +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
134742    +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
134743    +             %end;
134744    +             %else %if "&lvl" eq "INTERVAL" %then %do;
134745    +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
134746    +             %end;
134747    +             %else %if "&lvl" eq "ORDINAL" %then %do;
134748    +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
134749    +             %end;
134750    +          %end;
134751    +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
134752    +       %end;
134753    +       useTarget variable = %EM_TARGET;
134754    +    %end;
134755    +    %else %do;
134756    +      target %EM_TARGET / level = %EM_TARGET_LEVEL
134757    +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
134757   !+%then %do;
134758    +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
134759    +      %end;
134760    +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
134761    +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
134762    +      %end;
134763    +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
134764    +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
134765    +      %end;
134766    +    %end;
134768    +    %if "&multipleTar" eq "N" %then %do;
134769    +      &EM_DEC_STATEMENT;
134770    +    %end;
134772    +    Performance &EM_PROPERTY_PERFORMANCE
134773    +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
134774    +      nodesize=&EM_PROPERTY_NODESAMPLE
134775    +    %end;
134776    +    ;
134778    +    %if "&intFlag" eq "Y" %then %do;
134779    +       INTERACT Largest;
134780    +       Train maxnewdepth=0;
134781    +    %end;
134783    +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
134784    +         Assess
134785    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
134785   !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
134785   !+)) %then %do;
134786    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
134787    +              %put &em_codebar;
134788    +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
134788   !+novalidationwithcv_note, NOQUOTE));
134789    +              %put &errormsg;
134790    +              %put &em_codebar;
134791    +            %end;
134792    +            %else %do;
134793    +               Validata=&EM_IMPORT_VALIDATE
134794    +            %end;
134795    +         %end;
134796    +         %else %do;
134797    +           NoValidata
134798    +         %end;
134799    +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
134800    +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
134801    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
134802    +               %if &dsid %then %do;
134803    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
134804    +                 %do %while(^ %sysfunc(fetch(&dsid)));
134805    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
134806    +                   %if "&use" eq "Y" %then %let measure=PROFIT;
134807    +                   %else %do;
134808    +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
134809    +                      %else %let measure= MISC;
134810    +                   %end;
134811    +                 %end;
134812    +               %end;
134813    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
134814    +            %end;
134815    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
134816    +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
134817    +                 %let measure=ASE;
134818    +              %end;
134819    +              %else %do;
134820    +                 %let measure=MISC;
134821    +              %end;
134822    +            %end;
134823    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
134824    +              %let measure=ASE;
134825    +            %end;
134826    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
134827    +               %let measure = LIFT;
134828    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
134829    +               %if &dsid %then %do;
134830    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
134831    +                 %do %while(^ %sysfunc(fetch(&dsid)));
134832    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
134833    +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
134834    +                 %end;
134835    +               %end;
134836    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
134837    +            %end;
134838    +            measure=&measure
134839    +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
134839   !+%then %do;
134840    +               event = "&targetEvent"
134841    +            %end;
134842    +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
134843    +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
134844    +            %end;
134845    +         %end;
134846    +         %if "&multipleTar" eq "N" %then %do;
134847    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
134848    +               CV
134849    +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
134850    +                 CVNITer = &EM_PROPERTY_CVNITER
134851    +               %end;
134852    +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
134853    +                 CVRepeat = &EM_PROPERTY_CVREPEAT
134854    +               %end;
134855    +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
134856    +                 CVSeed = &EM_PROPERTY_CVSEED
134857    +               %end;
134858    +            %end;
134859    +         %end;
134860    +       %end;
134861    +      ;
134863    +      %if "&intFlag" ne "Y" %then %do;
134864    +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
134865    +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
134866    +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
134867    +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
134869    +          SUBTREE &subtree
134870    +          %if "&subtree" eq "NLEAVES" %then %do;
134871    +            =&EM_PROPERTY_NSUBTREE
134872    +          %end;
134873    +          ;
134874    +        %end;
134876    +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
134876   !+ %do;
134877    +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
134878    +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
134878   !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
134879    +          %end;
134880    +       %end;
134881    +      %end;
134882    + %end;
134885    + MakeMacro nleaves = nleaves;
134886    + save
134887    + %if "&EM_USER_EMTREE" ne "" %then %do;
134888    +   MODEL=&EM_USER_EMTREE
134889    + %end;
134890    + %if "&EM_USER_OUTSEQ" ne "" %then %do;
134891    +   SEQUENCE=&EM_USER_OUTSEQ
134892    + %end;
134893    + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
134894    +   IMPORTANCE=&EM_USER_OUTIMPORT
134895    + %end;
134896    + %if "&EM_USER_OUTNODES" ne "" %then %do;
134897    +   NODESTAT=&EM_USER_OUTNODES
134898    + %end;
134899    + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
134900    +   SUMMARY=&EM_USER_OUTSUMMARY
134901    + %end;
134902    + %if "&EM_USER_OUTSTATS" ne "" %then %do;
134903    +   STATSBYNODE=&EM_USER_OUTSTATS
134904    + %end;
134905    + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
134906    +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
134907    + %end;
134908    + %if "&EM_USER_OUTPATH" ne "" %then %do;
134909    +   Pathlistnonmissing=&EM_USER_OUTPATH
134910    + %end;
134911    + %if "&EM_USER_OUTRULES" ne "" %then %do;
134912    +   RULES = &EM_USER_OUTRULES
134913    + %end;
134914    + ;
134916    + %if "&intFlag" ne "Y" %then %do;
134918    +   %let lookupString = ;
134919    +   %if ^%symexist(EM_OPTION) %then
134920    +      %let EM_OPTION=;
134922    +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
134922   !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
134923    +      %let lookupString = LOOKUP=SELECT;
134924    +   %end;
134926    +   %let codetext=;
134927    +   %let norescodetxt=;
134929    +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
134930    +     %let codetext=&codetext DUMMY;
134931    +     %let norescodetxt=&norescodetxt DUMMY;
134932    +   %end;
134933    +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
134934    +     %let codetext=&codetext NOLEAFID;
134935    +     %let norescodetxt=&norescodetxt NOLEAFID;
134936    +   %end;
134937    +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
134938    +     %let norescodetxt=&norescodetxt NOPRED;
134939    +   %end;
134941    +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
134942    +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
134942   !+&lookupString;
134944    +   %if &nnpmml %then %do;
134945    +     code pmml;
134946    +   %end;
134948    +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
134949    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
134950    +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
134951    +   %end;
134952    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
134953    +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
134954    +   %end;
134955    + %end;
134957    + run;
134958    + quit;
134960    + /*%em_checkerror(); */
134961    +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
134962    +   /* Delete DMDB catalog */
134963    +   proc datasets lib=work nolist;
134964    +       delete _treeDMDB / mt=cat;
134965    +  run;
134966    +  %end;
134968    + %if &nnpmml %then %do;
134969    +    ods pmml close;
134970    + %end;
134972    +  %doendm:
134974    +%mend em_tree_runTreeProcedure;
134976    +%macro em_tree_createFitStats( multipleTar= );
134979    +  /* create targetTable is multipleTar eq Y */
134980    +  data temptarget;
134981    +    set &EM_DATA_VARIABLESET;
134982    +    where ROLE="TARGET";
134983    +  run;
134985    +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
134986    +   data &EM_USER_EMOUTFIT;
134987    +     length target $32;
134988    +     merge work.fit_train
134989    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
134990    +       work.fit_valid
134991    +     %end;
134992    +     %if "&EM_IMPORT_TEST" ne "" %then %do;
134993    +       work.fit_test
134994    +     %end;
134995    +     ;
134996    +     %if "&multipleTar" eq "N" %then %do;
134997    +       target="%EM_TARGET";
134998    +     %end;
134999    +     %else %do;
135000    +       target = _TARGET_;
135001    +     %end;
135002    +     drop _NW_ _SUMW_
135003    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
135004    +        _VSUMW_
135005    +     %end;
135006    +     ;
135007    +   run;
135009    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
135010    +     proc datasets library=work nolist;
135011    +       delete fit_valid;
135012    +     run;
135013    +   %end;
135014    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
135015    +     proc datasets library=work nolist;
135016    +       delete fit_test;
135017    +     run;
135018    +   %end;
135020    +%mend em_tree_createFitStats;
135023    +%macro em_tree_makeEnglishRules;
135025    +  %EM_GETNAME(key=OUTNODES, type=DATA);
135026    +  %EM_GETNAME(key=OUTPATH, type=DATA);
135028    +  /* verify that necessary tables exist and if not, skip processing */
135029    +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
135030    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
135031    +    %goto doendm;
135032    +  %end;
135033    +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
135034    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
135035    +    %goto doendm;
135036    +  %end;
135038    +  /* determine length of variable in outpath dataset */
135039    +  %let vlength= ;
135040    +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
135041    +  %if &dsid ne %then %do;
135042    +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
135043    +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
135044    +  %end;
135045    +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
135047    +  data tempoutpath;
135048    +    length varname $&vlength;
135049    +    retain varname;
135050    +    set &EM_USER_OUTPATH;
135052    +    if ^missing(variable) then varname=variable;
135053    +    else if ^missing(var_name) then varname=var_name;
135054    +    output;
135055    +  run;
135057    +  /* create an array of generated predicted variable names */
135058    +  %let tree_pred_vars = ;
135059    +  %let tree_pred_label = ;
135060    +  %let numpred= 0;
135061    +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
135063    +    data _null_;
135064    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
135065    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
135066    +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
135066   !+strip(tranwrd(LABEL,'"','""')));
135067    +     if eof then
135068    +       call symput('numpred', strip(put(_N_, BEST.)));
135069    +    run;
135070    +  %end;
135072    +  /* determine if NPRIORS exists in outnodes  */
135073    +  %local nprior_flag;
135074    +  data _null_;
135075    +    set &EM_USER_OUTNODES(obs=2) end=eof;
135076    +    if eof then do;
135077    +      call symput('nprior_flag', strip(put(npriors, best.)));
135078    +    end;
135079    +  run;
135081    +  proc sort data=tempoutpath; by node; run;
135082    +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
135084    +  data tempoutpath;
135085    +    merge tempoutpath(in=_a) outnodes(keep= node
135086    +    %if "&nprior_flag" ne "." %then %do;
135087    +      NPRIORS
135088    +    %end;
135089    +    %else %do;
135090    +      N
135091    +    %end;
135092    +    %if &numpred gt 0 %then %do;
135093    +      %do i=1 %to &numpred;
135094    +        &&tree_pred_vars&i
135095    +      %end;
135096    +    %end;
135097    +    );
135098    +    by node;
135099    +    if _a;
135100    +  run;
135102    +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
135102   !+run;
135104    +  data _null_;
135105    +    file x;
135106    +    set tempoutpath;
135107    +    by node descending varname;
135108    +    retain origvar oldnode string;
135109    +    length origvar $32 oldnode 8 string $200;
135111    +    if _N_ = 1 then do;
135112    +      origvar = varname;
135113    +      oldnode = node;
135114    +    end;
135116    +    if first.node then do;
135117    +       put "&EM_CODEBAR";
135118    +       put " Node = " node;
135119    +       put "&EM_CODEBAR";
135120    +    end;
135122    +      if first.varname then do;
135123    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
135124    +            if MISSING(CHARACTER_VALUE) then do;
135125    +             if NUMERIC_VALUE ne .  then do;
135126    +              if ^first.node then do;
135127    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
135127   !+"||strip(numeric_value);
135128    +              end;
135129    +              else do;
135130    +                string= "if "|| strip(varname)||" "||strip(relation)||"
135130   !+"||strip(numeric_value);
135131    +              end;
135132    +             end;
135133    +            end;
135134    +            else do;
135135    +              if ^first.node then do;
135136    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
135136   !+"||strip(character_value);
135137    +              end;
135138    +              else do;
135139    +                string= "if "|| strip(varname)||" "||strip(relation)||"
135139   !+"||strip(character_value);
135140    +              end;
135141    +             end;
135142    +         end;
135143    +         else if RELATION in ("=") then do;
135144    +            if ^first.node then do;
135145    +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
135146    +            end;
135147    +            else do;
135148    +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
135149    +            end;
135150    +         end;
135151    +         else if RELATION in ("ISMISSING") then do;
135152    +            if ^first.node then do;
135153    +              string = " AND "|| strip(varname) || " equals Missing";
135154    +            end;
135155    +            else do;
135156    +              string = "if "|| strip(varname) ||" equals Missing";
135157    +            end;
135158    +         end;
135159    +         else if RELATION in ("ISNOTMISSING") then do;
135160    +            if ^first.node then do;
135161    +              string = " AND "|| strip(varname) || " equals All Values";
135162    +            end;
135163    +            else do;
135164    +              string = "if "|| strip(varname) ||" equals All Values";
135165    +            end;
135166    +         end;
135167    +         if ^missing(varname) then origvar = varname;
135168    +         oldnode=node;
135170    +      end;
135171    +      else do;
135172    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
135173    +          if MISSING(CHARACTER_VALUE) then do;
135174    +           if  NUMERIC_VALUE ne .  then do;
135175    +            if ^MISSING(string) then
135176    +              string= strip(string)||" AND "|| strip(varname)||"
135176   !+"||strip(relation)||" "||strip(numeric_value);
135177    +            else
135178    +              string= " if "|| strip(varname)||" "||strip(relation)||"
135178   !+"||strip(numeric_value);
135179    +           end;
135180    +          end;
135181    +          else do;
135182    +            if ^MISSING(string) then
135183    +              string= strip(string)||" AND "|| strip(varname)||"
135183   !+"||strip(relation)||" "||strip(character_value);
135184    +            else
135185    +              string= " if "|| strip(varname)||" "||strip(relation)||"
135185   !+"||strip(character_value);
135186    +          end;
135188    +         end;
135189    +         else if RELATION in ("=") then do;
135190    +           string = strip(string)||", "||strip(character_value);
135191    +         end;
135192    +         else if RELATION in ("ISMISSING") then do;
135194    +         end;
135195    +         if ^missing(varname) then origvar = varname;
135196    +         oldnode=node;
135197    +      end;
135198    +      if last.varname then do;
135199    +         if RELATION in ("ISMISSING") then do;
135200    +           if ^first.varname then do;
135201    +             string = strip(string) || " or MISSING";
135202    +           end;
135203    +         end;
135204    +         put string;
135205    +         if ^missing(varname) then origvar = varname;
135206    +         oldnode=node;
135207    +      end;
135209    +      if last.node then do;
135210    +         put "then ";
135211    +         put " Tree Node Identifier   = " node;
135213    +         %if "&nprior_flag" ne "." %then %do;
135214    +           put " Number of Observations = " NPRIORS;
135215    +         %end;
135216    +         %else %do;
135217    +           put " Number of Observations = " N;
135218    +         %end;
135220    +         %if &numpred gt 0 %then %do;
135221    +           %do i=1 %to &numpred;
135222    +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
135223    +           %end;
135224    +         %end;
135226    +         put " ";
135227    +         if ^missing(varname) then origvar = varname;
135228    +         oldnode=node;
135229    +      end;
135231    +  run;
135233    +  proc datasets lib=work nolist;
135234    +    delete tempoutpath outnodes;
135235    +  run;
135237    +  %doendm:
The SAS System

135238    +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 
property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.TextTopic2_TRAIN 
classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class SubroFlag;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 302   Memory used = 511K.
NOTE: There were 302 observations read from the data set EMWS1.TEXTTOPIC2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree4 / view=EMWS1.em_Tree4;
MPRINT(EM_TREE_TRAIN):   set EMWS1.TextTopic2_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Body Cause Nature TextCluster2_SVD1 TextCluster2_SVD10 
TextCluster2_SVD2 TextCluster2_SVD3 TextCluster2_SVD4 TextCluster2_SVD5 TextCluster2_SVD6 
TextCluster2_SVD7 TextCluster2_SVD8 TextCluster2_SVD9 TextTopic2_raw1 TextTopic2_raw2 
TextTopic2_raw3 TextTopic2_raw4 TextTopic2_raw5 TextTopic2_raw6 TextTopic2_raw7 
TextTopic2_raw8 TextTopic2_raw9 VEHflag SubroFlag SubroFlag );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree4;
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: There were 302 observations read from the data set EMWS1.TEXTTOPIC2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids_SubroFlag_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_SUBROFLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree4_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", 
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' 
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree4 dmdbcat=_treeDMDB 
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class SubroFlag(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target SubroFlag
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Records processed = 302   Memory used = 511K.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      
NOTE: There were 302 observations read from the data set EMWS1.TEXTTOPIC2_TRAIN.
NOTE: There were 302 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree4 Leafsize = 10 MinCatSize = 
5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 
Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   TextCluster2_SVD1 TextCluster2_SVD10 TextCluster2_SVD2 
TextCluster2_SVD3 TextCluster2_SVD4 TextCluster2_SVD5 TextCluster2_SVD6 TextCluster2_SVD7 
TextCluster2_SVD8 TextCluster2_SVD9 TextTopic2_raw1 TextTopic2_raw2 TextTopic2_raw3 
TextTopic2_raw4 TextTopic2_raw5 TextTopic2_raw6 TextTopic2_raw7 TextTopic2_raw8 TextTopic2_raw9
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Body Cause Nature
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   VEHflag
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   SubroFlag
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.TextTopic2_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1572460 kilobytes of physical memory.
NOTE: Will use 302 out of 302 training cases.
NOTE: Using memory pool with 167244800 bytes.
NOTE: Passed training data 8 times.
NOTE: Training used 211768 bytes of work memory.
NOTE: The subtree sequence contains 7 subtrees. The largest has 13 nodes and 7 leaves.
NOTE: Using subtree with 9 nodes and 5 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 9 nodes and 5 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 5.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree4_EMTREE SEQUENCE=EMWS1.Tree4_OUTSEQ 
IMPORTANCE=EMWS1.Tree4_OUTIMPORT NODESTAT=EMWS1.Tree4_OUTNODES SUMMARY=EMWS1.Tree4_OUTSUMMARY 
STATSBYNODE=EMWS1.Tree4_OUTSTATS TOPOLOGY=EMWS1.Tree4_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree4_OUTPATH RULES = EMWS1.Tree4_OUTRULES ;
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 23 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_EMTREE has 612 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTNODES has 9 observations and 24 variables.
NOTE: The data set EMWS1.TREE4_OUTPATH has 33 observations and 7 variables.
NOTE: The data set EMWS1.TREE4_OUTRULES has 132 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 7 observations and 20 variables.
NOTE: The data set EMWS1.TREE4_OUTSTATS has 63 observations and 5 variables.
NOTE: The data set EMWS1.TREE4_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTTOPOLOGY has 9 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\Gaurav\Desktop\second sem\Data 
Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Tree4\TREEFLOW.sas" res group=Tree4 ;
NOTE: External file C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance 
      Claim\Workspaces\EMWS1\Tree4\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\Gaurav\Desktop\second sem\Data 
Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas" nores group=Tree4 ;
NOTE: External file C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance 
      Claim\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas opened.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree4 out=_NULL_ outfit=work.fit_train 
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 302 observations read from the data set EMWS1.TEXTTOPIC2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.TextTopic2_VALIDATE out=_NULL_ 
outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.80 seconds
      cpu time            0.53 seconds
      
NOTE: There were 302 observations read from the data set EMWS1.TEXTTOPIC2_TRAIN.
NOTE: There were 302 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.86 seconds
      cpu time            0.54 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree4_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "SubroFlag";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $42;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree4_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 33 observations read from the data set EMWS1.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 33 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_SubroFlag_DM(where=(_TYPE_="PREDICTED")) 
end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), 
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), 
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS1.IDS_SUBROFLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree4_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 33 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree4_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 9 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 9 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS 
P_SubroFlag1 P_SubroFlag0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 9 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 33 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 33 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put 
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put 
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" 
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" 
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" 
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" 
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: 
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: 
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| 
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" 
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| 
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" 
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: SubroFlag=1 = " P_SubroFlag1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: SubroFlag=0 = " P_SubroFlag0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance 
      Claim\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=27Apr2017:12:41:03,
      Create Time=26Apr2017:18:47:23

NOTE: 59 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: There were 33 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27119032585583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
135240     
135241     *------------------------------------------------------------*;
135242     * End TRAIN: Tree4;
135243     *------------------------------------------------------------*;

135244     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
135245     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
135246     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
135247     ;
MPRINT(EM_DIAGRAM):   ;
135248     ;
MPRINT(EM_DIAGRAM):   ;
135249     ;
MPRINT(EM_DIAGRAM):   ;
135250     ;
MPRINT(EM_DIAGRAM):   ;
135251     quit;
MPRINT(EM_DIAGRAM):   quit;
135252     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
135253     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
135254     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
135255     /*; *"; *'; */
135256     ;
MPRINT(EM_DIAGRAM):   ;
135257     run;
MPRINT(EM_DIAGRAM):   run;
135258     quit;
MPRINT(EM_DIAGRAM):   quit;
135259     /* Reset EM Options */
135260     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
135261     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
135262     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
135263     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
135264     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
135265     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

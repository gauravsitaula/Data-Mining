MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:45:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 27, 2017
Time:                12:45:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O33T4KS8 "C:\Users\Gaurav\Desktop\second sem\Data 
Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O33T4KS8 new;
MPRINT(EM_DIAGRAM):   run;
40494      proc transpose data=EMWS1.Reg2_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg2_EMESTIMATE out=WORK.TEMPREG;
40495      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
40496      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG2_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 105 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
      

40497      proc transpose data=EMWS1.Reg2_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg2_MAPDS 
out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
40498      var "BodyANKLE"n--"VEHflag0"n;
MPRINT(EM_DIAGRAM):   var "BodyANKLE"n--"VEHflag0"n;
40499      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG2_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 71 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

40500      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
40501      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
40502      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 105 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 105 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

40503      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
40504      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
40505      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 71 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 71 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

40506      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
40507      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
40508      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
40509      if (ina and inb) and SubroFlag ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and SubroFlag ne . then output;
40510      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 105 observations read from the data set WORK.TEMPREG.
NOTE: There were 71 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

40511      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
40512      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
40513      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
40514      i=1;
MPRINT(EM_DIAGRAM):   i=1;
40515      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
40516      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
40517      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
40518      output;
MPRINT(EM_DIAGRAM):   output;
40519      end;
MPRINT(EM_DIAGRAM):   end;
40520      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

40521      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
40522      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
40523      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

40524      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance
40524    ! Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40525      *------------------------------------------------------------*;
40526      * Reg2: Scoring DATA data;
40527      *------------------------------------------------------------*;
40528      data EMWS1.Reg2_TRAIN
40529      / view=EMWS1.Reg2_TRAIN
40530      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_TRAIN / view=EMWS1.Reg2_TRAIN ;
40531      set EMWS1.TextTopic2_TRAIN
40532      ;
MPRINT(EM_DIAGRAM):   set EMWS1.TextTopic2_TRAIN ;
40533      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Gaurav\Desktop\second sem\Data 
      Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
40534     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40535     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
40536     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40537     +
40538     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
40539     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
40540     +
40541     +length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
40542     +label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
40543     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
40544     +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
40545     +label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
40546     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
40547     +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
40548     +
40549     +*** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
40550     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
40551     +label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
40552     +length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
40553     +F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
40554     +%DMNORMIP( F_SubroFlag )
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
40555     +if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
40556     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
40557     +end;
MPRINT(EM_DIAGRAM):   end;
40558     +else do;
MPRINT(EM_DIAGRAM):   else do;
40559     +   if F_SubroFlag = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
40560     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
40561     +   end;
MPRINT(EM_DIAGRAM):   end;
40562     +   else if F_SubroFlag = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
40563     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
40564     +   end;
MPRINT(EM_DIAGRAM):   end;
40565     +   else do;
MPRINT(EM_DIAGRAM):   else do;
40566     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
40567     +   end;
MPRINT(EM_DIAGRAM):   end;
40568     +end;
MPRINT(EM_DIAGRAM):   end;
40569     +
40570     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
40571     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
40572     +
40573     +*** Check TextCluster2_SVD1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster2_SVD1 for missing values ;
40574     +if missing( TextCluster2_SVD1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster2_SVD1 ) then do;
40575     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40576     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40577     +end;
MPRINT(EM_DIAGRAM):   end;
40578     +
40579     +*** Check TextCluster2_SVD10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster2_SVD10 for missing values ;
40580     +if missing( TextCluster2_SVD10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster2_SVD10 ) then do;
40581     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40582     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40583     +end;
MPRINT(EM_DIAGRAM):   end;
40584     +
40585     +*** Check TextTopic2_raw6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic2_raw6 for missing values ;
40586     +if missing( TextTopic2_raw6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic2_raw6 ) then do;
40587     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40588     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40589     +end;
MPRINT(EM_DIAGRAM):   end;
40590     +
40591     +*** Check TextTopic2_raw7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic2_raw7 for missing values ;
40592     +if missing( TextTopic2_raw7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic2_raw7 ) then do;
40593     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40594     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40595     +end;
MPRINT(EM_DIAGRAM):   end;
40596     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
40597     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
40598     +   _P0 = 0.3741721854;
MPRINT(EM_DIAGRAM):   _P0 = 0.3741721854;
40599     +   _P1 = 0.6258278146;
MPRINT(EM_DIAGRAM):   _P1 = 0.6258278146;
40600     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
40601     +end;
MPRINT(EM_DIAGRAM):   end;
40602     +
40603     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
40604     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
40605     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
40606     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
40607     +
40608     +***  Effect: TextCluster2_SVD1 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster2_SVD1 ;
40609     +_TEMP = TextCluster2_SVD1 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster2_SVD1 ;
40610     +_LP0 = _LP0 + (    3.38850590854286 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.38850590854286 * _TEMP);
40611     +
40612     +***  Effect: TextCluster2_SVD10 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster2_SVD10 ;
40613     +_TEMP = TextCluster2_SVD10 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster2_SVD10 ;
40614     +_LP0 = _LP0 + (    1.90539624220738 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.90539624220738 * _TEMP);
40615     +
40616     +***  Effect: TextTopic2_raw6 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic2_raw6 ;
40617     +_TEMP = TextTopic2_raw6 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic2_raw6 ;
40618     +_LP0 = _LP0 + (    8.61856994622636 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.61856994622636 * _TEMP);
40619     +
40620     +***  Effect: TextTopic2_raw7 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic2_raw7 ;
40621     +_TEMP = TextTopic2_raw7 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic2_raw7 ;
40622     +_LP0 = _LP0 + (    2.45128008503119 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.45128008503119 * _TEMP);
40623     +
40624     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
40625     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
40626     +_TEMP =    -0.91505997715741 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.91505997715741 + _LP0;
40627     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
40628     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
40629     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
40630     +end;
MPRINT(EM_DIAGRAM):   end;
40631     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
40632     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
40633     +
40634     +REG2DR1:
40635     +
40636     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
40637     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
40638     +   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
40639     +   R_SubroFlag0 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
40640     +end;
MPRINT(EM_DIAGRAM):   end;
40641     +else do;
MPRINT(EM_DIAGRAM):   else do;
40642     +    label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
40643     +    label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
40644     +   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
40645     +   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
40646     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
40647     +      when (0)  R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
40648     +      when (1)  R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
40649     +   end;
MPRINT(EM_DIAGRAM):   end;
40650     +end;
MPRINT(EM_DIAGRAM):   end;
40651     +
40652     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
40653     +label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
40654     +label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
40655     +P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
40656     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
40657     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
40658     +P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
40659     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
40660     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
40661     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
40662     +end;
MPRINT(EM_DIAGRAM):   end;
40663     +I_SubroFlag = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_SubroFlag = REG2DRF[_IY];
40664     +U_SubroFlag = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_SubroFlag = REG2DRU[_IY];
40665     +
40666     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40667     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
40668     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
40669      run;

NOTE: DATA STEP view saved on file EMWS1.REG2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
40670      quit;
40671      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
40672      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance
40672    ! Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40673      *------------------------------------------------------------*;
40674      * Reg2: Scoring VALIDATE data;
40675      *------------------------------------------------------------*;
40676      data EMWS1.Reg2_VALIDATE
40677      / view=EMWS1.Reg2_VALIDATE
40678      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_VALIDATE / view=EMWS1.Reg2_VALIDATE ;
40679      set EMWS1.TextTopic2_VALIDATE
40680      ;
MPRINT(EM_DIAGRAM):   set EMWS1.TextTopic2_VALIDATE ;
40681      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Gaurav\Desktop\second sem\Data 
      Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
40682     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40683     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
40684     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40685     +
40686     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
40687     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
40688     +
40689     +length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
40690     +label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
40691     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
40692     +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
40693     +label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
40694     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
40695     +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
40696     +
40697     +*** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
40698     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
40699     +label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
40700     +length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
40701     +F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
40702     +%DMNORMIP( F_SubroFlag )
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
40703     +if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
40704     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
40705     +end;
MPRINT(EM_DIAGRAM):   end;
40706     +else do;
MPRINT(EM_DIAGRAM):   else do;
40707     +   if F_SubroFlag = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
40708     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
40709     +   end;
MPRINT(EM_DIAGRAM):   end;
40710     +   else if F_SubroFlag = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
40711     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
40712     +   end;
MPRINT(EM_DIAGRAM):   end;
40713     +   else do;
MPRINT(EM_DIAGRAM):   else do;
40714     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
40715     +   end;
MPRINT(EM_DIAGRAM):   end;
40716     +end;
MPRINT(EM_DIAGRAM):   end;
40717     +
40718     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
40719     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
40720     +
40721     +*** Check TextCluster2_SVD1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster2_SVD1 for missing values ;
40722     +if missing( TextCluster2_SVD1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster2_SVD1 ) then do;
40723     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40724     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40725     +end;
MPRINT(EM_DIAGRAM):   end;
40726     +
40727     +*** Check TextCluster2_SVD10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster2_SVD10 for missing values ;
40728     +if missing( TextCluster2_SVD10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster2_SVD10 ) then do;
40729     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40730     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40731     +end;
MPRINT(EM_DIAGRAM):   end;
40732     +
40733     +*** Check TextTopic2_raw6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic2_raw6 for missing values ;
40734     +if missing( TextTopic2_raw6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic2_raw6 ) then do;
40735     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40736     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40737     +end;
MPRINT(EM_DIAGRAM):   end;
40738     +
40739     +*** Check TextTopic2_raw7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic2_raw7 for missing values ;
40740     +if missing( TextTopic2_raw7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic2_raw7 ) then do;
40741     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
40742     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
40743     +end;
MPRINT(EM_DIAGRAM):   end;
40744     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
40745     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
40746     +   _P0 = 0.3741721854;
MPRINT(EM_DIAGRAM):   _P0 = 0.3741721854;
40747     +   _P1 = 0.6258278146;
MPRINT(EM_DIAGRAM):   _P1 = 0.6258278146;
40748     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
40749     +end;
MPRINT(EM_DIAGRAM):   end;
40750     +
40751     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
40752     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
40753     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
40754     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
40755     +
40756     +***  Effect: TextCluster2_SVD1 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster2_SVD1 ;
40757     +_TEMP = TextCluster2_SVD1 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster2_SVD1 ;
40758     +_LP0 = _LP0 + (    3.38850590854286 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.38850590854286 * _TEMP);
40759     +
40760     +***  Effect: TextCluster2_SVD10 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster2_SVD10 ;
40761     +_TEMP = TextCluster2_SVD10 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster2_SVD10 ;
40762     +_LP0 = _LP0 + (    1.90539624220738 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.90539624220738 * _TEMP);
40763     +
40764     +***  Effect: TextTopic2_raw6 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic2_raw6 ;
40765     +_TEMP = TextTopic2_raw6 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic2_raw6 ;
40766     +_LP0 = _LP0 + (    8.61856994622636 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.61856994622636 * _TEMP);
40767     +
40768     +***  Effect: TextTopic2_raw7 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic2_raw7 ;
40769     +_TEMP = TextTopic2_raw7 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic2_raw7 ;
40770     +_LP0 = _LP0 + (    2.45128008503119 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.45128008503119 * _TEMP);
40771     +
40772     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
40773     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
40774     +_TEMP =    -0.91505997715741 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.91505997715741 + _LP0;
40775     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
40776     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
40777     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
40778     +end;
MPRINT(EM_DIAGRAM):   end;
40779     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
40780     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
40781     +
40782     +REG2DR1:
40783     +
40784     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
40785     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
40786     +   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
40787     +   R_SubroFlag0 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
40788     +end;
MPRINT(EM_DIAGRAM):   end;
40789     +else do;
MPRINT(EM_DIAGRAM):   else do;
40790     +    label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
40791     +    label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
40792     +   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
40793     +   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
40794     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
40795     +      when (0)  R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
40796     +      when (1)  R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
40797     +   end;
MPRINT(EM_DIAGRAM):   end;
40798     +end;
MPRINT(EM_DIAGRAM):   end;
40799     +
40800     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
40801     +label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
40802     +label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
40803     +P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
40804     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
40805     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
40806     +P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
40807     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
40808     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
40809     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
40810     +end;
MPRINT(EM_DIAGRAM):   end;
40811     +I_SubroFlag = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_SubroFlag = REG2DRF[_IY];
40812     +U_SubroFlag = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_SubroFlag = REG2DRU[_IY];
40813     +
40814     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
40815     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
40816     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
40817      run;

NOTE: DATA STEP view saved on file EMWS1.REG2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
40818      quit;
40819      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
40820      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40821      * Reg2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg2: Computing metadata for TRAIN data;
40822      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 
3\Insurance Claim\Workspaces\EMWS1\Reg2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg2_TRAIN out=WORK.M2YE_C6O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2YE_C6O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2YE_C6O(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2YE_C6O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2YE_C6O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1J4OALS NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03V40PO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J4OALS;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.TextTopic2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.TextTopic2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("F_SUBROFLAG") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("I_SUBROFLAG") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("U_SUBROFLAG") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("SUBROFLAG") model = "Reg2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'TEXTCLUSTER2_SVD1' 'TEXTCLUSTER2_SVD10' 
'TEXTTOPIC2_RAW6' 'TEXTTOPIC2_RAW7' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg2: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
41187      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
41188      set EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO;
41189      where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
41190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (DATA='Reg2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

41191      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMINFO;
41192      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
41193      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
41194      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
41198      run;
41199      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMINFO;
41200      set EMWS1.Reg2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO WORK.MODELTEMP_INFO;
41201      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

41202      proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
41203      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
41204      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

41205      proc sort data = EMWS1.TextTopic2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.TextTopic2_EMINFO OUT=WORK.SORTEDEMINFO 
NOTHREADS;
41206      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
41207      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.TEXTTOPIC2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

41208      proc sort data = EMWS1.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
41209      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
41210      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

41211      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMINFO;
41212      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
41213      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
41214      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG2_EMINFO has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

41215      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
41216      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
41217      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
41218      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

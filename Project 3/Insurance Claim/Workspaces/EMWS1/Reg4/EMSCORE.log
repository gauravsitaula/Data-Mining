MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 28, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:33" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 28, 2017
Time:                16:26:33
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O26MSIWE "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O26MSIWE new;
MPRINT(EM_DIAGRAM):   run;
21480      proc transpose data=EMWS1.Reg4_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg4_EMESTIMATE out=WORK.TEMPREG;
21481      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
21482      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG4_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 97 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

21483      proc transpose data=EMWS1.Reg4_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg4_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
21484      var "BodyABDOMEN"n--"VEHflag0"n;
MPRINT(EM_DIAGRAM):   var "BodyABDOMEN"n--"VEHflag0"n;
21485      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG4_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 63 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

21486      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
21487      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21488      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 97 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 97 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21489      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
21490      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21491      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 63 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 63 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21492      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
21493      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
21494      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21495      if (ina and inb) and SubroFlag ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and SubroFlag ne . then output;
21496      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 97 observations read from the data set WORK.TEMPREG.
NOTE: There were 63 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 62 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21497      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
21498      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
21499      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
21500      i=1;
MPRINT(EM_DIAGRAM):   i=1;
21501      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
21502      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
21503      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
21504      output;
MPRINT(EM_DIAGRAM):   output;
21505      end;
MPRINT(EM_DIAGRAM):   end;
21506      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 62 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 62 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

21507      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
21508      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
21509      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 62 observations read from the data set WORK.TEMPREG3.
NOTE: 59 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 3 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21510      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21511      *------------------------------------------------------------*;
21512      * Reg4: Scoring DATA data;
21513      *------------------------------------------------------------*;
21514      data EMWS1.Reg4_TRAIN
21515      / view=EMWS1.Reg4_TRAIN
21516      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_TRAIN / view=EMWS1.Reg4_TRAIN ;
21517      set EMWS1.Part2_TRAIN
21518      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_TRAIN ;
21519      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG4DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG4DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Body ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 _1_13 _1_14 _1_15 _1_16 _1_17 _1_18 _1_19 _1_20 _1_21 _1_22 _1_23 _1_24 _1_25 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_13 = 0;
MPRINT(EM_DIAGRAM):   _1_14 = 0;
MPRINT(EM_DIAGRAM):   _1_15 = 0;
MPRINT(EM_DIAGRAM):   _1_16 = 0;
MPRINT(EM_DIAGRAM):   _1_17 = 0;
MPRINT(EM_DIAGRAM):   _1_18 = 0;
MPRINT(EM_DIAGRAM):   _1_19 = 0;
MPRINT(EM_DIAGRAM):   _1_20 = 0;
MPRINT(EM_DIAGRAM):   _1_21 = 0;
MPRINT(EM_DIAGRAM):   _1_22 = 0;
MPRINT(EM_DIAGRAM):   _1_23 = 0;
MPRINT(EM_DIAGRAM):   _1_24 = 0;
MPRINT(EM_DIAGRAM):   _1_25 = 0;
MPRINT(EM_DIAGRAM):   if missing( Body ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_13 = .;
MPRINT(EM_DIAGRAM):   _1_14 = .;
MPRINT(EM_DIAGRAM):   _1_15 = .;
MPRINT(EM_DIAGRAM):   _1_16 = .;
MPRINT(EM_DIAGRAM):   _1_17 = .;
MPRINT(EM_DIAGRAM):   _1_18 = .;
MPRINT(EM_DIAGRAM):   _1_19 = .;
MPRINT(EM_DIAGRAM):   _1_20 = .;
MPRINT(EM_DIAGRAM):   _1_21 = .;
MPRINT(EM_DIAGRAM):   _1_22 = .;
MPRINT(EM_DIAGRAM):   _1_23 = .;
MPRINT(EM_DIAGRAM):   _1_24 = .;
MPRINT(EM_DIAGRAM):   _1_25 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Body,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'HIP' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'EYE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'BACK' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'ANKLE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ABDOMEN' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ANKLE' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ARM' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'BACK' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'ELBOW' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'EAR' then do;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ELBOW' then do;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'EYE' then do;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'GROIN' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'FINGER' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FACE' then do;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FINGER' then do;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FOOT' then do;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'GROIN' then do;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'HEAD' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HAND' then do;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HEAD' then do;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HIP' then do;
MPRINT(EM_DIAGRAM):   _1_13 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'SHOULDER' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'KNEE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'JAW' then do;
MPRINT(EM_DIAGRAM):   _1_14 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'KNEE' then do;
MPRINT(EM_DIAGRAM):   _1_15 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'LEG' then do;
MPRINT(EM_DIAGRAM):   _1_16 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   _1_17 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'RIBS' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'NECK' then do;
MPRINT(EM_DIAGRAM):   _1_18 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'RIBS' then do;
MPRINT(EM_DIAGRAM):   _1_19 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SHOULDER' then do;
MPRINT(EM_DIAGRAM):   _1_20 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'TOOTH' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'TOES' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SPINE' then do;
MPRINT(EM_DIAGRAM):   _1_21 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TOES' then do;
MPRINT(EM_DIAGRAM):   _1_22 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TOOTH' then do;
MPRINT(EM_DIAGRAM):   _1_23 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TORSO' then do;
MPRINT(EM_DIAGRAM):   _1_24 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _1_25 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'WRIST' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_13 = -1;
MPRINT(EM_DIAGRAM):   _1_14 = -1;
MPRINT(EM_DIAGRAM):   _1_15 = -1;
MPRINT(EM_DIAGRAM):   _1_16 = -1;
MPRINT(EM_DIAGRAM):   _1_17 = -1;
MPRINT(EM_DIAGRAM):   _1_18 = -1;
MPRINT(EM_DIAGRAM):   _1_19 = -1;
MPRINT(EM_DIAGRAM):   _1_20 = -1;
MPRINT(EM_DIAGRAM):   _1_21 = -1;
MPRINT(EM_DIAGRAM):   _1_22 = -1;
MPRINT(EM_DIAGRAM):   _1_23 = -1;
MPRINT(EM_DIAGRAM):   _1_24 = -1;
MPRINT(EM_DIAGRAM):   _1_25 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_13 = .;
MPRINT(EM_DIAGRAM):   _1_14 = .;
MPRINT(EM_DIAGRAM):   _1_15 = .;
MPRINT(EM_DIAGRAM):   _1_16 = .;
MPRINT(EM_DIAGRAM):   _1_17 = .;
MPRINT(EM_DIAGRAM):   _1_18 = .;
MPRINT(EM_DIAGRAM):   _1_19 = .;
MPRINT(EM_DIAGRAM):   _1_20 = .;
MPRINT(EM_DIAGRAM):   _1_21 = .;
MPRINT(EM_DIAGRAM):   _1_22 = .;
MPRINT(EM_DIAGRAM):   _1_23 = .;
MPRINT(EM_DIAGRAM):   _1_24 = .;
MPRINT(EM_DIAGRAM):   _1_25 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Cause ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 _2_10 _2_11 _2_12 _2_13 _2_14 _2_15 _2_16 _2_17 _2_18 _2_19 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_10 = 0;
MPRINT(EM_DIAGRAM):   _2_11 = 0;
MPRINT(EM_DIAGRAM):   _2_12 = 0;
MPRINT(EM_DIAGRAM):   _2_13 = 0;
MPRINT(EM_DIAGRAM):   _2_14 = 0;
MPRINT(EM_DIAGRAM):   _2_15 = 0;
MPRINT(EM_DIAGRAM):   _2_16 = 0;
MPRINT(EM_DIAGRAM):   _2_17 = 0;
MPRINT(EM_DIAGRAM):   _2_18 = 0;
MPRINT(EM_DIAGRAM):   _2_19 = 0;
MPRINT(EM_DIAGRAM):   if missing( Cause ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_10 = .;
MPRINT(EM_DIAGRAM):   _2_11 = .;
MPRINT(EM_DIAGRAM):   _2_12 = .;
MPRINT(EM_DIAGRAM):   _2_13 = .;
MPRINT(EM_DIAGRAM):   _2_14 = .;
MPRINT(EM_DIAGRAM):   _2_15 = .;
MPRINT(EM_DIAGRAM):   _2_16 = .;
MPRINT(EM_DIAGRAM):   _2_17 = .;
MPRINT(EM_DIAGRAM):   _2_18 = .;
MPRINT(EM_DIAGRAM):   _2_19 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Cause,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm24 = 'STRUCK OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'SLIP/FALL' then do;
MPRINT(EM_DIAGRAM):   _2_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'LIFTING' then do;
MPRINT(EM_DIAGRAM):   _2_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MVA' then do;
MPRINT(EM_DIAGRAM):   _2_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNUSUAL BODY MOVEMENT' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_10 = -1;
MPRINT(EM_DIAGRAM):   _2_11 = -1;
MPRINT(EM_DIAGRAM):   _2_12 = -1;
MPRINT(EM_DIAGRAM):   _2_13 = -1;
MPRINT(EM_DIAGRAM):   _2_14 = -1;
MPRINT(EM_DIAGRAM):   _2_15 = -1;
MPRINT(EM_DIAGRAM):   _2_16 = -1;
MPRINT(EM_DIAGRAM):   _2_17 = -1;
MPRINT(EM_DIAGRAM):   _2_18 = -1;
MPRINT(EM_DIAGRAM):   _2_19 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'REPETITIVE MOTION' then do;
MPRINT(EM_DIAGRAM):   _2_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CAUGHT IN MACHINE' then do;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'PUSHING/PULLING' then do;
MPRINT(EM_DIAGRAM):   _2_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FOREIGN BODY/OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'EQUIPMENT/MACHINERY' then do;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FIRE' then do;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CONTACT WITH OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _2_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ANIMAL ATTACK' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'EXPOSURE' then do;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'OCCUPATIONAL ILLNESS' then do;
MPRINT(EM_DIAGRAM):   _2_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'HUMAN CONFLICT' then do;
MPRINT(EM_DIAGRAM):   _2_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'STRESS' then do;
MPRINT(EM_DIAGRAM):   _2_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BITING/STINGING INSECT' then do;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ENVIRONMENTAL' then do;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ELECTROCUTION' then do;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_10 = .;
MPRINT(EM_DIAGRAM):   _2_11 = .;
MPRINT(EM_DIAGRAM):   _2_12 = .;
MPRINT(EM_DIAGRAM):   _2_13 = .;
MPRINT(EM_DIAGRAM):   _2_14 = .;
MPRINT(EM_DIAGRAM):   _2_15 = .;
MPRINT(EM_DIAGRAM):   _2_16 = .;
MPRINT(EM_DIAGRAM):   _2_17 = .;
MPRINT(EM_DIAGRAM):   _2_18 = .;
MPRINT(EM_DIAGRAM):   _2_19 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Nature ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 _3_9 _3_10 _3_11 _3_12 _3_13 _3_14 _3_15 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_6 = 0;
MPRINT(EM_DIAGRAM):   _3_7 = 0;
MPRINT(EM_DIAGRAM):   _3_8 = 0;
MPRINT(EM_DIAGRAM):   _3_9 = 0;
MPRINT(EM_DIAGRAM):   _3_10 = 0;
MPRINT(EM_DIAGRAM):   _3_11 = 0;
MPRINT(EM_DIAGRAM):   _3_12 = 0;
MPRINT(EM_DIAGRAM):   _3_13 = 0;
MPRINT(EM_DIAGRAM):   _3_14 = 0;
MPRINT(EM_DIAGRAM):   _3_15 = 0;
MPRINT(EM_DIAGRAM):   if missing( Nature ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_9 = .;
MPRINT(EM_DIAGRAM):   _3_10 = .;
MPRINT(EM_DIAGRAM):   _3_11 = .;
MPRINT(EM_DIAGRAM):   _3_12 = .;
MPRINT(EM_DIAGRAM):   _3_13 = .;
MPRINT(EM_DIAGRAM):   _3_14 = .;
MPRINT(EM_DIAGRAM):   _3_15 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Nature,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm24 = 'SPRAIN/STRAIN' then do;
MPRINT(EM_DIAGRAM):   _3_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CONTUSION' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'LACERATION' then do;
MPRINT(EM_DIAGRAM):   _3_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FRACTURE' then do;
MPRINT(EM_DIAGRAM):   _3_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'REPETITIVE MOTION' then do;
MPRINT(EM_DIAGRAM):   _3_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ABRASION' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BURN' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ANIMAL/INSECT BITE' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'INFECTION/DISEASE' then do;
MPRINT(EM_DIAGRAM):   _3_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   _3_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'PUNCTURE' then do;
MPRINT(EM_DIAGRAM):   _3_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MENTAL HEALTH' then do;
MPRINT(EM_DIAGRAM):   _3_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'POISONING' then do;
MPRINT(EM_DIAGRAM):   _3_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'AMPUTATION' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BITE' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_6 = -1;
MPRINT(EM_DIAGRAM):   _3_7 = -1;
MPRINT(EM_DIAGRAM):   _3_8 = -1;
MPRINT(EM_DIAGRAM):   _3_9 = -1;
MPRINT(EM_DIAGRAM):   _3_10 = -1;
MPRINT(EM_DIAGRAM):   _3_11 = -1;
MPRINT(EM_DIAGRAM):   _3_12 = -1;
MPRINT(EM_DIAGRAM):   _3_13 = -1;
MPRINT(EM_DIAGRAM):   _3_14 = -1;
MPRINT(EM_DIAGRAM):   _3_15 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'DEATH' then do;
MPRINT(EM_DIAGRAM):   _3_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_9 = .;
MPRINT(EM_DIAGRAM):   _3_10 = .;
MPRINT(EM_DIAGRAM):   _3_11 = .;
MPRINT(EM_DIAGRAM):   _3_12 = .;
MPRINT(EM_DIAGRAM):   _3_13 = .;
MPRINT(EM_DIAGRAM):   _3_14 = .;
MPRINT(EM_DIAGRAM):   _3_15 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.3735177866;
MPRINT(EM_DIAGRAM):   _P1 = 0.6264822134;
MPRINT(EM_DIAGRAM):   goto REG4DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Body ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.4402886070573) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.78454774757566) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12625064401588) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13403989185461) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -11.6782250222773) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35253511653874) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.95767179178952) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53444248268208) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.63516858354357) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11757547123217) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.56751488138338) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0288873399312) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0414236146049) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.2054859468528) * _TEMP * _1_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.93233460206072) * _TEMP * _1_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36356944028373) * _TEMP * _1_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38797236330236) * _TEMP * _1_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.6477137044342) * _TEMP * _1_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.65637881190212) * _TEMP * _1_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.29811294140338) * _TEMP * _1_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.71421699069281) * _TEMP * _1_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.76515229705455) * _TEMP * _1_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.269231392108) * _TEMP * _1_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.16747291783978) * _TEMP * _1_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.237284835542) * _TEMP * _1_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.90695456724623) * _TEMP * _1_25;
MPRINT(EM_DIAGRAM):   *** Effect: Cause ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.51707590103074) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 13.2878639029665) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.39814320662548) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.76448847302961) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.5946819876267) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.52957252284574) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09060730142592) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.35709343793498) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.59406798170964) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.63240985585061) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.51744734177818) * _TEMP * _2_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05053736476608) * _TEMP * _2_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.14825891263852) * _TEMP * _2_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.57251732045281) * _TEMP * _2_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3798398724016) * _TEMP * _2_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.27631669464722) * _TEMP * _2_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.76345389676305) * _TEMP * _2_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -10.5422493161334) * _TEMP * _2_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71642962079155) * _TEMP * _2_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48411832792945) * _TEMP * _2_19;
MPRINT(EM_DIAGRAM):   *** Effect: Nature ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.65437126579452) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19142182324007) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -12.1933118114275) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -12.0718614918381) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.66182303722026) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24186081577862) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 11.913541513509) * _TEMP * _3_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4146888167778) * _TEMP * _3_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.6853615016552) * _TEMP * _3_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.09698729316228) * _TEMP * _3_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 10.4851225117667) * _TEMP * _3_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.92160066914731) * _TEMP * _3_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.7018141123269) * _TEMP * _3_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.39274827620788) * _TEMP * _3_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.27513103752868) * _TEMP * _3_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _3_15;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.99597066288764 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG4DR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_SubroFlag = REG4DRF[_IY];
MPRINT(EM_DIAGRAM):   U_SubroFlag = REG4DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   run;
22289      run;

NOTE: DATA STEP view saved on file EMWS1.REG4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22290      quit;
22291      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22292      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22293      *------------------------------------------------------------*;
22294      * Reg4: Scoring VALIDATE data;
22295      *------------------------------------------------------------*;
22296      data EMWS1.Reg4_VALIDATE
22297      / view=EMWS1.Reg4_VALIDATE
22298      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_VALIDATE / view=EMWS1.Reg4_VALIDATE ;
22299      set EMWS1.Part2_VALIDATE
22300      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_VALIDATE ;
22301      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG4DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG4DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Body ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 _1_13 _1_14 _1_15 _1_16 _1_17 _1_18 _1_19 _1_20 _1_21 _1_22 _1_23 _1_24 _1_25 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_13 = 0;
MPRINT(EM_DIAGRAM):   _1_14 = 0;
MPRINT(EM_DIAGRAM):   _1_15 = 0;
MPRINT(EM_DIAGRAM):   _1_16 = 0;
MPRINT(EM_DIAGRAM):   _1_17 = 0;
MPRINT(EM_DIAGRAM):   _1_18 = 0;
MPRINT(EM_DIAGRAM):   _1_19 = 0;
MPRINT(EM_DIAGRAM):   _1_20 = 0;
MPRINT(EM_DIAGRAM):   _1_21 = 0;
MPRINT(EM_DIAGRAM):   _1_22 = 0;
MPRINT(EM_DIAGRAM):   _1_23 = 0;
MPRINT(EM_DIAGRAM):   _1_24 = 0;
MPRINT(EM_DIAGRAM):   _1_25 = 0;
MPRINT(EM_DIAGRAM):   if missing( Body ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_13 = .;
MPRINT(EM_DIAGRAM):   _1_14 = .;
MPRINT(EM_DIAGRAM):   _1_15 = .;
MPRINT(EM_DIAGRAM):   _1_16 = .;
MPRINT(EM_DIAGRAM):   _1_17 = .;
MPRINT(EM_DIAGRAM):   _1_18 = .;
MPRINT(EM_DIAGRAM):   _1_19 = .;
MPRINT(EM_DIAGRAM):   _1_20 = .;
MPRINT(EM_DIAGRAM):   _1_21 = .;
MPRINT(EM_DIAGRAM):   _1_22 = .;
MPRINT(EM_DIAGRAM):   _1_23 = .;
MPRINT(EM_DIAGRAM):   _1_24 = .;
MPRINT(EM_DIAGRAM):   _1_25 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Body,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'HIP' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'EYE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'BACK' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'ANKLE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ABDOMEN' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ANKLE' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ARM' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'BACK' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'ELBOW' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'EAR' then do;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ELBOW' then do;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'EYE' then do;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'GROIN' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'FINGER' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FACE' then do;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FINGER' then do;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'FOOT' then do;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'GROIN' then do;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'HEAD' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HAND' then do;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HEAD' then do;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'HIP' then do;
MPRINT(EM_DIAGRAM):   _1_13 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'SHOULDER' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'KNEE' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'JAW' then do;
MPRINT(EM_DIAGRAM):   _1_14 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'KNEE' then do;
MPRINT(EM_DIAGRAM):   _1_15 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'LEG' then do;
MPRINT(EM_DIAGRAM):   _1_16 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   _1_17 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'RIBS' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'NECK' then do;
MPRINT(EM_DIAGRAM):   _1_18 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'RIBS' then do;
MPRINT(EM_DIAGRAM):   _1_19 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SHOULDER' then do;
MPRINT(EM_DIAGRAM):   _1_20 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'TOOTH' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'TOES' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SPINE' then do;
MPRINT(EM_DIAGRAM):   _1_21 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TOES' then do;
MPRINT(EM_DIAGRAM):   _1_22 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TOOTH' then do;
MPRINT(EM_DIAGRAM):   _1_23 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'TORSO' then do;
MPRINT(EM_DIAGRAM):   _1_24 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _1_25 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'WRIST' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_13 = -1;
MPRINT(EM_DIAGRAM):   _1_14 = -1;
MPRINT(EM_DIAGRAM):   _1_15 = -1;
MPRINT(EM_DIAGRAM):   _1_16 = -1;
MPRINT(EM_DIAGRAM):   _1_17 = -1;
MPRINT(EM_DIAGRAM):   _1_18 = -1;
MPRINT(EM_DIAGRAM):   _1_19 = -1;
MPRINT(EM_DIAGRAM):   _1_20 = -1;
MPRINT(EM_DIAGRAM):   _1_21 = -1;
MPRINT(EM_DIAGRAM):   _1_22 = -1;
MPRINT(EM_DIAGRAM):   _1_23 = -1;
MPRINT(EM_DIAGRAM):   _1_24 = -1;
MPRINT(EM_DIAGRAM):   _1_25 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_13 = .;
MPRINT(EM_DIAGRAM):   _1_14 = .;
MPRINT(EM_DIAGRAM):   _1_15 = .;
MPRINT(EM_DIAGRAM):   _1_16 = .;
MPRINT(EM_DIAGRAM):   _1_17 = .;
MPRINT(EM_DIAGRAM):   _1_18 = .;
MPRINT(EM_DIAGRAM):   _1_19 = .;
MPRINT(EM_DIAGRAM):   _1_20 = .;
MPRINT(EM_DIAGRAM):   _1_21 = .;
MPRINT(EM_DIAGRAM):   _1_22 = .;
MPRINT(EM_DIAGRAM):   _1_23 = .;
MPRINT(EM_DIAGRAM):   _1_24 = .;
MPRINT(EM_DIAGRAM):   _1_25 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Cause ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 _2_10 _2_11 _2_12 _2_13 _2_14 _2_15 _2_16 _2_17 _2_18 _2_19 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_10 = 0;
MPRINT(EM_DIAGRAM):   _2_11 = 0;
MPRINT(EM_DIAGRAM):   _2_12 = 0;
MPRINT(EM_DIAGRAM):   _2_13 = 0;
MPRINT(EM_DIAGRAM):   _2_14 = 0;
MPRINT(EM_DIAGRAM):   _2_15 = 0;
MPRINT(EM_DIAGRAM):   _2_16 = 0;
MPRINT(EM_DIAGRAM):   _2_17 = 0;
MPRINT(EM_DIAGRAM):   _2_18 = 0;
MPRINT(EM_DIAGRAM):   _2_19 = 0;
MPRINT(EM_DIAGRAM):   if missing( Cause ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_10 = .;
MPRINT(EM_DIAGRAM):   _2_11 = .;
MPRINT(EM_DIAGRAM):   _2_12 = .;
MPRINT(EM_DIAGRAM):   _2_13 = .;
MPRINT(EM_DIAGRAM):   _2_14 = .;
MPRINT(EM_DIAGRAM):   _2_15 = .;
MPRINT(EM_DIAGRAM):   _2_16 = .;
MPRINT(EM_DIAGRAM):   _2_17 = .;
MPRINT(EM_DIAGRAM):   _2_18 = .;
MPRINT(EM_DIAGRAM):   _2_19 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Cause,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm24 = 'STRUCK OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'SLIP/FALL' then do;
MPRINT(EM_DIAGRAM):   _2_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'LIFTING' then do;
MPRINT(EM_DIAGRAM):   _2_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MVA' then do;
MPRINT(EM_DIAGRAM):   _2_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNUSUAL BODY MOVEMENT' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_10 = -1;
MPRINT(EM_DIAGRAM):   _2_11 = -1;
MPRINT(EM_DIAGRAM):   _2_12 = -1;
MPRINT(EM_DIAGRAM):   _2_13 = -1;
MPRINT(EM_DIAGRAM):   _2_14 = -1;
MPRINT(EM_DIAGRAM):   _2_15 = -1;
MPRINT(EM_DIAGRAM):   _2_16 = -1;
MPRINT(EM_DIAGRAM):   _2_17 = -1;
MPRINT(EM_DIAGRAM):   _2_18 = -1;
MPRINT(EM_DIAGRAM):   _2_19 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'REPETITIVE MOTION' then do;
MPRINT(EM_DIAGRAM):   _2_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CAUGHT IN MACHINE' then do;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'PUSHING/PULLING' then do;
MPRINT(EM_DIAGRAM):   _2_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FOREIGN BODY/OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'EQUIPMENT/MACHINERY' then do;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FIRE' then do;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CONTACT WITH OBJECT' then do;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _2_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ANIMAL ATTACK' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'EXPOSURE' then do;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'OCCUPATIONAL ILLNESS' then do;
MPRINT(EM_DIAGRAM):   _2_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'HUMAN CONFLICT' then do;
MPRINT(EM_DIAGRAM):   _2_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'STRESS' then do;
MPRINT(EM_DIAGRAM):   _2_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BITING/STINGING INSECT' then do;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ENVIRONMENTAL' then do;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ELECTROCUTION' then do;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_10 = .;
MPRINT(EM_DIAGRAM):   _2_11 = .;
MPRINT(EM_DIAGRAM):   _2_12 = .;
MPRINT(EM_DIAGRAM):   _2_13 = .;
MPRINT(EM_DIAGRAM):   _2_14 = .;
MPRINT(EM_DIAGRAM):   _2_15 = .;
MPRINT(EM_DIAGRAM):   _2_16 = .;
MPRINT(EM_DIAGRAM):   _2_17 = .;
MPRINT(EM_DIAGRAM):   _2_18 = .;
MPRINT(EM_DIAGRAM):   _2_19 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Nature ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 _3_9 _3_10 _3_11 _3_12 _3_13 _3_14 _3_15 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_6 = 0;
MPRINT(EM_DIAGRAM):   _3_7 = 0;
MPRINT(EM_DIAGRAM):   _3_8 = 0;
MPRINT(EM_DIAGRAM):   _3_9 = 0;
MPRINT(EM_DIAGRAM):   _3_10 = 0;
MPRINT(EM_DIAGRAM):   _3_11 = 0;
MPRINT(EM_DIAGRAM):   _3_12 = 0;
MPRINT(EM_DIAGRAM):   _3_13 = 0;
MPRINT(EM_DIAGRAM):   _3_14 = 0;
MPRINT(EM_DIAGRAM):   _3_15 = 0;
MPRINT(EM_DIAGRAM):   if missing( Nature ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_9 = .;
MPRINT(EM_DIAGRAM):   _3_10 = .;
MPRINT(EM_DIAGRAM):   _3_11 = .;
MPRINT(EM_DIAGRAM):   _3_12 = .;
MPRINT(EM_DIAGRAM):   _3_13 = .;
MPRINT(EM_DIAGRAM):   _3_14 = .;
MPRINT(EM_DIAGRAM):   _3_15 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(DMNORMCP):   _dm24=dmnorm(Nature,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm24 = 'SPRAIN/STRAIN' then do;
MPRINT(EM_DIAGRAM):   _3_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'CONTUSION' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'LACERATION' then do;
MPRINT(EM_DIAGRAM):   _3_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'FRACTURE' then do;
MPRINT(EM_DIAGRAM):   _3_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'REPETITIVE MOTION' then do;
MPRINT(EM_DIAGRAM):   _3_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ABRASION' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BURN' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'ANIMAL/INSECT BITE' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'INFECTION/DISEASE' then do;
MPRINT(EM_DIAGRAM):   _3_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MULTIPLE' then do;
MPRINT(EM_DIAGRAM):   _3_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'PUNCTURE' then do;
MPRINT(EM_DIAGRAM):   _3_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'MENTAL HEALTH' then do;
MPRINT(EM_DIAGRAM):   _3_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'POISONING' then do;
MPRINT(EM_DIAGRAM):   _3_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'AMPUTATION' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'BITE' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_6 = -1;
MPRINT(EM_DIAGRAM):   _3_7 = -1;
MPRINT(EM_DIAGRAM):   _3_8 = -1;
MPRINT(EM_DIAGRAM):   _3_9 = -1;
MPRINT(EM_DIAGRAM):   _3_10 = -1;
MPRINT(EM_DIAGRAM):   _3_11 = -1;
MPRINT(EM_DIAGRAM):   _3_12 = -1;
MPRINT(EM_DIAGRAM):   _3_13 = -1;
MPRINT(EM_DIAGRAM):   _3_14 = -1;
MPRINT(EM_DIAGRAM):   _3_15 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm24 = 'DEATH' then do;
MPRINT(EM_DIAGRAM):   _3_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_9 = .;
MPRINT(EM_DIAGRAM):   _3_10 = .;
MPRINT(EM_DIAGRAM):   _3_11 = .;
MPRINT(EM_DIAGRAM):   _3_12 = .;
MPRINT(EM_DIAGRAM):   _3_13 = .;
MPRINT(EM_DIAGRAM):   _3_14 = .;
MPRINT(EM_DIAGRAM):   _3_15 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.3735177866;
MPRINT(EM_DIAGRAM):   _P1 = 0.6264822134;
MPRINT(EM_DIAGRAM):   goto REG4DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Body ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.4402886070573) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.78454774757566) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12625064401588) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13403989185461) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -11.6782250222773) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35253511653874) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.95767179178952) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53444248268208) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.63516858354357) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11757547123217) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.56751488138338) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0288873399312) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0414236146049) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.2054859468528) * _TEMP * _1_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.93233460206072) * _TEMP * _1_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36356944028373) * _TEMP * _1_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.38797236330236) * _TEMP * _1_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.6477137044342) * _TEMP * _1_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.65637881190212) * _TEMP * _1_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.29811294140338) * _TEMP * _1_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.71421699069281) * _TEMP * _1_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.76515229705455) * _TEMP * _1_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.269231392108) * _TEMP * _1_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.16747291783978) * _TEMP * _1_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.237284835542) * _TEMP * _1_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.90695456724623) * _TEMP * _1_25;
MPRINT(EM_DIAGRAM):   *** Effect: Cause ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.51707590103074) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 13.2878639029665) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.39814320662548) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.76448847302961) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.5946819876267) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.52957252284574) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09060730142592) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.35709343793498) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.59406798170964) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.63240985585061) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.51744734177818) * _TEMP * _2_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05053736476608) * _TEMP * _2_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.14825891263852) * _TEMP * _2_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.57251732045281) * _TEMP * _2_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3798398724016) * _TEMP * _2_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.27631669464722) * _TEMP * _2_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.76345389676305) * _TEMP * _2_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -10.5422493161334) * _TEMP * _2_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71642962079155) * _TEMP * _2_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48411832792945) * _TEMP * _2_19;
MPRINT(EM_DIAGRAM):   *** Effect: Nature ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.65437126579452) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19142182324007) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -12.1933118114275) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -12.0718614918381) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.66182303722026) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24186081577862) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 11.913541513509) * _TEMP * _3_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4146888167778) * _TEMP * _3_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.6853615016552) * _TEMP * _3_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.09698729316228) * _TEMP * _3_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 10.4851225117667) * _TEMP * _3_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.92160066914731) * _TEMP * _3_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.7018141123269) * _TEMP * _3_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.39274827620788) * _TEMP * _3_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.27513103752868) * _TEMP * _3_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _3_15;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.99597066288764 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG4DR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_SubroFlag = REG4DRF[_IY];
MPRINT(EM_DIAGRAM):   U_SubroFlag = REG4DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
23071      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.REG4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23072      quit;
23073      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23074      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23075      * Reg4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg4: Computing metadata for TRAIN data;
23076      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg4_TRAIN out=WORK.M0_YWXVL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_YWXVL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_YWXVL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_YWXVL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_YWXVL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1FP628S NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2890R3A(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FP628S;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG1") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG1") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG0") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG0") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("F_SUBROFLAG") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("I_SUBROFLAG") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("U_SUBROFLAG") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("SUBROFLAG") model = "Reg4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'BODY' 'CAUSE' 'NATURE' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg4: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
23440      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
23441      set EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMINFO;
23442      where DATA='Reg4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
23443      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG4_EMINFO.
      WHERE (DATA='Reg4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

23444      data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMINFO;
23445      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
23446      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
23447      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
23451      run;
23452      data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMINFO;
23453      set EMWS1.Reg4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMINFO WORK.MODELTEMP_INFO;
23454      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

23455      proc sort data = EMWS1.Reg4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg4_EMINFO NOTHREADS;
23456      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23457      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

23458      proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
23459      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23460      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

23461      proc sort data = EMWS1.Reg4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
23462      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23463      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

23464      data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMINFO;
23465      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
23466      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23467      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

23468      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
23469      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
23470      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
23471      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.REG4_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

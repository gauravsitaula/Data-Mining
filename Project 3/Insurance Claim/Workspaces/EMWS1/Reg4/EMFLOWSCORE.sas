*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_SubroFlag $ 12;
label I_SubroFlag = 'Into: SubroFlag' ;
*** Target Values;
array REG4DRF [2] $12 _temporary_ ('1' '0' );
label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
*** Unnormalized target values;
ARRAY REG4DRU[2]  _TEMPORARY_ (1 0);

*** Generate dummy variables for SubroFlag ;
drop _Y ;
label F_SubroFlag = 'From: SubroFlag' ;
length F_SubroFlag $ 12;
F_SubroFlag = put( SubroFlag , BEST12. );
%DMNORMIP( F_SubroFlag )
if missing( SubroFlag ) then do;
   _Y = .;
end;
else do;
   if F_SubroFlag = '0'  then do;
      _Y = 1;
   end;
   else if F_SubroFlag = '1'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Generate dummy variables for Body ;
drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 _1_13
         _1_14 _1_15 _1_16 _1_17 _1_18 _1_19 _1_20 _1_21 _1_22 _1_23 _1_24 
        _1_25 ;
*** encoding is sparse, initialize to zero;
_1_0 = 0;
_1_1 = 0;
_1_2 = 0;
_1_3 = 0;
_1_4 = 0;
_1_5 = 0;
_1_6 = 0;
_1_7 = 0;
_1_8 = 0;
_1_9 = 0;
_1_10 = 0;
_1_11 = 0;
_1_12 = 0;
_1_13 = 0;
_1_14 = 0;
_1_15 = 0;
_1_16 = 0;
_1_17 = 0;
_1_18 = 0;
_1_19 = 0;
_1_20 = 0;
_1_21 = 0;
_1_22 = 0;
_1_23 = 0;
_1_24 = 0;
_1_25 = 0;
if missing( Body ) then do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _1_3 = .;
   _1_4 = .;
   _1_5 = .;
   _1_6 = .;
   _1_7 = .;
   _1_8 = .;
   _1_9 = .;
   _1_10 = .;
   _1_11 = .;
   _1_12 = .;
   _1_13 = .;
   _1_14 = .;
   _1_15 = .;
   _1_16 = .;
   _1_17 = .;
   _1_18 = .;
   _1_19 = .;
   _1_20 = .;
   _1_21 = .;
   _1_22 = .;
   _1_23 = .;
   _1_24 = .;
   _1_25 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm24 $ 24; drop _dm24 ;
   %DMNORMCP( Body , _dm24 )
   _dm_find = 0; drop _dm_find;
   if _dm24 <= 'HIP'  then do;
      if _dm24 <= 'EYE'  then do;
         if _dm24 <= 'BACK'  then do;
            if _dm24 <= 'ANKLE'  then do;
               if _dm24 = 'ABDOMEN'  then do;
                  _1_0 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'ANKLE'  then do;
                     _1_1 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'ARM'  then do;
                  _1_2 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'BACK'  then do;
                     _1_3 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
         end;
         else do;
            if _dm24 <= 'ELBOW'  then do;
               if _dm24 = 'EAR'  then do;
                  _1_4 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'ELBOW'  then do;
                     _1_5 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'EYE'  then do;
                  _1_6 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
      else do;
         if _dm24 <= 'GROIN'  then do;
            if _dm24 <= 'FINGER'  then do;
               if _dm24 = 'FACE'  then do;
                  _1_7 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'FINGER'  then do;
                     _1_8 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'FOOT'  then do;
                  _1_9 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'GROIN'  then do;
                     _1_10 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
         end;
         else do;
            if _dm24 <= 'HEAD'  then do;
               if _dm24 = 'HAND'  then do;
                  _1_11 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'HEAD'  then do;
                     _1_12 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'HIP'  then do;
                  _1_13 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
   end;
   else do;
      if _dm24 <= 'SHOULDER'  then do;
         if _dm24 <= 'MULTIPLE'  then do;
            if _dm24 <= 'KNEE'  then do;
               if _dm24 = 'JAW'  then do;
                  _1_14 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'KNEE'  then do;
                     _1_15 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'LEG'  then do;
                  _1_16 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'MULTIPLE'  then do;
                     _1_17 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
         end;
         else do;
            if _dm24 <= 'RIBS'  then do;
               if _dm24 = 'NECK'  then do;
                  _1_18 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'RIBS'  then do;
                     _1_19 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'SHOULDER'  then do;
                  _1_20 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
      else do;
         if _dm24 <= 'TOOTH'  then do;
            if _dm24 <= 'TOES'  then do;
               if _dm24 = 'SPINE'  then do;
                  _1_21 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'TOES'  then do;
                     _1_22 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'TOOTH'  then do;
                  _1_23 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm24 <= 'UNKNOWN'  then do;
               if _dm24 = 'TORSO'  then do;
                  _1_24 = 1;
                  _dm_find = 1;
               end;
               else do;
                  if _dm24 = 'UNKNOWN'  then do;
                     _1_25 = 1;
                     _dm_find = 1;
                  end;
               end;
            end;
            else do;
               if _dm24 = 'WRIST'  then do;
                  _1_0 = -1;
                  _1_1 = -1;
                  _1_2 = -1;
                  _1_3 = -1;
                  _1_4 = -1;
                  _1_5 = -1;
                  _1_6 = -1;
                  _1_7 = -1;
                  _1_8 = -1;
                  _1_9 = -1;
                  _1_10 = -1;
                  _1_11 = -1;
                  _1_12 = -1;
                  _1_13 = -1;
                  _1_14 = -1;
                  _1_15 = -1;
                  _1_16 = -1;
                  _1_17 = -1;
                  _1_18 = -1;
                  _1_19 = -1;
                  _1_20 = -1;
                  _1_21 = -1;
                  _1_22 = -1;
                  _1_23 = -1;
                  _1_24 = -1;
                  _1_25 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _1_0 = .;
      _1_1 = .;
      _1_2 = .;
      _1_3 = .;
      _1_4 = .;
      _1_5 = .;
      _1_6 = .;
      _1_7 = .;
      _1_8 = .;
      _1_9 = .;
      _1_10 = .;
      _1_11 = .;
      _1_12 = .;
      _1_13 = .;
      _1_14 = .;
      _1_15 = .;
      _1_16 = .;
      _1_17 = .;
      _1_18 = .;
      _1_19 = .;
      _1_20 = .;
      _1_21 = .;
      _1_22 = .;
      _1_23 = .;
      _1_24 = .;
      _1_25 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Cause ;
drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 _2_10 _2_11 _2_12 _2_13
         _2_14 _2_15 _2_16 _2_17 _2_18 _2_19 ;
*** encoding is sparse, initialize to zero;
_2_0 = 0;
_2_1 = 0;
_2_2 = 0;
_2_3 = 0;
_2_4 = 0;
_2_5 = 0;
_2_6 = 0;
_2_7 = 0;
_2_8 = 0;
_2_9 = 0;
_2_10 = 0;
_2_11 = 0;
_2_12 = 0;
_2_13 = 0;
_2_14 = 0;
_2_15 = 0;
_2_16 = 0;
_2_17 = 0;
_2_18 = 0;
_2_19 = 0;
if missing( Cause ) then do;
   _2_0 = .;
   _2_1 = .;
   _2_2 = .;
   _2_3 = .;
   _2_4 = .;
   _2_5 = .;
   _2_6 = .;
   _2_7 = .;
   _2_8 = .;
   _2_9 = .;
   _2_10 = .;
   _2_11 = .;
   _2_12 = .;
   _2_13 = .;
   _2_14 = .;
   _2_15 = .;
   _2_16 = .;
   _2_17 = .;
   _2_18 = .;
   _2_19 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm24 $ 24; drop _dm24 ;
   %DMNORMCP( Cause , _dm24 )
   if _dm24 = 'STRUCK OBJECT'  then do;
      _2_18 = 1;
   end;
   else if _dm24 = 'SLIP/FALL'  then do;
      _2_16 = 1;
   end;
   else if _dm24 = 'LIFTING'  then do;
      _2_11 = 1;
   end;
   else if _dm24 = 'MVA'  then do;
      _2_12 = 1;
   end;
   else if _dm24 = 'UNUSUAL BODY MOVEMENT'  then do;
      _2_0 = -1;
      _2_1 = -1;
      _2_2 = -1;
      _2_3 = -1;
      _2_4 = -1;
      _2_5 = -1;
      _2_6 = -1;
      _2_7 = -1;
      _2_8 = -1;
      _2_9 = -1;
      _2_10 = -1;
      _2_11 = -1;
      _2_12 = -1;
      _2_13 = -1;
      _2_14 = -1;
      _2_15 = -1;
      _2_16 = -1;
      _2_17 = -1;
      _2_18 = -1;
      _2_19 = -1;
   end;
   else if _dm24 = 'REPETITIVE MOTION'  then do;
      _2_15 = 1;
   end;
   else if _dm24 = 'CAUGHT IN MACHINE'  then do;
      _2_2 = 1;
   end;
   else if _dm24 = 'PUSHING/PULLING'  then do;
      _2_14 = 1;
   end;
   else if _dm24 = 'FOREIGN BODY/OBJECT'  then do;
      _2_9 = 1;
   end;
   else if _dm24 = 'EQUIPMENT/MACHINERY'  then do;
      _2_6 = 1;
   end;
   else if _dm24 = 'FIRE'  then do;
      _2_8 = 1;
   end;
   else if _dm24 = 'CONTACT WITH OBJECT'  then do;
      _2_3 = 1;
   end;
   else if _dm24 = 'UNKNOWN'  then do;
      _2_19 = 1;
   end;
   else if _dm24 = 'ANIMAL ATTACK'  then do;
      _2_0 = 1;
   end;
   else if _dm24 = 'EXPOSURE'  then do;
      _2_7 = 1;
   end;
   else if _dm24 = 'OCCUPATIONAL ILLNESS'  then do;
      _2_13 = 1;
   end;
   else if _dm24 = 'HUMAN CONFLICT'  then do;
      _2_10 = 1;
   end;
   else if _dm24 = 'STRESS'  then do;
      _2_17 = 1;
   end;
   else if _dm24 = 'BITING/STINGING INSECT'  then do;
      _2_1 = 1;
   end;
   else if _dm24 = 'ENVIRONMENTAL'  then do;
      _2_5 = 1;
   end;
   else if _dm24 = 'ELECTROCUTION'  then do;
      _2_4 = 1;
   end;
   else do;
      _2_0 = .;
      _2_1 = .;
      _2_2 = .;
      _2_3 = .;
      _2_4 = .;
      _2_5 = .;
      _2_6 = .;
      _2_7 = .;
      _2_8 = .;
      _2_9 = .;
      _2_10 = .;
      _2_11 = .;
      _2_12 = .;
      _2_13 = .;
      _2_14 = .;
      _2_15 = .;
      _2_16 = .;
      _2_17 = .;
      _2_18 = .;
      _2_19 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Nature ;
drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 _3_9 _3_10 _3_11 _3_12 _3_13
         _3_14 _3_15 ;
*** encoding is sparse, initialize to zero;
_3_0 = 0;
_3_1 = 0;
_3_2 = 0;
_3_3 = 0;
_3_4 = 0;
_3_5 = 0;
_3_6 = 0;
_3_7 = 0;
_3_8 = 0;
_3_9 = 0;
_3_10 = 0;
_3_11 = 0;
_3_12 = 0;
_3_13 = 0;
_3_14 = 0;
_3_15 = 0;
if missing( Nature ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   _3_3 = .;
   _3_4 = .;
   _3_5 = .;
   _3_6 = .;
   _3_7 = .;
   _3_8 = .;
   _3_9 = .;
   _3_10 = .;
   _3_11 = .;
   _3_12 = .;
   _3_13 = .;
   _3_14 = .;
   _3_15 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm24 $ 24; drop _dm24 ;
   %DMNORMCP( Nature , _dm24 )
   if _dm24 = 'SPRAIN/STRAIN'  then do;
      _3_15 = 1;
   end;
   else if _dm24 = 'CONTUSION'  then do;
      _3_5 = 1;
   end;
   else if _dm24 = 'LACERATION'  then do;
      _3_9 = 1;
   end;
   else if _dm24 = 'FRACTURE'  then do;
      _3_7 = 1;
   end;
   else if _dm24 = 'REPETITIVE MOTION'  then do;
      _3_14 = 1;
   end;
   else if _dm24 = 'ABRASION'  then do;
      _3_0 = 1;
   end;
   else if _dm24 = 'BURN'  then do;
      _3_4 = 1;
   end;
   else if _dm24 = 'ANIMAL/INSECT BITE'  then do;
      _3_2 = 1;
   end;
   else if _dm24 = 'INFECTION/DISEASE'  then do;
      _3_8 = 1;
   end;
   else if _dm24 = 'MULTIPLE'  then do;
      _3_11 = 1;
   end;
   else if _dm24 = 'PUNCTURE'  then do;
      _3_13 = 1;
   end;
   else if _dm24 = 'MENTAL HEALTH'  then do;
      _3_10 = 1;
   end;
   else if _dm24 = 'POISONING'  then do;
      _3_12 = 1;
   end;
   else if _dm24 = 'AMPUTATION'  then do;
      _3_1 = 1;
   end;
   else if _dm24 = 'BITE'  then do;
      _3_3 = 1;
   end;
   else if _dm24 = 'UNKNOWN'  then do;
      _3_0 = -1;
      _3_1 = -1;
      _3_2 = -1;
      _3_3 = -1;
      _3_4 = -1;
      _3_5 = -1;
      _3_6 = -1;
      _3_7 = -1;
      _3_8 = -1;
      _3_9 = -1;
      _3_10 = -1;
      _3_11 = -1;
      _3_12 = -1;
      _3_13 = -1;
      _3_14 = -1;
      _3_15 = -1;
   end;
   else if _dm24 = 'DEATH'  then do;
      _3_6 = 1;
   end;
   else do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      _3_3 = .;
      _3_4 = .;
      _3_5 = .;
      _3_6 = .;
      _3_7 = .;
      _3_8 = .;
      _3_9 = .;
      _3_10 = .;
      _3_11 = .;
      _3_12 = .;
      _3_13 = .;
      _3_14 = .;
      _3_15 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.3735177866;
   _P1 = 0.6264822134;
   goto REG4DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: Body ;
_TEMP = 1;
_LP0 = _LP0 + (     9.4402886070573) * _TEMP * _1_0;
_LP0 = _LP0 + (   -0.78454774757566) * _TEMP * _1_1;
_LP0 = _LP0 + (   -0.12625064401588) * _TEMP * _1_2;
_LP0 = _LP0 + (   -0.13403989185461) * _TEMP * _1_3;
_LP0 = _LP0 + (   -11.6782250222773) * _TEMP * _1_4;
_LP0 = _LP0 + (   -0.35253511653874) * _TEMP * _1_5;
_LP0 = _LP0 + (   -0.95767179178952) * _TEMP * _1_6;
_LP0 = _LP0 + (   -0.53444248268208) * _TEMP * _1_7;
_LP0 = _LP0 + (   -0.63516858354357) * _TEMP * _1_8;
_LP0 = _LP0 + (    0.11757547123217) * _TEMP * _1_9;
_LP0 = _LP0 + (    0.56751488138338) * _TEMP * _1_10;
_LP0 = _LP0 + (    -0.0288873399312) * _TEMP * _1_11;
_LP0 = _LP0 + (    -0.0414236146049) * _TEMP * _1_12;
_LP0 = _LP0 + (     0.2054859468528) * _TEMP * _1_13;
_LP0 = _LP0 + (   -0.93233460206072) * _TEMP * _1_14;
_LP0 = _LP0 + (   -0.36356944028373) * _TEMP * _1_15;
_LP0 = _LP0 + (    0.38797236330236) * _TEMP * _1_16;
_LP0 = _LP0 + (     0.6477137044342) * _TEMP * _1_17;
_LP0 = _LP0 + (    1.65637881190212) * _TEMP * _1_18;
_LP0 = _LP0 + (    0.29811294140338) * _TEMP * _1_19;
_LP0 = _LP0 + (    1.71421699069281) * _TEMP * _1_20;
_LP0 = _LP0 + (    0.76515229705455) * _TEMP * _1_21;
_LP0 = _LP0 + (     -0.269231392108) * _TEMP * _1_22;
_LP0 = _LP0 + (   -1.16747291783978) * _TEMP * _1_23;
_LP0 = _LP0 + (      0.237284835542) * _TEMP * _1_24;
_LP0 = _LP0 + (    2.90695456724623) * _TEMP * _1_25;

***  Effect: Cause ;
_TEMP = 1;
_LP0 = _LP0 + (    1.51707590103074) * _TEMP * _2_0;
_LP0 = _LP0 + (    13.2878639029665) * _TEMP * _2_1;
_LP0 = _LP0 + (   -0.39814320662548) * _TEMP * _2_2;
_LP0 = _LP0 + (   -8.76448847302961) * _TEMP * _2_3;
_LP0 = _LP0 + (    -7.5946819876267) * _TEMP * _2_4;
_LP0 = _LP0 + (   -3.52957252284574) * _TEMP * _2_5;
_LP0 = _LP0 + (    0.09060730142592) * _TEMP * _2_6;
_LP0 = _LP0 + (    7.35709343793498) * _TEMP * _2_7;
_LP0 = _LP0 + (   -7.59406798170964) * _TEMP * _2_8;
_LP0 = _LP0 + (    0.63240985585061) * _TEMP * _2_9;
_LP0 = _LP0 + (    1.51744734177818) * _TEMP * _2_10;
_LP0 = _LP0 + (   -0.05053736476608) * _TEMP * _2_11;
_LP0 = _LP0 + (    3.14825891263852) * _TEMP * _2_12;
_LP0 = _LP0 + (    9.57251732045281) * _TEMP * _2_13;
_LP0 = _LP0 + (    -0.3798398724016) * _TEMP * _2_14;
_LP0 = _LP0 + (    0.27631669464722) * _TEMP * _2_15;
_LP0 = _LP0 + (    0.76345389676305) * _TEMP * _2_16;
_LP0 = _LP0 + (   -10.5422493161334) * _TEMP * _2_17;
_LP0 = _LP0 + (    0.71642962079155) * _TEMP * _2_18;
_LP0 = _LP0 + (   -0.48411832792945) * _TEMP * _2_19;

***  Effect: Nature ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.65437126579452) * _TEMP * _3_0;
_LP0 = _LP0 + (    1.19142182324007) * _TEMP * _3_1;
_LP0 = _LP0 + (   -12.1933118114275) * _TEMP * _3_2;
_LP0 = _LP0 + (   -12.0718614918381) * _TEMP * _3_3;
_LP0 = _LP0 + (    8.66182303722026) * _TEMP * _3_4;
_LP0 = _LP0 + (   -0.24186081577862) * _TEMP * _3_5;
_LP0 = _LP0 + (     11.913541513509) * _TEMP * _3_6;
_LP0 = _LP0 + (    -0.4146888167778) * _TEMP * _3_7;
_LP0 = _LP0 + (    -8.6853615016552) * _TEMP * _3_8;
_LP0 = _LP0 + (   -1.09698729316228) * _TEMP * _3_9;
_LP0 = _LP0 + (    10.4851225117667) * _TEMP * _3_10;
_LP0 = _LP0 + (    0.92160066914731) * _TEMP * _3_11;
_LP0 = _LP0 + (    -7.7018141123269) * _TEMP * _3_12;
_LP0 = _LP0 + (   -1.39274827620788) * _TEMP * _3_13;
_LP0 = _LP0 + (    0.27513103752868) * _TEMP * _3_14;
_LP0 = _LP0 + (                   0) * _TEMP * _3_15;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =    -0.99597066288764 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

REG4DR1:

*** Residuals;
if (_Y = .) then do;
   R_SubroFlag1 = .;
   R_SubroFlag0 = .;
end;
else do;
    label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
    label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
   R_SubroFlag1 = - _P0;
   R_SubroFlag0 = - _P1;
   select( _Y );
      when (0)  R_SubroFlag1 = R_SubroFlag1 + 1;
      when (1)  R_SubroFlag0 = R_SubroFlag0 + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
P_SubroFlag1 = _P0;
_MAXP = _P0;
_IY = 1;
P_SubroFlag0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I_SubroFlag = REG4DRF[_IY];
U_SubroFlag = REG4DRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;

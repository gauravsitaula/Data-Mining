MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:34:30" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 27, 2017
Time:                12:34:30
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0EP3J1R "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0EP3J1R new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:34:30" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70125477";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:34:30" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
51814      proc freq data=EMWS1.TextCluster4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.TextCluster4_VariableSet noprint;
51815      table ROLE*LEVEL/out=WORK.TextCluster4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TextCluster4META;
51816      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.TEXTCLUSTER4_VARIABLESET.
NOTE: The data set WORK.TEXTCLUSTER4META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
      

51817      proc print data=WORK.TextCluster4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TextCluster4META label noobs;
51818      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
51819      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
51820      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
51821      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
51822      run;

NOTE: There were 2 observations read from the data set WORK.TEXTCLUSTER4META.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

51823      title10;
MPRINT(EM_DIAGRAM):   title10;
51824      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster4: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.TextFilter_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52149      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
52150      * TextCluster4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * TextCluster4: Generation of macros and macro variables;
52151      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
52152      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

52153      %let EMEXCEPTIONSTRING=;
52154      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
52155      * TRAIN: TextCluster4;
MPRINT(EM_DIAGRAM):   * TRAIN: TextCluster4;
52156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52157      %let EM_ACTION = TRAIN;
52158      %let syscc = 0;
52159      %macro main();
52160      
52161         %if %upcase(&EM_ACTION) eq CREATE %then %do;
52162            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
52163            %include temp;
52164            %create();
52165         %end;
52166         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
52167            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
52168            %include temp;
52169            %train();
52170         %end;
52171         %if %upcase(&EM_ACTION) eq REPORT %then %do;
52172            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
52173            %include temp;
52174            %report();
52175         %end;
52176         %if %upcase(&EM_ACTION) eq SCORE %then %do;
52177            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
52178            %include temp;
52179            %score();
52180         %end;
52181      %mend main;
52182      
52183      %main();
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_TRAIN.SOURCE.
52184     +%macro train();
52185     +
52186     +    %global last_parse_node last_filter_node last_prescore_node server_err
52187     +      parsevar EM_SASMSG;
52188     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
52189     +    %let EM_SASMSG=TMINE;
52190     +    %let syscc=0;
52191     +
52192     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
52193     +    %include temp;
52194     +    filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
52195     +    %include temp;
52196     +    filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
52197     +    %include temp;
52198     +    filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
52199     +    %include temp;
52200     +    filename temp;
52201     +
52202     +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
52203     +                        em_variableset=&em_data_variableset);
52204     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_train;
52205     +    %let lastparsenode=&last_parse_node;
52206     +    %let lastfilternode=&last_filter_node;
52207     +    %let lastprescore=&last_prescore_node;
52208     +    %if &lastfilternode=&lastparsenode %then %do;
52209     +        %let EMEXCEPTIONSTRING = EMTOOL.NOFILTERNODE;
52210     +        %goto end_cluster_train;
52211     +    %end;
52212     +
52213     +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
52214     +    %em_getname(key=last_tm_nodes, type=data);
52215     +    data &em_user_last_tm_nodes;
52216     +        set &EM_IMPORT_DATA_EMINFO;
52217     +    run;
52218     +
52219     +
52220     +    %em_getname(key=tmconfig, type=data);
52221     +    %em_getname(key=terms, type=data);
52222     +    %em_getname(key=docs, type=data);
52223     +    %em_getname(key=clusters, type=data);
52224     +    %em_getname(key=graph_table, type=data);
52225     +    %em_getname(key=svd_u, type=data);
52226     +    %em_getname(key=tmconfig, type=data);
52227     +    %em_getname(key=svd_s, type=data);
52228     +    %em_getname(key=emoutstat, type=data);
52229     +    %em_getname(key=hierds, type=data);
52230     +
52231     +
52232     +
52233     +    /* get target variable info */
52234     +    %let targetvar = ;
52235     +    data _null_;
52236     +       set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
52237     +                                       and LEVEL ne 'INTERVAL'));
52238     +       if _N_=1 then call symput('targetvar', strip(NAME));
52239     +    run;
52240     +
52241     +
52242     +
52243     +    /* set up terms strings and initial config table */
52244     +    proc sql noprint;
52245     +      create table &EM_USER_tmconfig as
52246     +         select *
52247     +         from &EM_LIB..&last_filter_node._tmconfig;
52248     +    quit;
52249     +
52250     +
52251     +    proc sql noprint;
52252     +       select  cellwgt into: _cellweight
52253     +       from &em_user_tmconfig;
52254     +       select termwgt into: _termwgt
52255     +       from &em_user_tmconfig;
52256     +    quit;
52257     +
52258     +    data _keepdocs (keep=_DOCUMENT_ %if &targetvar ne %then &targetvar; );
52259     +        set &EM_IMPORT_DATA;
52260     +    run;
52261     +
52262     +    %tm_apply_tmutil(data=&EM_LIB..&last_filter_node._tmout,
52263     +                       terms=&EM_LIB..&last_filter_node._terms,
52264     +                       docs=&EM_IMPORT_DATA,
52265     +                       keepdocs=_keepdocs,
52266     +                       reduceF=2,
52267     +                       termweight=&_termwgt,
52268     +                       cellweight=&_cellweight,
52269     +                       outdata=_outtmutil_,
52270     +                       outterms=_newkey,
52271     +                       outweights=_weights,
52272     +                       targetvar=&targetvar,
52273     +                       memloc=_tmmem);
52274     +
52275     +                       /* get the svd dimensions on the documents */
52276     +    %tm_svd_do_samp(data=_outtmutil_,docs=_keepdocs, maxK=&em_property_maxK, res=&em_property_resolution,cellwgt=&_cellweight,in_global=_weights,
52277     +                     rowVar=_termnum_,colVar=_document_,entryVar=_count_,u=&EM_USER_SVD_U,v=_svdv,s=&EM_USER_svd_S,
52278     +                     colpro=_svdcolpro,rowpro=_svdrowpro, normcol=normcol, normrow=normrow,prefix=&EM_NODEID);
52279     +
52280     +    %if(&syscc >4 ) %then %do;
52281     +        %goto end_cluster_train;
52282     +    %end;
52283     +
52284     +    proc sql noprint;
52285     +       create table &EM_USER_TERMS(drop=index) as
52286     +       select a.*,b.*
52287     +       from &EM_LIB..&last_filter_node._terms a left join _svdrowpro b
52288     +       on a.key = b.index;
52289     +    quit;
52290     +
52291     +    %tm_cluster(data=&EM_LIB..&last_filter_node._tmout,
52292     +        terms=&EM_LIB..&last_filter_node._terms,
52293     +        docs=&EM_IMPORT_DATA,
52294     +        svdColPro=_svdcolpro,
52295     +        maxNumTerms=&em_property_ndescterms,
52296     +        numClus=&em_property_nclusters,
52297     +        numType=&em_property_exactormaximum,
52298     +        algorithm=&em_property_algorithm,
52299     +        outdocs=&EM_USER_DOCS,
52300     +        outclusters=&EM_USER_CLUSTERS,
52301     +        hierds=&EM_USER_HIERDS,
52302     +        emoutstat=&EM_USER_emoutstat,
52303     +        prefixstring= &EM_NODEID);
52304     +
52305     +    %if &emexceptionstring ne %then %goto end_cluster_train;
52306     +
52307     +    %if &em_property_algorithm=2.0 %then %do;
52308     +
52309     +        data &em_user_hierds(drop=plus);
52310     +            set &em_user_hierds;
52311     +            plus='';
52312     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
52313     +            graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
52314     +        run;
52315     +    %end;
52316     +
52317     +
52318     +    * add the info to EMINFO to forward on to other nodes ;
52319     +   data &EM_DATA_EMINFO;
52320     +      length TARGET KEY $32 DATA $43;
52321     +
52322     +      key="LastTMNode";
52323     +      data="&EM_NODEID";
52324     +      output;
52325     +
52326     +      key="LastTMNodeType";
52327     +      data="TextCluster";
52328     +      output;
52329     +
52330     +      key="LastTextCluster";
52331     +      data="&EM_NODEID";
52332     +      output;
52333     +
52334     +      key="PRESCORECODE";
52335     +      data="&EM_NODEID";
52336     +      output;
52337     +   run;
52338     +
52339     +    proc sql noprint;
52340     +        select count(*) into :svdkeep
52341     +            from &em_user_svd_s
52342     +            where keep=1;
52343     +        select count(*) into :cluscnt
52344     +            from &em_user_clusters;
52345     +    quit;
52346     +   data &EM_USER_tmconfig;
52347     +         set &EM_USER_TMCONFIG;
52348     +         clus_alg = "&em_property_algorithm";
52349     +         maxsvd = &em_property_maxk;
52350     +         svdkeep=&svdkeep;
52351     +         last_prescore = "&last_prescore_node";
52352     +      run;
52353     +
52354     +    %em_metachange(name=&EM_NODEID._CLUSTER_, role=SEGMENT, level=NOMINAL);
52355     +    %do i=1 %to &svdkeep;
52356     +         %em_metachange(name=&EM_NODEID._SVD&i, role=INPUT, level=INTERVAL);
52357     +    %end;
52358     +    %do i=1 %to &cluscnt;
52359     +         %em_metachange(name=&EM_NODEID._PROB&i, role=REJECTED);
52360     +    %end;
52361     +
52362     +%end_cluster_train:
52363     +    filename temp;
52364     +    %if &tm_debug =0 %then %do;
52365     +        proc sql noprint;
52366     +              drop table _svdcolpro;
52367     +              drop table _svdrowpro;
52368     +              drop table _newkey ;
52369     +              drop table _keepdocs ;
52370     +        quit;
52371     +    %end;
52372     +
52373     +%mend train;
52374     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
52375     +/* ****************************************************************
52376     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
52377     + *
52378     + * Name:             tm_get_last_filter.sas
52379     + * Product:          SAS Text Miner
52380     + * Language:         Sas
52381     + * Script:
52382     + *
52383     + * Usage:
52384     + *
52385     + * Purpose:  macro to get the last filter node and the last parse node in the
52386     + *   diagram that corresponds to the current parse variable.  If there is no filter
52387     + *   node, the filter node is set to the last parse node.
52388     + *
52389     + *
52390     + *
52391     + * History:
52392     + * 14Aug09 Initial Coding
52393     + *
52394     + * Notes:
52395     + *    Returns an error in the following cases:
52396     + *      1. There is no preceding parse node.
52397     + *      2. There is no parse node with the current parse variable.
52398     + *
52399     + * Last Modified By:
52400     + * Last Modified On: Wed Sep 23 15:35:04 2009
52401     + *
52402     + * End
52403     + * ************************************************************** */
52404     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
52405     +   %let last_parse_node=;
52406     +   %let last_filter_node=;
52407     +   %let last_prescore_node=;
52408     +   %let server_err=;
52409     +   %let EMEXCEPTIONSTRING=;
52410     +   %let syscc=0;
52411     +
52412     +    /* verify that setinit for SAS Text Miner is currently active */
52413     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
52414     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
52415     +        %goto end_macro;
52416     +        %end;
52417     +
52418     +
52419     +    * find last filter or text parse node if no filter node. ;
52420     +   %if %sysfunc(exist(&eminfo)) %then %do;
52421     +      proc sql noprint;
52422     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
52423     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
52424     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
52425     +      quit;
52426     +
52427     +   %end;
52428     +
52429     +   %if &last_parse_node= %then %do;
52430     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
52431     +      %goto end_macro;
52432     +      %end;
52433     +
52434     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
52435     +   %else %let last_filter_node = %ktrim(&last_filter_node);
52436     +   %let last_parse_node = %ktrim(&last_parse_node);
52437     +
52438     +   * Check to make sure parse variable is present and still exists;
52439     +   %let parsevar = ;
52440     +   proc sql noprint;
52441     +    select parsevar into :parsevar
52442     +    from &em_lib..&last_filter_node._tmconfig;
52443     +    quit;
52444     +
52445     +    *check for dropped parsevar on input dataset;
52446     +       %let parsevarOK= ;
52447     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
52448     +       data _null_;
52449     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
52450     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
52451     +         run;
52452     +       %if(&parsevarOK eq ) %then %do;
52453     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
52454     +          %goto end_macro;
52455     +          %end;
52456     +%end_macro:
52457     +
52458     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_CLUSTER.SOURCE.
52460     +   /* ****************************************************************
52461     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
52462     + *
52463     + * Name:             tm_cluster.sas
52464     + * Support:          rualbr Russell Albright
52465     + * Product:
52466     + * Language:         Sas
52467     + * Script:
52468     + *
52469     + * Usage:
52471     + !Inputs into %tm_train_cluster
52472     + * doc = doc datset from a tm node
52473     + * data =  out datset from a tm node
52474     + * terms = terms dataset from  tm node
52475     + * svdcolpro = column projections data set
52476     + * cellweight setting
52477     + * termweight setting
52478     + * maxSvddim = Maximum number of dimension to calculate
52479     + * svdres= <HIGH, MED, or LOW>
52480     + * maxNumTerms - maximum number of term to use for descriptive terms
52481     + * numClus = number of clusters to use
52482     + * numType=<MAXIMUM or EXACT> Max means that <= maximum will actually be used.
52483     + * threads = the number of threads you would like emclus to use
52486     + !Outputs from %tm_train_cluster
52487     + * outdocs - a doc table with the cluster restults on it.
52488     + * outclusters- an output cluster table with the descriptive terms on it (future story)
52489     + *
52490     + * Example call
52491     + *
52492     + *%tm_cluster(data=tmn.text_out_t,
52493     + *             terms=tmn.terms,
52494     + *             docs=testdata._train,
52495     + *             svdcolpro=tmn._svdcolpro,
52496     + *             maxNumTerms=5,
52497     + *             numClus=40,
52498     + *             numType=MAXIMUM,
52499     + *             outdocs=docsresult,
52500     + *             hierds=_hierds,
52501     + *             emoutstat=_emoutstat,
52502     + *             outclusters= clusterResult);
52503     + *
52504     + *
52505     + * Purpose: Perform the clustering on out,term, doc from parse or filter node
52506     + *
52507     + * History:
52508     + *
52509     + *
52510     + * Notes:
52511     + *
52512     + * Last Modified By:
52513     + * Last Modified On: Thu Jan 08 17:22:43 2009
52514     + *
52515     + * End
52516     + * ************************************************************** */
52518     +%macro tm_cluster(data=,
52519     +                     terms=,
52520     +                     docs=,
52521     +                     svdColPro=,
52522     +                     maxNumTerms=,
52523     +                     numClus=,
52524     +                     numType=MAXIMUM,
52525     +                     algorithm=,
52526     +                     outdocs=,
52527     +                     hierds=_hierds,
52528     +                     emoutstat=_emoutstat,
52529     +                     outclusters=,
52530     +                     prefixString=,
52531     +                     threads=);
52534     +    %local _cleanedout ;
52535     +    %local _numRepDocs;
52536     +    %global systmutil;
52537     +    %let systmutil = ;
52538     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
52540     +    filename temp catalog 'sashelp.emtext.tmgetncl.source';
52541     +    %include temp;
52542     +    filename temp catalog 'sashelp.emtext.tmfast.source';
52543     +    %include temp;
52545     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
52546     +    %include temp;
52548     +    filename temp catalog 'sashelp.emtext.tmpred.source';
52549     +    %include temp;
52551     +    filename temp catalog 'sashelp.emtext.tmsort.source';
52552     +    %include temp;
52554     +    %let tmdata=&data;
52555     +    %let tmterms=&terms;
52556     +    %let tmdocs=&docs;
52557     +    %let emexceptionstring=;
52560     +    /* check some basic size requirements to proceed.*/
52561     +    proc sql noprint;
52562     +       select count(*) into: numTerms
52563     +       from &terms a
52564     +       where a.numdocs>=2 and _ispar in('+',' ')
52565     +       ;
52566     +       select count (*) into: numdocs
52567     +       from &docs a;
52568     +    quit;
52570     +    %if (&numterms < 10)  OR (&numdocs< 8) %then %do;
52571     +        %let emexceptionstring=EMTOOL.INSUFFICIENTDATA;
52572     +        %goto end_train_cluster;
52573     +    %end;
52575     +    /* Get number of kept svd variables */
52576     +    %let pid = %sysfunc(open(&svdcolpro));
52577     +    %let svdkeep=%eval(%sysfunc(attrn(&pid,nvars))-1);
52578     +    %let rc = %sysfunc(close(&pid));
52581     +   /************************ Find clusters *************************************/
52583     +   %if %upcase(&numType) = MAXIMUM %then %do;   /* numClus = MAXIMUM */
52585     +      /* Call tmgetncl to find the recommended number of clusters. */
52587     +      %tmGetNcl(data=&svdcolpro,
52588     +               maxclusters=&numClus,
52589     +               vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
52590     +               tempDS=_clusTemp1,
52591     +               clusDS=_clusTemp,
52592     +               threads=
52593     +            );
52595     +      /* error returned in above macro */
52596     +      %if (&syscc >4 ) %then %do;
52597     +         %let emexceptionstring= &SYSERRORTEXT;
52598     +         %goto end_train_cluster;
52599     +      %end;
52601     +      /* Store the recommended number into a macro variable. */
52603     +      proc sql noprint;
52604     +         select max(nclus) into: numClus
52605     +         from _clusTemp
52606     +         ;
52607     +      quit;
52610     +      %if not (&numClus > 1) %then %do;
52611     +        %let numClus = 2;
52612     +      %end;
52615     +       %if &tm_debug =0  %then %do;
52616     +          proc sql nowarn noprint;
52617     +              drop table _clustemp;
52618     +              drop table _clustemp1;
52619     +           quit;
52620     +       %end;
52622     +   %end;  /* &numtype = MAXIMUM */
52624     +   %else  %do;
52625     +       %let numClus = %left(&numClus);/*&numtype=EXACT*/
52626     +   %end;
52628     +    proc sql noprint;
52629     +        select count(*) into: nobs
52630     +        from &svdcolpro;
52631     +    quit;
52633     +   %if %left(&algorithm)=2.0 %then %do; /* Hierarchical clustering */
52634     +        filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
52635     +        %include temp;
52637     +        filename temp catalog 'sashelp.emtext.tmhclus.source';
52638     +        %include temp;
52639     +        filename temp catalog 'sashelp.emtext.tmtree.source';
52640     +        %include temp;
52642     +        %if &nobs < &numClus and  %upcase(&numType) = EXACT %then %do;
52643     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
52644     +            %goto end_train_cluster;
52645     +        %end;
52647     +        %tmgethclus(outtree=_outtree,
52648     +                    idvar=index,
52649     +                    inDS=&svdcolpro,
52650     +                    outDS=&outdocs,
52651     +                    fastOut=_fastclusstat,
52652     +                    textClusDS=_clusstat,
52653     +                    vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
52654     +                    nobs=&nobs,
52655     +                    nclus=&numClus,
52656     +                    hierds=&hierds,
52657     +                    svdkeep=&svdkeep,
52658     +                    prefix=&prefixString);
52659     +        %if &EMEXCEPTIONSTRING ne %then %goto end_train_cluster;
52661     +        data _clusstat;
52662     +            set _clusstat(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep.=_mean1-_mean&svdkeep.));
52663     +        run;
52665     +        data _clustermean;
52666     +          set _clusstat(keep=_cluster_ _mean1-_mean&svdkeep. rename=(_cluster_=cluster));
52667     +        run;
52669     +        proc sql noprint;
52670     +            drop table _outtree;
52671     +        quit;
52672     +   %end;
52673     +   %else %do; /* Expectation-maximization */
52674     +       /* Call %anl_tmfast to create cluster stat data set that will be used as an input for %anl_tmemclus. */
52675     +          %tmFast(data=&svdcolpro,
52676     +             clusters=&numClus,
52677     +             outstat=_fastclusstat,
52678     +             outseed=,
52679     +                id=,
52680     +             out=,
52681     +             vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep)
52682     +             );
52683     +          run;
52685     +          /* If some of the clusters are too small (frequency less than 5) and &g_numClusFlag=MAXIMUM, */
52686     +          /* reassign value for &cluster macro var from WORK.&s_reportID._fastclusstat data set. */
52688     +       %if %upcase(&numType) = MAXIMUM %then
52689     +       %do;   /* &ClusType = MAXIMUM */
52691     +          proc sql noprint;
52692     +             select max(CLUSTER) into :numClus
52693     +             from _fastclusstat
52694     +             where upcase(_TYPE_)='SEED'
52695     +             ;
52696     +          quit;
52698     +          %let numClus = %left(&numClus);
52700     +       %end;  /* &ClusType = MAXIMUM */
52701     +       %else %do; /* &ClusType = EXACT */
52702     +          %if &nobs < &numClus %then %do;
52703     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
52704     +            %goto end_train_cluster;
52705     +          %end;
52706     +       %end;
52708     +       %tmEMClus(data=&svdcolpro,
52709     +                role=TRAIN,
52710     +                clusters=&numClus,
52711     +                seed=_fastclusstat,
52712     +                outstat=&emoutstat,
52713     +                out=_tmutildoc,
52714     +                vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
52715     +                cov=,
52716     +                iter=5,
52717     +                secclus=,
52718     +                seciter=,
52719     +                min=,
52720     +                method=,
52721     +                eps=.1,
52722     +                init=FASTCLUS,
52723     +                print=NONE,
52724     +                p=,
52725     +                outliers=,
52726     +                decvar=0,
52727     +                initstd=,
52728     +                dist=,
52729     +                secstd=,
52730     +                nobs=,
52731     +                threads=&threads.
52732     +             );
52733     +       run;
52736     +       /* Run %anl_tmpred macro to assign documents to clusters with the largest posterior probability */
52737     +       /* and to calculate cluster frequency. */
52739     +       %tmPred (inds=_tmutildoc,
52740     +                outds=&outdocs,
52741     +              clusters=&numClus,
52742     +              type=max,
52743     +              freqds=_clusstat,
52744     +              compress=1
52745     +              );
52746     +        data &outdocs;
52747     +           set &outdocs;
52748     +           rename prob1-prob&numClus = &prefixString._prob1-&prefixString._prob&numclus;
52749     +        run;
52753     +       /* Transpose the output data set to contain cluster ID and cluster frequency. */
52755     +        data _clusstat;
52756     +            array c(&numClus) _c1-_c&numClus;
52757     +            set _clusstat;
52758     +            /*keep _CLUSTER_ Freq;*/
52759     +            totalobs=0;
52760     +            do _CLUSTER_ = 1 to &numClus;
52761     +                Freq = c(_CLUSTER_);
52762     +                totalobs=totalobs+c(_CLUSTER_);
52763     +                output;
52764     +            end;
52765     +            call symput ('totNumDocs', totalobs);
52766     +        run;
52768     +       %if &totNumDocs = 0 %then
52769     +       %do;   /*&totNumDocs = 0 */
52770     +           goto end_train_cluster;
52771     +       %end; /*&totNumDocs = 0 */
52773     +       /* Calculate cluster percentage. */
52774     +       data _clusstat;
52775     +          set _clusstat;
52776     +          Percent = Freq/&totNumDocs;
52777     +       run;
52779     +       data _clustermean(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep. = _mean1-_mean&svdkeep.));
52780     +          set &emoutstat(keep=cluster _TYPE_ &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.);
52781     +          if _TYPE_ = "MEAN";
52782     +            keep cluster &prefixstring._SVD1 - &prefixstring._SVD&svdkeep. ;
52783     +      run;
52784     +  %end;
52786     +      proc sql;
52787     +      create table _meandocs(drop=cluster) as
52788     +      select a.*, b.*
52789     +      from &outdocs a left join _clustermean b
52790     +      on a._cluster_=b.cluster
52791     +      ;
52792     +      quit;
52793     +       /*calulate residual for each doc */
52794     +      data _rmscalc;
52795     +          merge _meandocs(in=inhere) _clusstat;
52796     +          array _means(&svdkeep) _mean1-_mean&svdkeep.;
52797     +          array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
52798     +          by _cluster_;
52799     +          error=0;
52800     +          do i = 1 to &svdkeep;
52801     +             error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
52802     +          end;
52803     +         /*error=sqrt(error);*/
52804     +          drop i;
52805     +       run;
52806     +    /*calc standardized residual for clusters*/
52807     +       proc summary data=_rmscalc nway;
52808     +          class _cluster_;
52809     +          var error;
52810     +          output out=_meanerr mean=meane sum=sume;
52811     +       run;
52813     +       data _rmsse;
52814     +          set _meanerr;
52815     +          /* original code divides by number of svd dims*/
52816     +          if _freq_ gt 1 then do;
52817     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
52818     +          end;
52819     +          else do;
52820     +              _rmsstd_=0;
52821     +          end;
52822     +          keep _cluster_  _rmsstd_;
52823     +       run;
52826     +       proc sql;
52827     +           create table _clusstat2(drop=cluster) as
52828     +           select a.*,b.*
52829     +           from _clustermean a left join _rmsse b
52830     +           on a.cluster=b._cluster_;
52832     +           create table &outclusters as
52833     +           select  a.*, b.freq, b.percent
52834     +           from _clusstat2(keep=_cluster_ %str(_mean1-_mean&svdkeep) _rmsstd_) a right join _clusstat b
52835     +           on a._cluster_=b._cluster_
52836     +           where b.freq>0 ;
52837     +       quit;
52840     +    filename temp catalog 'sashelp.emtext.tmterm1.source';
52841     +    %include temp / nosource2;
52843     +   /****************** Find descriptive terms for clusters ***************************/
52846     +   /* Add _term_ variable to WORK._terms data set to prepare it as an
52847     +   /* input to %tmterm1 macro. The variable is added from &EM_LIB..&last_filter_node._terms data set. */
52849     +   proc sort data=&tmterms out=_terms_;
52850     +        by key _ispar;
52851     +   run;
52853     +   data _terms_;
52854     +       set _terms_;
52855     +       by key _ispar;
52856     +       if first.key then
52857     +          output;
52858     +       else;
52859     +   run;
52861     +    /* Concatenate + to terms */
52862     +    data _terms_;
52863     +        set _terms_;
52864     +        if _ispar='+' then
52865     +            Term=_ispar || ' ' || term;
52866     +    run;
52868     +   %tmsort(data=&tmdata,
52869     +         out=_tmout_,
52870     +         by=_termnum_,
52871     +            options=,
52872     +         threads=threads);
52875     +   data _tmout_;
52876     +      merge _tmout_ (in=_A_)
52877     +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
52878     +      by _termnum_;
52879     +      if _A_;
52880     +   run;
52882     +   /* Create _segmnt_ variable in WORK._docs data set to prepare it to be an */
52883     +   /* input to %tmterm1 macro. Set it equal to _cluster_ variable. */
52885     +   %if &algorithm=2.0 %then %do;
52886     +        data _docs_;
52887     +            set &outdocs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
52888     +            _SEGMNT_=_finalcluster_;
52889     +        run;
52890     +        proc sql noprint;
52891     +            select max(_cluster_) into :numclus from &outclusters;
52892     +        quit;
52893     +   %end;
52894     +   %else %do;
52895     +       data _docs_;
52896     +        set &outdocs (rename=(index=_document_) keep=index _cluster_);
52897     +         _SEGMNT_=_cluster_;;
52898     +       run;
52900     +   %end;
52902     +   /* Run %tmterm1 macro to determine descriptive terms for clusters. */
52903     +   %tmterm1(DSN_TPARS=_tmout_,
52904     +        DSN_CLUS=_docs_,
52905     +        DSN_DESC=_desc_,
52906     +        N_DESC_TERMS=&maxnumterms,
52907     +        N_CLUS=&numclus,
52908     +        top_freq=%eval(&maxnumterms*2),
52909     +        key=);
52911     +    /* Add cluster descriptive terms to clusters table. */
52912     +   %tmsort(data=&outclusters,
52913     +         out=&outclusters,
52914     +         by=_cluster_,
52915     +            options=,
52916     +         threads=threads);
52918     +   %tmsort(data=_desc_,
52919     +         out=_desc_,
52920     +         by=_cluster_,
52921     +            options=,
52922     +         threads=threads);
52924     +   data _desc_;
52925     +      merge &outclusters _desc_;
52926     +      by _cluster_;
52927     +   run;
52929     +   %tmsort(data=_desc_,
52930     +         out=&outclusters,
52931     +         by=_cluster_,
52932     +            options=,
52933     +         threads=threads);
52935     +   %if &algorithm=2.0 %then %do;
52937     +        %tmsort(data=&HIERDS,
52938     +         out=&HIERDS,
52939     +         by=_cluster_,
52940     +            options=,
52941     +         threads=threads);
52943     +        data &HIERds;
52944     +            merge &outCLUSTERS &HIERds (keep=_cluster_ parent level in=P);
52945     +            by _cluster_;
52946     +            clust=_cluster_;
52947     +            drop _cluster_;
52948     +            if P;
52949     +        run;
52951     +        %let empty=1;
52953     +        /* Be sure that all parent clusters are on outclusters ds */
52954     +        proc sql noprint;
52955     +            create table &outclusters as
52956     +                select a._cluster_, b.* from &hierds (rename=(clust=_CLUSTER_)) a
52957     +                left join &outclusters b
52958     +                on a._cluster_=b._cluster_;
52959     +        quit;
52961     +        %do %while (&empty);
52962     +            proc sql noprint;
52963     +                update &outclusters set freq=
52964     +                    (select sum(freq) from &HIERDS
52965     +                    where parent=_cluster_), percent=
52966     +                    (select sum(percent) from &HIERDS
52967     +                    where parent=_cluster_)
52968     +                    where freq=. and _cluster_ not in
52969     +                    (select parent from &hierds where freq=.);
52970     +                select count(*) into :empty from &outclusters
52971     +                    where freq=.;
52972     +                update &hierds set freq=(select freq from &outclusters where _cluster_=clust);
52973     +            quit;
52974     +            data &HIERds;
52975     +                merge &OUTCLUSTERS &HIERds (
52976     +                    rename=(clust=_cluster_) keep=clust parent level in=P);
52977     +                by _cluster_;
52978     +                clust=_cluster_;
52979     +                drop _cluster_;
52980     +                if P;
52981     +            run;
52982     +        %end;
52984     +        data &hierds;
52985     +            set &hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
52986     +        run;
52987     +        data &outclusters;
52988     +            set &outclusters;
52989     +            if _rmsstd_ ne .;
52990     +        run;
52992     +        data &outdocs;
52993     +            set &outdocs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
52994     +            label _CLUSTER_=Cluster ID;
52995     +        run;
52997     +    %end;
52999     +   %end_train_cluster:
53001     +       filename temp;
53003     +       %if &tm_debug =0  %then %do;
53004     +          proc sql nowarn noprint;
53005     +              drop table _clusstat;
53006     +              drop table _clusstat2;
53007     +              drop table _fastclusstat;
53008     +              drop table _clustermean;
53009     +              drop table _meandocs;
53010     +              drop table _rmscalc;
53011     +              drop table _rmsse;
53012     +              drop table _meanerr;
53013     +              drop table _tmutildoc;
53014     +              drop table _desc_;
53015     +              drop table _terms_;
53016     +              drop table _docs_;
53017     +              drop table _tmout_;
53018     +           quit;
53019     +       %end;
53022     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_APPLY_TMUTIL.SOURCE.
53024     + /*****************************************************************
53025     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
53026     + *
53027     + * Name:             tm_apply_tmutil.sas
53028     + * Support:          rualbr Russell Albright
53029     + * Product:
53030     + * Language:         Sas
53031     + * Script:
53032     + *
53033     + * Usage:
53034     + *
53035     + * data= out data set from tgparse
53036     + * terms= terms from tgparse
53037     + * offsets=  addoffset data set form tgparse
53038     + * docs=  data set of document id's and potentially target, not required unless target weighting is used.
53039     + * keepdocs= list of docs to keep. This is a subset of the original docs data set. Not required.
53040     + * reduceF=defaults to log(n) if not specified, eliminates terms if not in at least that many docs
53041     + *     use reduceF=1 to retain all terms.
53042     + * termweight= none, entropy, mi,
53043     + * cellweight= none, log, bin,
53044     + * synnum= Input synonym data set of _termnum_, parent ID pairs
53045     + * synchar= Input synonym data set of term,termrole, parent, parentrole. This data set will
53046     + * get converted to synnym format by the macro tm_convert_syns.
53047     + * targetvar= name of variable on doc dataset contining targetvar.
53048     + * outdata= output out dataset with no more children on this dataset
53049     + * outterms= output terms dataset with dup terms eliminated
53050     + * outweights= weight vector for the terms
53051     + * outoffsets= subsetted outtable with childterms replaced with parents
53052     + * applyweight = , indicates if the weight settings are to be applied to the output OUT table. 0 no, 1 yes.
53053     + * memloc= string for tmutil to use to store its memory pointer. Normally the default can just be used.
53054     + * keeponly=Y  If set to Y (default), then only kept terms are output in terms table.
53055     + *
53056     + * Purpose: Massage the out and key from docparse so that they can bes used
53057     + * in data mining applications.
53058     + *
53059     + * History:
53060     + *
53061     + * Notes:
53062     + *
53063     + * Last Modified By:
53064     + * Last Modified On: Tue Mar 05 16:32:57 2013
53065     + *
53066     + * End
53067     + * ************************************************************** */
53070     +%macro tm_apply_tmutil(data=, terms=,docs=,offsets=,keepdocs=,termweight=none,
53071     +                            cellweight=none,reduceF=,outdata=,outterms=,outweights=,
53072     +                            outoffsets=, synnum=,synchar=, targetvar=, applyweight = 0,
53073     +                            memloc=tmutil_loc,keeponly=Y,repOnly=N);
53074     +     %local keepdocs tempF reduceF synnum  terms  paraExist sentExist;
53077     +    %let EMEXCEPTIONSTRING=;
53078     +    %let syscc=0;
53079     +    %let systmutil=0;
53083     +    /* Find terms to drop */
53084     +        %if &keepdocs ne %then %do;
53085     +          proc sql noprint;
53086     +                create view _keepdata as
53087     +                select * from &data where _DOCUMENT_ in
53088     +                (select _DOCUMENT_ from &keepdocs);
53089     +          quit;
53090     +        %end;
53091     +          %else %do;
53093     +             proc sql noprint;
53094     +                 create view _keepdata as
53095     +                 select * from &data;
53096     +             quit;
53098     +           %let keepdocs=&docs;
53099     +        %end;
53102     +    /* set default on reduceF*/
53103     +         %if &reduceF = %then %do;
53104     +            proc sql noprint;
53105     +           select count(*) into :numdocs from &docs;
53106     +        quit;
53107     +        %let tempF = %sysfunc(log10(%eval(&numdocs+1)));
53108     +        %let reduceF= %sysfunc(floor(&tempF));
53109     +         %end;
53112     +    /* find synnum if synchar supplied */
53114     +    %if &synchar ne %then %do;
53115     +            filename temp catalog 'sashelp.emtxtext.tm_convert_syns.source';
53116     +            %include temp;
53117     +            %tm_convert_syns(insyns= &synchar, outsyns=_myOutsyns ,
53118     +                         interms=&terms,
53119     +                          outterms=newterms );
53120     +                %let numsyns=0;
53121     +                proc sql;
53122     +                   select count(*) into: numsyns
53123     +                   from _myOutsyns;
53124     +                quit;
53125     +                %if &numsyns >0 %then %do;
53126     +                   %Let synnum=_myOutsyns;
53127     +                   %let terms=newterms;
53128     +                %end;
53129     +    %end;
53130     +    /* get the out and key in the proper format*/
53131     +    proc tmutil data=_keepdata key= &terms doc=&keepdocs
53132     +        %if &targetvar ne %then target=&targetvar;
53133     +        ;
53134     +        control init memloc="&memloc";
53135     +            %if &synnum ne %then syn syndata=&synnum force;
53136     +         ;
53137     +    run;
53138     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
53139     +    %if &reduceF>1 %then %do;
53140     +           proc tmutil;
53141     +           control memloc="&memloc";
53142     +               select reduceF=&reduceF;
53143     +        run;
53144     +   %end;
53145     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
53147     +     proc tmutil;
53148     +        control memloc="&memloc" release;
53149     +        weight termwgt=&termweight cellwgt=&cellweight;
53150     +            output key=_termstmutil  keyformat=default
53151     +               %if &keeponly eq Y %then keeponly;
53152     +               %if &applyweight  eq 0 %then unweighted ;
53153     +               out=&outdata;
53154     +    run;
53155     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
53157     +    proc sql noprint;
53158     +           create table _distinctterms as
53159     +           select distinct key,term, role, attribute
53160     +           from &terms;
53162     +       create table &outterms as
53163     +       select  b.term, b.role,b.attribute ,a.*
53164     +       from _termstmutil a left join  _distinctterms b
53165     +       on a.key=b.key;
53166     +       ;
53167     +       %if &outweights ne %then %do;
53168     +          create table &outweights as
53169     +          select distinct a.key as index, a.weight as gwgt
53170     +          from &outterms(where=(_ispar in('+',' '))) a inner join
53171     +                         _distinctterms b
53172     +          on a.key =b.key;
53173     +       %end;
53175     +     quit;
53176     +     %if &offsets ne and &outoffsets ne %then %do;
53178     +        %let paraExist=0; %let sentExist=0;
53179     +        data _null_;
53180     +          dsid=open("&offsets");
53181     +          para=varnum(dsid,'_paragraph_');
53182     +          sent=varnum(dsid,'_sentence_');
53183     +          if para ge 1 then call symput('paraExist',1);
53184     +          if sent ge 1 then call symput('sentExist',1);
53185     +          run;
53188     +        proc sql noprint;
53189     +        create table &outoffsets as
53190     +           select  a._document_,
53191     +              %if &paraExist=1 %then a._paragraph_, ;
53192     +              %if &sentExist=1 %then a._sentence_,;
53193     +              a._offset_, a._length_, b.parent_id as _termnum_
53194     +                 from &offsets a, _termstmutil (where=(_ispar ne "+" and keep="Y")) b
53195     +                 where a._termnum_ = b.key;
53196     +              quit;
53197     +       %end;
53201     +     %end_tm_apply_tmutil:
53203     +     %if ^%symexist(tm_debug) %then %let tm_debug=0;
53204     +       %if &tm_debug =0  %then %do;
53205     +          proc sql noprint;
53206     +            drop table _termstmutil;
53207     +            drop table _distinctterms;
53208     +            drop view _keepdata;
53209     +            %if &synchar ne and &synnum ne  %then drop table &synnum; ;
53210     +         quit;
53211     +     %end;
53212     +     %if &syscc >4 and &systmutil > 4 %then %do;
53213     +           %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL,&systmutil;
53214     +           %put emexceptionstring= "&EMEXCEPTIONSTRING";
53215     +           %let syscc=0;
53216     +     %end;
53218     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_SVD_DO_SAMP.SOURCE.
53220     +   /* ****************************************************************
53221     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
53222     + *
53223     + * Name:             tm_svd_do_samp.sas
53224     + * Product:
53225     + * Language:         Sas
53226     + * Script:
53227     + *
53228     + * Usage:
53229     + *
53230     + * data=out dataset containing only repreentative terms
53231     + * maxK= max number of dimensions to use to computer svd
53232     + * res=<high, med, low> guidenceon what number of dims to choose
53233     + * cellwgt= <none, log, binary>
53234     + * in_global= dataset with index, weight variables
53235     + * rowVar= name of the variable representing row(term)
53236     + * colVar= name of the variable representing col
53237     + * entryVar=count for row,col
53238     + * u= name of output u matrix
53239     + * v= name of output v matrix
53240     + * s= name of output s matrix
53241     + * colpro=dataset to hold projections for terms
53242     + * rowpro= datset to hold projections for docs
53243     + * normcol=<normcol> extra option to add to normalize docs
53244     + * normrow=<normrow> extra option to add to normalize terms
53245     + * docs =<document data set of ids that are being analyzed.
53246     +*      docs needs to be input explicit since some docs may have not terms
53247     + *
53248     + * Purpose: macro to run svd and compute projections, first without mpling
53249     + * and then with sampling onon.
53250     + *
53251     + * History:
53252     + *
53253     + * Notes:
53254     + *
53255     + * Last Modified By:
53256     + * Last Modified On: Thu Jan 08 17:22:43 2009
53257     + *
53258     + * End
53259     + * ************************************************************** */
53260     +%macro tm_svd_do_samp(data=,docs=,maxK=,res=,cellwgt=,in_global=,
53261     +                     rowVar=,colVar=,entryVar=,u=,v=,s=,
53262     +                     colpro=,rowpro=,normcol=, normrow=,prefix=SVD);
53264     +   %local svdkeep;
53265     +   %let syscc=0;
53266     +   proc sort data=&data; by _termnum_; run;
53268     +   proc spsvd data=&data max_k = &maxK res = &res
53269     +       local = &cellWgt global =none in_global = &in_global;
53270     +       row _termnum_;
53271     +       col _document_;
53272     +       entry _count_;
53273     +       output  u = &U v = &V s = &s;
53274     +   run;
53276     +   /*try sampling if out of memory occurred*/
53277     +   %if(&syscc eq 1111) %then %do;
53278     +      %let syscc=0; /*reset syscc*/
53279     +      proc spsvd data = &data max_k = &maxK res = &res
53280     +          local = &cellWgt global = none in_global = &in_global ;
53281     +          row &rowVar;
53282     +          col &colVar;
53283     +          entry &entryVar;
53284     +          output u = &U v = &V s = &s;
53285     +          sample allow;
53286     +      run;
53287     +   %end;
53288     +    %if &syscc > 4 %then %do;
53289     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
53290     +       %goto end_svd_do_samp;
53291     +    %end;
53294     +   /* if resolution is used, the matrix U/V must be truncated to the set number of dim.*/
53295     +   proc sql noprint;
53296     +       select count(*) into: svdkeep
53297     +       from &s
53298     +       where keep=1;
53299     +    quit;
53301     +    %let svdkeep=%left(&svdkeep);
53302     +    data &U;
53303     +    set &U(keep= index col1-col&svdkeep);
53304     +    run;
53306     +    data &V;
53307     +    set &V(keep= index col1-col&svdkeep);
53308     +    run;
53309     +    %if &colpro ne %then %do;
53310     +       /* when sampling weights may have wrong dimensions*/
53311     +       proc sql noprint;
53312     +          create table new_global as
53313     +             select a.*
53314     +             from &in_global a, &U b
53315     +             where a.index = b.index;
53316     +       quit;
53319     +        proc sort data=&data; by &colVar; run;
53320     +        proc spsvd data=&data IN_U=&U
53321     +            local = &cellWgt global = none in_global = new_global ;
53322     +            row &rowVar;
53323     +            col &colVar;
53324     +            entry &entryVar;
53325     +            output colpro=&colpro bigpro normcol prefix="&prefix._SVD";
53326     +        run;
53328     +        proc sort data=&docs(keep=_document_)  out=_docids;
53329     +        by _document_;
53330     +        run;
53332     +        data &colpro;
53333     +           merge &colpro _docids(rename=(_document_=index));
53334     +        by index;
53335     +        run;
53338     +        data &colpro;
53339     +          set  &colpro;
53340     +          array svd_array &prefix._SVD1 - &prefix._SVD&SVDKEEP;
53341     +          do i = 1 to dim(svd_array);
53342     +             if svd_array(i)=. then svd_array(i)=0;
53343     +          end;
53344     +          drop i;
53345     +        run;
53346     +    %end;
53348     +    %if &syscc > 4 %then %do;
53349     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
53350     +       %goto end_svd_do_samp;
53351     +    %end;
53353     +    %if &rowpro ne %then %do;
53354     +        proc sort data=&data; by &rowVar; run;
53355     +        /* when sampling weights may have wrong dimensions*/
53356     +       proc sql;
53357     +          create table new_global as
53358     +             select a.*
53359     +             from &in_global a, &U b
53360     +             where a.index = b.index;
53361     +       quit;
53363     +        proc spsvd data=&data IN_V=&V
53364     +            local = &cellWgt global = none in_global = new_global ;
53365     +            row &rowVar; col &colVar; entry &entryVar;
53366     +            output wordPro = &rowpro bigpro normrow prefix="&prefix._SVD";
53367     +        run;
53368     +    %end;
53370     +    %if &syscc > 4 %then %do;
53371     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
53372     +       %goto end_svd_do_samp;
53373     +    %end;
53375     +   %end_svd_do_samp:
53377     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS1.TextFilter_EMINFO where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS1.TextFilter_EMINFO where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS1.TextFilter_EMINFO where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS1.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS1.TextCluster4_VariableSet(where=(kupcase(NAME)="ADJUSTERNOTES" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;

NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER4_VARIABLESET.
      WHERE (KUPCASE(NAME)='ADJUSTERNOTES') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.TextCluster4_last_tm_nodes;
MPRINT(TRAIN):   set EMWS1.TextFilter_EMINFO;
MPRINT(TRAIN):   run;

NOTE: There were 8 observations read from the data set EMWS1.TEXTFILTER_EMINFO.
NOTE: The data set EMWS1.TEXTCLUSTER4_LAST_TM_NODES has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.TextCluster4_VariableSet(where=(ROLE='TARGET' and USE in('Y' 'D') and LEVEL ne 'INTERVAL'));
MPRINT(TRAIN):   if _N_=1 then call symput('targetvar', strip(NAME));
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER4_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS1.TextCluster4_tmconfig as select * from EMWS1.TextFilter_tmconfig;
NOTE: Table EMWS1.TEXTCLUSTER4_TMCONFIG created, with 1 rows and 29 columns.

MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select cellwgt into: _cellweight from EMWS1.TextCluster4_tmconfig;
MPRINT(TRAIN):   select termwgt into: _termwgt from EMWS1.TextCluster4_tmconfig;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data _keepdocs (keep=_DOCUMENT_ SubroFlag );
MPRINT(TRAIN):   set EMWS1.TextFilter_TRAIN;
MPRINT(TRAIN):   run;

NOTE: There were 302 observations read from the data set EMWS1.TEXTPARSING_TRAIN.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_DOC_IDS.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_TRAIN.
NOTE: The data set WORK._KEEPDOCS has 302 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create view _keepdata as select * from EMWS1.TextFilter_tmout where _DOCUMENT_ in (select _DOCUMENT_ from _keepdocs);
NOTE: SQL view WORK._KEEPDATA has been defined.
MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil data=_keepdata key= EMWS1.TextFilter_terms doc=_keepdocs target=SubroFlag ;
MPRINT(TM_APPLY_TMUTIL):   control init memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   run;

NOTE: There are 2 distinct target levels.
NOTE: There were 1658 observations read from the data set EMWS1.TEXTFILTER_TMOUT.
NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: There were 1658 observations read from the data set WORK._KEEPDATA.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.16 seconds
      cpu time            0.06 seconds
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   select reduceF=2;
MPRINT(TM_APPLY_TMUTIL):   run;

NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem" release;
MPRINT(TM_APPLY_TMUTIL):   weight termwgt=MI cellwgt=LOG;
MPRINT(TM_APPLY_TMUTIL):   output key=_termstmutil keyformat=default keeponly unweighted out=_outtmutil_;
MPRINT(TM_APPLY_TMUTIL):   run;

NOTE: The data set WORK._TERMSTMUTIL has 421 observations and 8 variables.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create table _distinctterms as select distinct key,term, role, attribute from EMWS1.TextFilter_terms;
NOTE: Table WORK._DISTINCTTERMS created, with 323 rows and 4 columns.

MPRINT(TM_APPLY_TMUTIL):   create table _newkey as select b.term, b.role,b.attribute ,a.* from _termstmutil a left join _distinctterms b on a.key=b.key;
NOTE: Table WORK._NEWKEY created, with 421 rows and 11 columns.

MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   create table _weights as select distinct a.key as index, a.weight as gwgt from _newkey(where=(_ispar in('+',' '))) a inner join _distinctterms b on a.key =b.key;
NOTE: Table WORK._WEIGHTS created, with 184 rows and 2 columns.

MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ max_k = 100 res = LOW local = LOG global =none in_global = _weights;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output u = EMWS1.TextCluster4_svd_u v = _svdv s = EMWS1.TextCluster4_svd_s;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: P has been set to 25.
NOTE: Restart 1, Converged 68
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 1 times.
NOTE: Using value of 21 for K.
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 184 observations read from the data set WORK._WEIGHTS.
NOTE: The data set EMWS1.TEXTCLUSTER4_SVD_U has 184 observations and 101 variables.
NOTE: The data set WORK._SVDV has 298 observations and 101 variables.
NOTE: The data set EMWS1.TEXTCLUSTER4_SVD_S has 100 observations and 2 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.16 seconds
      cpu time            0.11 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   select count(*) into: svdkeep from EMWS1.TextCluster4_svd_s where keep=1;
MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_SVD_DO_SAMP):   data EMWS1.TextCluster4_svd_u;
MPRINT(TM_SVD_DO_SAMP):   set EMWS1.TextCluster4_svd_u(keep= index col1-col21);
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER4_SVD_U.
NOTE: The data set EMWS1.TEXTCLUSTER4_SVD_U has 184 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_SVD_DO_SAMP):   data _svdv;
MPRINT(TM_SVD_DO_SAMP):   set _svdv(keep= index col1-col21);
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 298 observations read from the data set WORK._SVDV.
NOTE: The data set WORK._SVDV has 298 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS1.TextCluster4_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 184 rows and 2 columns.

MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_U=EMWS1.TextCluster4_svd_u local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output colpro=_svdcolpro bigpro normcol prefix="TextCluster4_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER4_SVD_U.
NOTE: There were 184 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDCOLPRO has 298 observations and 22 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_keepdocs(keep=_document_) out=_docids;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: The data set WORK._DOCIDS has 302 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   merge _svdcolpro _docids(rename=(_document_=index));
MPRINT(TM_SVD_DO_SAMP):   by index;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 298 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 302 observations read from the data set WORK._DOCIDS.
NOTE: The data set WORK._SVDCOLPRO has 302 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   set _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   array svd_array TextCluster4_SVD1 - TextCluster4_SVD21;
MPRINT(TM_SVD_DO_SAMP):   do i = 1 to dim(svd_array);
MPRINT(TM_SVD_DO_SAMP):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TM_SVD_DO_SAMP):   end;
MPRINT(TM_SVD_DO_SAMP):   drop i;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 302 observations read from the data set WORK._SVDCOLPRO.
NOTE: The data set WORK._SVDCOLPRO has 302 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc sql;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS1.TextCluster4_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 184 rows and 2 columns.

MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_V=_svdv local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output wordPro = _svdrowpro bigpro normrow prefix="TextCluster4_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 298 observations read from the data set WORK._SVDV.
NOTE: There were 184 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDROWPRO has 184 observations and 22 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS1.TextCluster4_terms(drop=index) as select a.*,b.* from EMWS1.TextFilter_terms a left join _svdrowpro b on a.key = b.index;
NOTE: Table EMWS1.TEXTCLUSTER4_TERMS created, with 421 rows and 34 columns.

MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      

MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmgetncl.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMGETNCL.SOURCE.
53380     +
53381     + /*
53382     +  Macro:   tmgetncl.sas
53383     +  Purpose: To obtain a default number of clusters
53384     +  Syntax:  %tmgetncl(data=, maxclusters=, vars=);
53385     +
53386     +  Required Parameters:  data=      The input data set.
53387     +
53388     +  Optional Parameters:  vars=      Variables to be used
53389     +
53390     +  History:
53391     +  2001/01/23 - Bill Wheeler - Initial Coding.
53392     +
53393     +*/
53394     + %MACRO tmgetncl(data=, maxclusters=, vars=, tempDS=,
53395     +                 clusDS=, threads=THREADS);
53396     +
53397     +  %if &maxclusters= %then %let maxclusters = 40;
53398     +
53399     +  %if &vars ^= %then %let var = var &vars;
53400     +  %else %let var = ;
53401     +
53402     +  /* run PROC FASTCLUS with maxClusters clusters */
53403     +  proc fastclus data = &data noprint
53404     +    maxclusters = &maxclusters
53405     +    mean = &tempDS;
53406     +    &var
53407     +    ;
53408     +    run;
53409     +
53410     +  /* use PROC CLUSTER with the MEAN data set from FASTCLUS */
53411     +  proc cluster data = &tempDS
53412     +    method = WARD
53413     +    pseudo
53414     +    noprint
53415     +    outtree = &tempDS;
53416     +    &var;
53417     +  run;
53418     +
53419     +  %if (&SYSERR > 4) %then %do;
53420     +    data &clusDS; nclus = 0; run;
53421     +    %goto exit;
53422     +  %end;
53423     +
53424     +  /* sort and get rid of missing values in the outtree data set */
53425     +  %tmsort(data=&tempDS(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_),
53426     +        out=&tempDS, by=_ncl_, options=, threads=&threads);
53427     +
53428     +  data &clusDS; set &tempDS;
53429     +    keep nclus;
53430     +    retain loclclus -1 loclccc 0 maxccc 0 maxclus 0
53431     +   jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
53432     +
53433     +   if _N_ = 1 then do;
53434     +     maxccc = _ccc_;
53435     +     maxclus = _ncl_;
53436     +     nclus = _ncl_;
53437     +     occc = _ccc_;
53438     +     oncl = _ncl_;
53439     +   end;
53440     +   else if (_N_ = 2) then do;
53441     +     jump = _ccc_ - occc;
53442     +     if (jump > 0) then do;
53443     +       maxjump = jump;
53444     +       jclus = _ncl_;
53445     +     end;
53446     +     if (_ccc_ > maxccc) then do;
53447     +       maxccc = _ccc_;
53448     +       maxclus = _ncl_;
53449     +     end;
53450     +     occc = _ccc_;
53451     +     oncl = _ncl_;
53452     +   end;
53453     +
53454     +   else if (_N_ > 2) then do;
53455     +     prevjump = jump;
53456     +     jump = _ccc_ - occc;
53457     +
53458     +     if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
53459     +        loclclus = oncl;
53460     +        loclccc = occc;
53461     +     end;
53462     +     if (_ccc_ > maxccc) then do;
53463     +       maxccc = _ccc_;
53464     +       maxclus = _ncl_;
53465     +     end;
53466     +     if ((jump > 0) & (jump > maxjump)) then do;
53467     +       jclus = _ncl_;
53468     +       maxjump = jump;
53469     +       jccc = _ccc_;
53470     +     end;
53471     +
53472     +     occc = _ccc_;
53473     +     oncl = _ncl_;
53474     +
53475     +     if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
53476     +     else if (loclclus > 0) then nclus = loclclus;
53477     +     else if (jclus > 0) then nclus = jclus;
53478     +     else nclus = maxclus;
53479     +   end;
53480     +  run;
53481     +
53482     +  %exit: ;
53483     +
53484     +%MEND tmgetncl;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
53485     + /*
53486     +
53487     +  Macro:   tmfast.sas
53488     +  Purpose: Call proc fastclus with given defaults and parameters.
53489     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
53490     +
53491     +  Required Parameters:  data=      The input data set.
53492     +                        clusters=  The maximum number of clusters
53493     +
53494     +  Optional Parameters:  vars=      Variables to be used
53495     +                        outstat=   The name of the OUTSTAT data set
53496     +                        outseed=   The name of the OUTSEED data set
53497     +
53498     +  Either outstat or outseed mut be given, but not both.
53499     +  History:
53500     +  2001/01/16 - Bill Wheeler - Initial Coding.
53501     +
53502     +*/
53503     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
53504     +                 id=, out=, vars=);
53505     + /* defaults */
53506     + %if (&id ne ) %then %let id = id &id;
53507     + %if (&out ne ) %then %let out = out = &out;
53508     + %if (&vars ne ) %then %let var = var &vars;
53509     + %else %let var = ;
53510     +
53511     + %if &outseed= %then
53512     + %do;
53513     +   proc fastclus data = &data
53514     +   maxclusters = &clusters noprint
53515     +   outstat = &outstat &out;
53516     +   &var;
53517     +   &id;
53518     + %end;
53519     + %else
53520     + %do;
53521     +   proc fastclus data = &data
53522     +   maxclusters = &clusters noprint
53523     +   outseed = &outseed &out;
53524     +   &var;
53525     +   &id;
53526     + %end;
53527     +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
53528     +
53529     + /*
53530     +
53531     +  Macro:   tmemclus.sas
53532     +  Purpose: Call proc emclus with given defaults and parameters.
53533     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
53534     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
53535     +                   seciter=, min=, method=, eps=, init=, print=,
53536     +                   p=, outliers=, decvar=, initstd=, dist=,
53537     +                   secstd=, nobs=, threads=);
53538     +  Required Parameters:  data=      The input data set.
53539     +                        role=      Train or score
53540     +                        clusters=  The number of primary clusters
53541     +
53542     +  Optional Parameters:  vars=      Variables to be used
53543     +                   cov=       Type of covariance matrix
53544     +                   iter=      Number of EM iterations
53545     +                   secclus    Number of secondary clusters
53546     +                   seciter    Number of k-means iterations
53547     +                   min=       Minimum number of obs in a cluster
53548     +                   method=    Standard or scaled
53549     +                   eps=       Stopping tolerance
53550     +                   init=      Random, Fastclus, or Emclus
53551     +                   print=     All, last, or none
53552     +                   p=
53553     +                   outliers=  Keep, cluster, or ignore
53554     +                   outstat=   Name of OUTSTAT data set
53555     +                   out=       Name of OUT data set
53556     +                   seed=      Name of SEED data set
53557     +                   decvar=    Proportion to decrease variances
53558     +                   initstd=   Initial standard deviation
53559     +                   dist=      Minimum distance between clusters
53560     +                   secstd=    Secondary cluster max std dev.
53561     +                   nobs=      Number of obs read in each iteration
53562     +  History:
53563     +  2001/01/16 - Bill Wheeler - Initial Coding.
53564     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
53565     +*/
53566     +%MACRO tmemclus(data=, role=, clusters=, seed=,
53567     + outstat=, out=, vars=, cov=, iter=, secclus=,
53568     + seciter=, min=, method=, eps=, init=, print=,
53569     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
53570     +
53571     + %local saveout saveseed op1 op2 op3 op4;
53572     +
53573     + %LET saveout = &out;
53574     + %LET saveseed = &outstat;
53575     +
53576     + /* defaults */
53577     + %if &role= %then %let role = TRAIN;
53578     + %if &seed ne %then %let seed = seed=&seed;
53579     + %if &vars= %then %let var = ;
53580     + %else %let var = var &vars;
53581     + %if &cov ne %then %let cov = cov = &cov;
53582     + %if &iter ne %then %let iter = iter = &iter;
53583     + %if &init ne %then %let init = init = &init;
53584     + %if &eps ne  %then %let eps = eps = &eps;
53585     + %if &min ne %then %let min = min = &min;
53586     + %if &seciter ne %then %let seciter = seciter = &seciter;
53587     + %if &print ne %then %let print = print = &print;
53588     + %if &p ne %then %let p = p = &p;
53589     + %if &outliers ne %then %let outliers = outliers = &outliers;
53590     + %if &method ne %then %let method = method = &method;
53591     + %if &decvar ne %then %let decvar = decvar = &decvar;
53592     + %if &outstat ne %then %let outstat = outstat = &outstat;
53593     + %if &out ne %then %let out = out = &out;
53594     + %if (&threads >= 0)  %then %let threads = threads = &threads;
53595     + %else %let threads = ;
53596     +
53597     + %LET op1 = ;
53598     + %LET op2 = ;
53599     + %LET op3 = ;
53600     + %LET op4 = ;
53601     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
53602     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
53603     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
53604     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
53605     +
53606     +
53607     + %IF &SYSVER < 9 %THEN %DO;
53608     +    %LET cov = ;
53609     +    %LET decvar = ;
53610     +    %LET outliers = ;
53611     +    %LET out = ;
53612     + %END;
53613     +
53614     +
53615     + %if %upcase(&role) = TRAIN %then
53616     + %do;
53617     +   proc emclus data = &data
53618     +   clusters = &clusters
53619     +   &seed
53620     +   &outstat
53621     +   &out
53622     +   &init
53623     +   &eps
53624     +   &method
53625     +   &secclus
53626     +   &min
53627     +   &print
53628     +   &outliers
53629     +   &iter
53630     +   &op1 &op2
53631     +   &op3 &op4
53632     +   &decvar
53633     +   &cov
53634     +   &threads
53635     +   ;
53636     +   &var;
53637     + %end;
53638     + %else
53639     +  %do;
53640     +    proc emclus data = &data
53641     +    role = score
53642     +    clusters = &clusters
53643     +    &seed
53644     +    &out
53645     +    &cov
53646     +    ;
53647     +    &var;
53648     +  %end;
53649     +
53650     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
53651     +   proc emclus data = &data
53652     +   role = score
53653     +   clusters = &clusters
53654     +   seed = &saveseed
53655     +   &saveout
53656     +   ;
53657     +   &var;
53658     + %END;
53659     +
53660     +
53661     +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
53662     +
53663     +/*
53664     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
53665     +
53666     +  Description: This macro will take output from
53667     +     emclus and generate predicted
53668     +      predicted clusters.
53669     +
53670     +  Parms: inds - input data set, produced by emclus.
53671     +   outds - data set with clusters created by this macro.
53672     +   clusters - number of clusters that should be on this data set
53673     +   type - valid values: 'max' or 'prob'.  Max will just take the
53674     +      cluster with the highest probability as the predicted cluster.
53675     +      In the case of a tie the first cluster with that value will
53676     +       selected.
53677     +      Prob will attempt to select multiple clusters based on
53678     +      how many clusters were requested.  That is if 3 clusters
53679     +      were requested, any cluster with prob>1/3 will be selected
53680     +      as the predicted cluster. THIS OPTION IS UNTESTED.
53681     +*/
53682     +
53683     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
53684     +
53685     +  %local _str newfreqDS _flag;
53686     +
53687     +  * set the optional arguments;
53688     +  %if &type= %then %let type=max;
53689     +  %if &ignore = 1 %then %let
53690     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
53691     +  %else %let _str = ;
53692     +  %if %str(&freqDS) ^= %str() %then %do;
53693     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
53694     +   %let _flag = 1;
53695     +  %end;
53696     +  %else %let _flag = 0;
53697     +
53698     +  %if &compress = 1 %then %let compress = compress=Y;
53699     +  %else %let compress = ;
53700     +
53701     +  data &outds(&compress drop=_c1-_c&clusters)
53702     +    %if &_flag = 1 %then %do;
53703     +    &newfreqDS
53704     +    %end;
53705     +    ;
53706     +    set &inds end=eof;
53707     +   * array for holding all probabilities;
53708     +    array _p prob1--prob&clusters;
53709     +    array _c(&clusters);
53710     +    retain _c 0;
53711     +   * get rid of working columns;
53712     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
53713     +    /* keep the largest probability and the cluster */
53714     +    _max_ = 0;
53715     +    do _i = 1 to &clusters;
53716     +      if _p(_i) > _max_ then do;
53717     +        _max_ = _p(_i);
53718     +        _CLUSTER_ = _i;
53719     +      end;
53720     +    end;
53721     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
53722     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
53723     +    else _CLUSTER_ = .;
53724     +    &_str;
53725     +    %if &_flag = 1 %then %do;
53726     +      if eof then do;
53727     +        output &freqDS;
53728     +                output &outDS;
53729     +          end;
53730     +          else output &outDS;
53731     +        %end;
53732     +
53733     +    run;
53734     +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
53735     + /*
53736     +PROC SORT macro
53737     +
53738     +%tmsort(data=, out=, by=);
53739     +
53740     +data=      - name of input data set (outtree data set from PROC CLUSTER)
53741     +out=       - name of the output data set
53742     +by=        - by statement
53743     +options=   - proc options
53744     +*/
53745     +
53746     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
53747     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
53748     +  %if &SYSVER < 9 %then %let threads = ;
53749     +
53750     +  proc sort data = %STR(&data) &threads &options
53751     +    &out;
53752     +    by &by;
53753     +  run;
53754     +
53755     +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: numTerms from EMWS1.TextFilter_terms a where a.numdocs>=2 and _ispar in('+',' ') ;
MPRINT(TM_CLUSTER):   select count (*) into: numdocs from EMWS1.TextFilter_TRAIN a;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(TMGETNCL):   proc fastclus data = _svdcolpro noprint maxclusters = 40 mean = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster4_SVD1 - TextCluster4_SVD21 ;
MPRINT(TMGETNCL):   run;

NOTE: The data set WORK._CLUSTEMP1 has 40 observations and 28 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(TMGETNCL):   proc cluster data = _clusTemp1 method = WARD pseudo noprint outtree = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster4_SVD1 - TextCluster4_SVD21;
MPRINT(TMGETNCL):   run;

NOTE: The data set WORK._CLUSTEMP1 has 79 observations and 37 variables.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(TMSORT):   proc sort data = _clusTemp1(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_) out = _clusTemp1;
MPRINT(TMSORT):   by _ncl_;
MPRINT(TMSORT):   run;

NOTE: There were 39 observations read from the data set WORK._CLUSTEMP1.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._CLUSTEMP1 has 39 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.22 seconds
      cpu time            0.03 seconds
      

MPRINT(TMGETNCL):  ;
MPRINT(TMGETNCL):   data _clusTemp;
MPRINT(TMGETNCL):   set _clusTemp1;
MPRINT(TMGETNCL):   keep nclus;
MPRINT(TMGETNCL):   retain loclclus -1 loclccc 0 maxccc 0 maxclus 0 jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
MPRINT(TMGETNCL):   if _N_ = 1 then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   nclus = _ncl_;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ = 2) then do;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if (jump > 0) then do;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ > 2) then do;
MPRINT(TMGETNCL):   prevjump = jump;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
MPRINT(TMGETNCL):   loclclus = oncl;
MPRINT(TMGETNCL):   loclccc = occc;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if ((jump > 0) & (jump > maxjump)) then do;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jccc = _ccc_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
MPRINT(TMGETNCL):   else if (loclclus > 0) then nclus = loclclus;
MPRINT(TMGETNCL):   else if (jclus > 0) then nclus = jclus;
MPRINT(TMGETNCL):   else nclus = maxclus;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   run;

NOTE: There were 39 observations read from the data set WORK._CLUSTEMP1.
NOTE: The data set WORK._CLUSTEMP has 39 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(TMGETNCL):   ;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(nclus) into: numClus from _clusTemp ;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: nobs from _svdcolpro;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMFAST):   proc fastclus data = _svdcolpro maxclusters = 9 noprint outstat = _fastclusstat ;
MPRINT(TMFAST):   var TextCluster4_SVD1 - TextCluster4_SVD21;
MPRINT(TMFAST):   ;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;

NOTE: The data set WORK._FASTCLUSSTAT has 55 observations and 24 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(CLUSTER) into :numClus from _fastclusstat where upcase(_TYPE_)='SEED' ;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMEMCLUS):   proc emclus data = _svdcolpro clusters = 9 seed=_fastclusstat outstat = EMWS1.TextCluster4_emoutstat out = _tmutildoc init = FASTCLUS eps = .1 print = NONE iter = 5 decvar = 0 ;
MPRINT(TMEMCLUS):   var TextCluster4_SVD1 - TextCluster4_SVD21;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;

NOTE: The standard EM algorithm will be run.
NOTE: DIST is set to 0.1948401407
NOTE: EPS is set to 0.1
NOTE: INITSTD is set to 26.927518865
NOTE: ITER is set to 5
NOTE: MAXTIME is set to 2147483647
WARNING: The maximum number of 5 iterations in the EM algorithm has been reached. Parameter estimates may not be accurate.
NOTE: There were 302 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 55 observations read from the data set WORK._FASTCLUSSTAT.
NOTE: The data set EMWS1.TEXTCLUSTER4_EMOUTSTAT has 19 observations and 28 variables.
NOTE: The data set WORK._TMUTILDOC has 302 observations and 32 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
      

MPRINT(TMPRED):   * set the optional arguments;
MPRINT(TMPRED):   data EMWS1.TextCluster4_docs(compress=Y drop=_c1-_c9) _clusstat(keep=_c1-_c9) ;
MPRINT(TMPRED):   set _tmutildoc end=eof;
MPRINT(TMPRED):   * array for holding all probabilities;
MPRINT(TMPRED):   array _p prob1--prob9;
MPRINT(TMPRED):   array _c(9);
MPRINT(TMPRED):   retain _c 0;
MPRINT(TMPRED):   * get rid of working columns;
MPRINT(TMPRED):   drop _max_ _i _WARN_;
MPRINT(TMPRED):   _max_ = 0;
MPRINT(TMPRED):   do _i = 1 to 9;
MPRINT(TMPRED):   if _p(_i) > _max_ then do;
MPRINT(TMPRED):   _max_ = _p(_i);
MPRINT(TMPRED):   _CLUSTER_ = _i;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   if (_CLUSTER_ >= 1) and (_CLUSTER_ <= 9) then _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
MPRINT(TMPRED):   else _CLUSTER_ = .;
MPRINT(TMPRED):   ;
MPRINT(TMPRED):   if eof then do;
MPRINT(TMPRED):   output _clusstat;
MPRINT(TMPRED):   output EMWS1.TextCluster4_docs;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   else output EMWS1.TextCluster4_docs;
MPRINT(TMPRED):   run;

NOTE: There were 302 observations read from the data set WORK._TMUTILDOC.
NOTE: The data set EMWS1.TEXTCLUSTER4_DOCS has 302 observations and 32 variables.
NOTE: Compressing data set EMWS1.TEXTCLUSTER4_DOCS increased size by 50.00 percent. 
      Compressed is 3 pages; un-compressed would require 2 pages.
NOTE: The data set WORK._CLUSSTAT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data EMWS1.TextCluster4_docs;
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster4_docs;
MPRINT(TM_CLUSTER):   rename prob1-prob9 = TextCluster4_prob1-TextCluster4_prob9;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER4_DOCS.
NOTE: The data set EMWS1.TEXTCLUSTER4_DOCS has 302 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   data _clusstat;
MPRINT(TM_CLUSTER):   array c(9) _c1-_c9;
MPRINT(TM_CLUSTER):   set _clusstat;
MPRINT(TM_CLUSTER):   totalobs=0;
MPRINT(TM_CLUSTER):   do _CLUSTER_ = 1 to 9;
MPRINT(TM_CLUSTER):   Freq = c(_CLUSTER_);
MPRINT(TM_CLUSTER):   totalobs=totalobs+c(_CLUSTER_);
MPRINT(TM_CLUSTER):   output;
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   call symput ('totNumDocs', totalobs);
MPRINT(TM_CLUSTER):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      451:154   
NOTE: There were 1 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 9 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):   data _clusstat;
MPRINT(TM_CLUSTER):   set _clusstat;
MPRINT(TM_CLUSTER):   Percent = Freq/ 302;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 9 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 9 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   data _clustermean(rename=(TextCluster4_SVD1 - TextCluster4_SVD21 = _mean1-_mean21));
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster4_emoutstat(keep=cluster _TYPE_ TextCluster4_SVD1 - TextCluster4_SVD21);
MPRINT(TM_CLUSTER):   if _TYPE_ = "MEAN";
MPRINT(TM_CLUSTER):   keep cluster TextCluster4_SVD1 - TextCluster4_SVD21 ;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 19 observations read from the data set EMWS1.TEXTCLUSTER4_EMOUTSTAT.
NOTE: The data set WORK._CLUSTERMEAN has 9 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _meandocs(drop=cluster) as select a.*, b.* from EMWS1.TextCluster4_docs a left join _clustermean b on a._cluster_=b.cluster ;
NOTE: Table WORK._MEANDOCS created, with 302 rows and 53 columns.

MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   data _rmscalc;
MPRINT(TM_CLUSTER):   merge _meandocs(in=inhere) _clusstat;
MPRINT(TM_CLUSTER):   array _means(21) _mean1-_mean21;
MPRINT(TM_CLUSTER):   array _svds(21) TextCluster4_SVD1 - TextCluster4_SVD21;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   error=0;
MPRINT(TM_CLUSTER):   do i = 1 to 21;
MPRINT(TM_CLUSTER):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   drop i;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 302 observations read from the data set WORK._MEANDOCS.
NOTE: There were 9 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._RMSCALC has 302 observations and 66 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):   proc summary data=_rmscalc nway;
MPRINT(TM_CLUSTER):   class _cluster_;
MPRINT(TM_CLUSTER):   var error;
MPRINT(TM_CLUSTER):   output out=_meanerr mean=meane sum=sume;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 302 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 9 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):   data _rmsse;
MPRINT(TM_CLUSTER):   set _meanerr;
MPRINT(TM_CLUSTER):   if _freq_ gt 1 then do;
MPRINT(TM_CLUSTER):   _rmsstd_=sqrt(sume/((_freq_-1)*(21)));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   else do;
MPRINT(TM_CLUSTER):   _rmsstd_=0;
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   keep _cluster_ _rmsstd_;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 9 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _clusstat2(drop=cluster) as select a.*,b.* from _clustermean a left join _rmsse b on a.cluster=b._cluster_;
NOTE: Table WORK._CLUSSTAT2 created, with 9 rows and 23 columns.

MPRINT(TM_CLUSTER):   create table EMWS1.TextCluster4_clusters as select a.*, b.freq, b.percent from _clusstat2(keep=_cluster_ _mean1-_mean21 _rmsstd_) a right join _clusstat b on a._cluster_=b._cluster_ where b.freq>0 ;
NOTE: Table EMWS1.TEXTCLUSTER4_CLUSTERS created, with 9 rows and 25 columns.

MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmterm1.source';
MPRINT(TM_CLUSTER):   proc sort data=EMWS1.TextFilter_terms out=_terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 421 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   if first.key then output;
MPRINT(TM_CLUSTER):   else;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 421 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = EMWS1.TextFilter_tmout threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: There were 1658 observations read from the data set EMWS1.TEXTFILTER_TMOUT.
NOTE: The data set WORK._TMOUT_ has 1658 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _tmout_;
MPRINT(TM_CLUSTER):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TM_CLUSTER):   by _termnum_;
MPRINT(TM_CLUSTER):   if _A_;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 1658 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):   data _docs_;
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster4_docs (rename=(index=_document_) keep=index _cluster_);
MPRINT(TM_CLUSTER):   _SEGMNT_=_cluster_;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER4_DOCS.
NOTE: The data set WORK._DOCS_ has 302 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1658 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 703 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.04 seconds
      cpu time            0.07 seconds
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1658 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 10 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: There were 10 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: Table WORK._SUM has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: There were 703 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 703 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: There were 703 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 270 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: There were 270 observations read from the data set WORK._UNQT.
NOTE: 135 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 135 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 454 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: Table WORK._UNQT has been dropped.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: Table WORK._TFREQ has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: There were 454 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 135 observations and 11 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 9 ) 4 clus1 - clus9 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 9 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus9 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 1658 - 140;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 140 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 1658 - 87;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 87 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 1658 - 465;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 465 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 1658 - 233;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 233 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 1658 - 211;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 211 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 1658 - 100;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 100 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus7 = 0) or (clus7 < 0) then cdf7 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus7 ;
MPRINT(TMTERM1):   div = 1658 - 106;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf7 = CDF( 'binomial', clus7 , propor , 106 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf7 = 1;
MPRINT(TMTERM1):   else cdf7 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus8 = 0) or (clus8 < 0) then cdf8 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus8 ;
MPRINT(TMTERM1):   div = 1658 - 261;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf8 = CDF( 'binomial', clus8 , propor , 261 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf8 = 1;
MPRINT(TMTERM1):   else cdf8 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus9 = 0) or (clus9 < 0) then cdf9 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus9 ;
MPRINT(TMTERM1):   div = 1658 - 55;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf9 = CDF( 'binomial', clus9 , propor , 55 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf9 = 1;
MPRINT(TMTERM1):   else cdf9 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: There were 135 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 135 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 9 ) cdf1 - cdf9 ;
MPRINT(TMTERM1):   array a_count ( 9 ) clus1 - clus9 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 9 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: There were 135 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 454 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: Table WORK._CLCDF has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: There were 454 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 454 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 454) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 454) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 454) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: There were 454 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: Table WORK._CLCDFTR has been dropped.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = EMWS1.TextCluster4_clusters threads out = EMWS1.TextCluster4_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER4_CLUSTERS.
NOTE: The data set EMWS1.TEXTCLUSTER4_CLUSTERS has 9 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = _desc_ threads out = _desc_;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _desc_;
MPRINT(TM_CLUSTER):   merge EMWS1.TextCluster4_clusters _desc_;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   run;

NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER4_CLUSTERS.
NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 9 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(TMSORT):   proc sort data = _desc_ threads out = EMWS1.TextCluster4_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set EMWS1.TEXTCLUSTER4_CLUSTERS has 9 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   * add the info to EMINFO to forward on to other nodes ;
MPRINT(TRAIN):   data EMWS1.TextCluster4_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   key="LastTMNode";
MPRINT(TRAIN):   data="TextCluster4";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTMNodeType";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTextCluster";
MPRINT(TRAIN):   data="TextCluster4";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="PRESCORECODE";
MPRINT(TRAIN):   data="TextCluster4";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;

NOTE: Variable TARGET is uninitialized.
NOTE: The data set EMWS1.TEXTCLUSTER4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :svdkeep from EMWS1.TextCluster4_svd_s where keep=1;
MPRINT(TRAIN):   select count(*) into :cluscnt from EMWS1.TextCluster4_clusters;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.TextCluster4_tmconfig;
MPRINT(TRAIN):   set EMWS1.TextCluster4_tmconfig;
MPRINT(TRAIN):   clus_alg = "1.0";
MPRINT(TRAIN):   maxsvd = 100;
MPRINT(TRAIN):   svdkeep= 21;
MPRINT(TRAIN):   last_prescore = "TextFilter                                 ";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER4_TMCONFIG.
NOTE: The data set EMWS1.TEXTCLUSTER4_TMCONFIG has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_CLUSTER_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD5");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD6");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD7");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD8");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD9");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD10");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD11");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD12");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD13");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD14");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD15");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD16");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD17");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD18");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD19");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD20");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_SVD21");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB5");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB6");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB7");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB8");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster4_PROB9");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp;
WARNING: No logical assign for filename TEMP.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: TextCluster4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
54092      *------------------------------------------------------------*;
54093      * End TRAIN: TextCluster4;
54094      *------------------------------------------------------------*;

54095      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
54096      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
54097      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
54098      ;
MPRINT(EM_DIAGRAM):   ;
54099      ;
MPRINT(EM_DIAGRAM):   ;
54100      ;
MPRINT(EM_DIAGRAM):   ;
54101      ;
MPRINT(EM_DIAGRAM):   ;
54102      quit;
MPRINT(EM_DIAGRAM):   quit;
54103      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
54104      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
54105      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
54106      /*; *"; *'; */
54107      ;
MPRINT(EM_DIAGRAM):   ;
54108      run;
MPRINT(EM_DIAGRAM):   run;
54109      quit;
MPRINT(EM_DIAGRAM):   quit;
54110      /* Reset EM Options */
54111      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
54112      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
54113      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
54114      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
54115      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
54116      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

54117      filename x "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\CDELTA_TRAIN.sas";
54118      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
54119      file x;
MPRINT(EM_DIAGRAM):   file x;
54120      put 'if upcase(NAME) = "TEXTCLUSTER4_CLUSTER_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_CLUSTER_" then do;';
54121      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
54122      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
54123      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54124      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54125      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB1" then do;';
54126      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54127      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54128      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54129      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB2" then do;';
54130      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54131      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54132      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54133      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB3" then do;';
54134      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54135      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54136      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54137      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB4" then do;';
54138      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54139      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54140      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54141      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB5" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB5" then do;';
54142      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54143      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54144      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54145      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB6" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB6" then do;';
54146      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54147      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54148      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54149      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB7" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB7" then do;';
54150      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54151      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54152      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54153      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB8" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB8" then do;';
54154      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54155      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54156      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54157      put 'if upcase(NAME) = "TEXTCLUSTER4_PROB9" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_PROB9" then do;';
54158      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
54159      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54160      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54161      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD1" then do;';
54162      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54163      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54164      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54165      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54166      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD10" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD10" then do;';
54167      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54168      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54169      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54170      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54171      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD11" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD11" then do;';
54172      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54173      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54174      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54175      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54176      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD12" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD12" then do;';
54177      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54178      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54179      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54180      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54181      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD13" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD13" then do;';
54182      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54183      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54184      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54185      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54186      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD14" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD14" then do;';
54187      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54188      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54189      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54190      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54191      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD15" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD15" then do;';
54192      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54193      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54194      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54195      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54196      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD16" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD16" then do;';
54197      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54198      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54199      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54200      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54201      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD17" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD17" then do;';
54202      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54203      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54204      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54205      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54206      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD18" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD18" then do;';
54207      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54208      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54209      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54210      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54211      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD19" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD19" then do;';
54212      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54213      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54214      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54215      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54216      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD2" then do;';
54217      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54218      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54219      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54220      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54221      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD20" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD20" then do;';
54222      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54223      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54224      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54225      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54226      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD21" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD21" then do;';
54227      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54228      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54229      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54230      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54231      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD3" then do;';
54232      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54233      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54234      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54235      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54236      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD4" then do;';
54237      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54238      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54239      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54240      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54241      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD5" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD5" then do;';
54242      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54243      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54244      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54245      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54246      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD6" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD6" then do;';
54247      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54248      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54249      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54250      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54251      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD7" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD7" then do;';
54252      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54253      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54254      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54255      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54256      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD8" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD8" then do;';
54257      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54258      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54259      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54260      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
54261      put 'if upcase(NAME) = "TEXTCLUSTER4_SVD9" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER4_SVD9" then do;';
54262      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
54263      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
54264      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
54265      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Apr2017:12:34:38,
      Create Time=26Apr2017:15:42:53

NOTE: 145 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

54266      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

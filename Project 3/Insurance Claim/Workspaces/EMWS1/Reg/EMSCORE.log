MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 28, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:21:56" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 28, 2017
Time:                16:21:56
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0GJAUBF "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0GJAUBF new;
MPRINT(EM_DIAGRAM):   run;
25657      proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
25658      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
25659      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 97 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

25660      proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
25661      var "BodyANKLE"n--"VEHflag0"n;
MPRINT(EM_DIAGRAM):   var "BodyANKLE"n--"VEHflag0"n;
25662      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 63 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

25663      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
25664      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
25665      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 97 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 97 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

25666      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
25667      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
25668      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 63 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 63 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

25669      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
25670      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
25671      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
25672      if (ina and inb) and SubroFlag ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and SubroFlag ne . then output;
25673      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 97 observations read from the data set WORK.TEMPREG.
NOTE: There were 63 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

25674      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
25675      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
25676      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
25677      i=1;
MPRINT(EM_DIAGRAM):   i=1;
25678      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
25679      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
25680      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
25681      output;
MPRINT(EM_DIAGRAM):   output;
25682      end;
MPRINT(EM_DIAGRAM):   end;
25683      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

25684      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
25685      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
25686      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

25687      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25688      *------------------------------------------------------------*;
25689      * Reg: Scoring DATA data;
25690      *------------------------------------------------------------*;
25691      data EMWS1.Reg_TRAIN
25692      / view=EMWS1.Reg_TRAIN
25693      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
25694      set EMWS1.TextTopic_TRAIN
25695      ;
MPRINT(EM_DIAGRAM):   set EMWS1.TextTopic_TRAIN ;
25696      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
25697     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25698     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
25699     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25700     +
25701     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
25702     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
25703     +
25704     +length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
25705     +label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
25706     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
25707     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
25708     +label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
25709     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
25710     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
25711     +
25712     +*** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
25713     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
25714     +label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
25715     +length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
25716     +F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
25717     +%DMNORMIP( F_SubroFlag )
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
25718     +if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
25719     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
25720     +end;
MPRINT(EM_DIAGRAM):   end;
25721     +else do;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
25722     +   if F_SubroFlag = '0'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
25723     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
25724     +   end;
25725     +   else if F_SubroFlag = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
25726     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
25727     +   end;
MPRINT(EM_DIAGRAM):   end;
25728     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
25729     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
25730     +   end;
25731     +end;
MPRINT(EM_DIAGRAM):   *** Check TextCluster_SVD1 for missing values ;
25732     +
MPRINT(EM_DIAGRAM):   if missing( TextCluster_SVD1 ) then do;
25733     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25734     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25735     +
MPRINT(EM_DIAGRAM):   end;
25736     +*** Check TextCluster_SVD1 for missing values ;
25737     +if missing( TextCluster_SVD1 ) then do;
MPRINT(EM_DIAGRAM):   *** Check TextCluster_SVD3 for missing values ;
25738     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   if missing( TextCluster_SVD3 ) then do;
25739     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25740     +end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25741     +
MPRINT(EM_DIAGRAM):   end;
25742     +*** Check TextCluster_SVD3 for missing values ;
25743     +if missing( TextCluster_SVD3 ) then do;
MPRINT(EM_DIAGRAM):   *** Check TextTopic_raw3 for missing values ;
25744     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   if missing( TextTopic_raw3 ) then do;
25745     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25746     +end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25747     +
MPRINT(EM_DIAGRAM):   end;
25748     +*** Check TextTopic_raw3 for missing values ;
25749     +if missing( TextTopic_raw3 ) then do;
MPRINT(EM_DIAGRAM):   *** Check TextTopic_raw4 for missing values ;
25750     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   if missing( TextTopic_raw4 ) then do;
25751     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25752     +end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25753     +
MPRINT(EM_DIAGRAM):   end;
25754     +*** Check TextTopic_raw4 for missing values ;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
25755     +if missing( TextTopic_raw4 ) then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
25756     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _P0 = 0.3741721854;
25757     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _P1 = 0.6258278146;
25758     +end;
MPRINT(EM_DIAGRAM):   goto REGDR1;
25759     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
25760     +if _DM_BAD > 0 then do;
25761     +   _P0 = 0.3741721854;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
25762     +   _P1 = 0.6258278146;
MPRINT(EM_DIAGRAM):   drop _TEMP;
25763     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
25764     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
25765     +
25766     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster_SVD1 ;
25767     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster_SVD1 ;
25768     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.41264423433803 * _TEMP);
25769     +_LP0 = 0;
25770     +
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster_SVD3 ;
25771     +***  Effect: TextCluster_SVD1 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster_SVD3 ;
25772     +_TEMP = TextCluster_SVD1 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.78446861745173 * _TEMP);
25773     +_LP0 = _LP0 + (    3.41264423433803 * _TEMP);
25774     +
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic_raw3 ;
25775     +***  Effect: TextCluster_SVD3 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic_raw3 ;
25776     +_TEMP = TextCluster_SVD3 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.86085838231928 * _TEMP);
25777     +_LP0 = _LP0 + (   -2.78446861745173 * _TEMP);
25778     +
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic_raw4 ;
25779     +***  Effect: TextTopic_raw3 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic_raw4 ;
25780     +_TEMP = TextTopic_raw3 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.2160144344961 * _TEMP);
25781     +_LP0 = _LP0 + (    4.86085838231928 * _TEMP);
25782     +
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
25783     +***  Effect: TextTopic_raw4 ;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
25784     +_TEMP = TextTopic_raw4 ;
MPRINT(EM_DIAGRAM):   _TEMP = -0.61739244071281 + _LP0;
25785     +_LP0 = _LP0 + (     3.2160144344961 * _TEMP);
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
25786     +
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
25787     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
25788     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   end;
25789     +_TEMP =    -0.61739244071281 + _LP0;
25790     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
25791     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
25792     +   _P0 = _TEMP / (1 + _TEMP);
25793     +end;
25794     +else _P0 = 1 / (1 + exp(-_TEMP));
25795     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
25796     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
25797     +REGDR1:
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
25798     +
MPRINT(EM_DIAGRAM):   end;
25799     +*** Residuals;
25800     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
25801     +   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
25802     +   R_SubroFlag0 = .;
25803     +end;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
25804     +else do;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
25805     +    label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
25806     +    label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
25807     +   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   end;
25808     +   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   end;
25809     +   select( _Y );
25810     +      when (0)  R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
25811     +      when (1)  R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
25812     +   end;
25813     +end;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
25814     +
25815     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
25816     +label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
25817     +label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
25818     +P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
25819     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
25820     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
25821     +P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   I_SubroFlag = REGDRF[_IY];
25822     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_SubroFlag = REGDRU[_IY];
25823     +   _MAXP = _P1;
25824     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
25825     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
25826     +I_SubroFlag = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
25827     +U_SubroFlag = REGDRU[_IY];
25828     +
25829     +*************************************;
25830     +***** end scoring code for regression;
25831     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25832      run;

NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
25833      quit;
25834      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25835      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25836      *------------------------------------------------------------*;
25837      * Reg: Scoring VALIDATE data;
25838      *------------------------------------------------------------*;
25839      data EMWS1.Reg_VALIDATE
25840      / view=EMWS1.Reg_VALIDATE
25841      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
25842      set EMWS1.TextTopic_VALIDATE
25843      ;
MPRINT(EM_DIAGRAM):   set EMWS1.TextTopic_VALIDATE ;
25844      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
25845     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25846     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
25847     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25848     +
25849     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
25850     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
25851     +
25852     +length I_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length I_SubroFlag $ 12;
25853     +label I_SubroFlag = 'Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label I_SubroFlag = 'Into: SubroFlag' ;
25854     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
25855     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
25856     +label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label U_SubroFlag = 'Unnormalized Into: SubroFlag' ;
25857     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
25858     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
25859     +
25860     +*** Generate dummy variables for SubroFlag ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SubroFlag ;
25861     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
25862     +label F_SubroFlag = 'From: SubroFlag' ;
MPRINT(EM_DIAGRAM):   label F_SubroFlag = 'From: SubroFlag' ;
25863     +length F_SubroFlag $ 12;
MPRINT(EM_DIAGRAM):   length F_SubroFlag $ 12;
25864     +F_SubroFlag = put( SubroFlag , BEST12. );
MPRINT(EM_DIAGRAM):   F_SubroFlag = put( SubroFlag , BEST12. );
25865     +%DMNORMIP( F_SubroFlag )
MPRINT(DMNORMIP):   call dmnorm(F_SubroFlag,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25866     +if missing( SubroFlag ) then do;
MPRINT(EM_DIAGRAM):   if missing( SubroFlag ) then do;
25867     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
25868     +end;
MPRINT(EM_DIAGRAM):   end;
25869     +else do;
MPRINT(EM_DIAGRAM):   else do;
25870     +   if F_SubroFlag = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_SubroFlag = '0' then do;
25871     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
25872     +   end;
MPRINT(EM_DIAGRAM):   end;
25873     +   else if F_SubroFlag = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_SubroFlag = '1' then do;
25874     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
25875     +   end;
MPRINT(EM_DIAGRAM):   end;
25876     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25877     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
25878     +   end;
MPRINT(EM_DIAGRAM):   end;
25879     +end;
MPRINT(EM_DIAGRAM):   end;
25880     +
25881     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
25882     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
25883     +
25884     +*** Check TextCluster_SVD1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster_SVD1 for missing values ;
25885     +if missing( TextCluster_SVD1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster_SVD1 ) then do;
25886     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25887     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25888     +end;
MPRINT(EM_DIAGRAM):   end;
25889     +
25890     +*** Check TextCluster_SVD3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextCluster_SVD3 for missing values ;
25891     +if missing( TextCluster_SVD3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextCluster_SVD3 ) then do;
25892     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25893     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25894     +end;
MPRINT(EM_DIAGRAM):   end;
25895     +
25896     +*** Check TextTopic_raw3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic_raw3 for missing values ;
25897     +if missing( TextTopic_raw3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic_raw3 ) then do;
25898     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25899     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25900     +end;
MPRINT(EM_DIAGRAM):   end;
25901     +
25902     +*** Check TextTopic_raw4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TextTopic_raw4 for missing values ;
25903     +if missing( TextTopic_raw4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( TextTopic_raw4 ) then do;
25904     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25905     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25906     +end;
MPRINT(EM_DIAGRAM):   end;
25907     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
25908     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
25909     +   _P0 = 0.3741721854;
MPRINT(EM_DIAGRAM):   _P0 = 0.3741721854;
25910     +   _P1 = 0.6258278146;
MPRINT(EM_DIAGRAM):   _P1 = 0.6258278146;
25911     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
25912     +end;
MPRINT(EM_DIAGRAM):   end;
25913     +
25914     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
25915     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
25916     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
25917     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
25918     +
25919     +***  Effect: TextCluster_SVD1 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster_SVD1 ;
25920     +_TEMP = TextCluster_SVD1 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster_SVD1 ;
25921     +_LP0 = _LP0 + (    3.41264423433803 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.41264423433803 * _TEMP);
25922     +
25923     +***  Effect: TextCluster_SVD3 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextCluster_SVD3 ;
25924     +_TEMP = TextCluster_SVD3 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextCluster_SVD3 ;
25925     +_LP0 = _LP0 + (   -2.78446861745173 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.78446861745173 * _TEMP);
25926     +
25927     +***  Effect: TextTopic_raw3 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic_raw3 ;
25928     +_TEMP = TextTopic_raw3 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic_raw3 ;
25929     +_LP0 = _LP0 + (    4.86085838231928 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.86085838231928 * _TEMP);
25930     +
25931     +***  Effect: TextTopic_raw4 ;
MPRINT(EM_DIAGRAM):   *** Effect: TextTopic_raw4 ;
25932     +_TEMP = TextTopic_raw4 ;
MPRINT(EM_DIAGRAM):   _TEMP = TextTopic_raw4 ;
25933     +_LP0 = _LP0 + (     3.2160144344961 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.2160144344961 * _TEMP);
25934     +
25935     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
25936     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
25937     +_TEMP =    -0.61739244071281 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.61739244071281 + _LP0;
25938     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
25939     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
25940     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
25941     +end;
MPRINT(EM_DIAGRAM):   end;
25942     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
25943     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
25944     +
25945     +REGDR1:
25946     +
25947     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
25948     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
25949     +   R_SubroFlag1 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = .;
25950     +   R_SubroFlag0 = .;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = .;
25951     +end;
MPRINT(EM_DIAGRAM):   end;
25952     +else do;
MPRINT(EM_DIAGRAM):   else do;
25953     +    label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag1 = 'Residual: SubroFlag=1' ;
25954     +    label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label R_SubroFlag0 = 'Residual: SubroFlag=0' ;
25955     +   R_SubroFlag1 = - _P0;
MPRINT(EM_DIAGRAM):   R_SubroFlag1 = - _P0;
25956     +   R_SubroFlag0 = - _P1;
MPRINT(EM_DIAGRAM):   R_SubroFlag0 = - _P1;
25957     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
25958     +      when (0)  R_SubroFlag1 = R_SubroFlag1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_SubroFlag1 = R_SubroFlag1 + 1;
25959     +      when (1)  R_SubroFlag0 = R_SubroFlag0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_SubroFlag0 = R_SubroFlag0 + 1;
25960     +   end;
MPRINT(EM_DIAGRAM):   end;
25961     +end;
MPRINT(EM_DIAGRAM):   end;
25962     +
25963     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
25964     +label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag1 = 'Predicted: SubroFlag=1' ;
25965     +label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
MPRINT(EM_DIAGRAM):   label P_SubroFlag0 = 'Predicted: SubroFlag=0' ;
25966     +P_SubroFlag1 = _P0;
MPRINT(EM_DIAGRAM):   P_SubroFlag1 = _P0;
25967     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
25968     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
25969     +P_SubroFlag0 = _P1;
MPRINT(EM_DIAGRAM):   P_SubroFlag0 = _P1;
25970     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
25971     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
25972     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
25973     +end;
MPRINT(EM_DIAGRAM):   end;
25974     +I_SubroFlag = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_SubroFlag = REGDRF[_IY];
25975     +U_SubroFlag = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_SubroFlag = REGDRU[_IY];
25976     +
25977     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25978     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
25979     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25980      run;

NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
25981      quit;
25982      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25983      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25984      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
25985      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M23OWF59 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23OWF59;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M23OWF59(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23OWF59;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M23OWF59;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3EGUJHZ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Y9XVT5(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   set WORK.M3EGUJHZ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.TextTopic_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.TextTopic_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("P_SUBROFLAG0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_SUBROFLAG0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("F_SUBROFLAG") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("I_SUBROFLAG") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("U_SUBROFLAG") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("SUBROFLAG") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'TEXTCLUSTER_SVD1' 'TEXTCLUSTER_SVD3' 'TEXTTOPIC_RAW3' 'TEXTTOPIC_RAW4' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
26350      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
26351      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
26352      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
26353      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

26354      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
26355      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
26356      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
26357      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
26361      run;
26362      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
26363      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
26364      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

26365      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
26366      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26367      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

26368      proc sort data = EMWS1.TextTopic_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.TextTopic_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
26369      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26370      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.TEXTTOPIC_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

26371      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
26372      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26373      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

26374      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
26375      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
26376      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26377      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

26378      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
26379      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
26380      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
26381      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

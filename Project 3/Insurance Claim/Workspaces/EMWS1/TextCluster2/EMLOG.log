*------------------------------------------------------------*
User:                Gaurav
Date:                April 27, 2017
Time:                12:38:45
Site:                70125477
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:38:30" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 27, 2017
Time:                12:38:30
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O35IYD52 "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O35IYD52 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:38:30" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70125477";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:38:30" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Gaurav";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
32393      proc freq data=EMWS1.TextCluster2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.TextCluster2_VariableSet noprint;
32394      table ROLE*LEVEL/out=WORK.TextCluster2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TextCluster2META;
32395      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TEXTCLUSTER2_VARIABLESET.
NOTE: The data set WORK.TEXTCLUSTER2META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.06 seconds
 
 
32396      proc print data=WORK.TextCluster2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TextCluster2META label noobs;
32397      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
32398      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
32399      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
32400      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
32401      run;
 
NOTE: There were 2 observations read from the data set WORK.TEXTCLUSTER2META.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
32402      title10;
MPRINT(EM_DIAGRAM):   title10;
32403      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Insurance Claim';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.TextFilter_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32728      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32729      * TextCluster2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * TextCluster2: Generation of macros and macro variables;
32730      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
32731      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
32732      %let EMEXCEPTIONSTRING=;
32733      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32734      * TRAIN: TextCluster2;
MPRINT(EM_DIAGRAM):   * TRAIN: TextCluster2;
32735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32736      %let EM_ACTION = TRAIN;
32737      %let syscc = 0;
32738      %macro main();
32739
32740         %if %upcase(&EM_ACTION) eq CREATE %then %do;
32741            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
32742            %include temp;
32743            %create();
32744         %end;
32745         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
32746            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
32747            %include temp;
32748            %train();
32749         %end;
32750         %if %upcase(&EM_ACTION) eq REPORT %then %do;
32751            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
32752            %include temp;
32753            %report();
32754         %end;
32755         %if %upcase(&EM_ACTION) eq SCORE %then %do;
32756            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
32757            %include temp;
32758            %score();
32759         %end;
32760      %mend main;
32761
32762      %main();
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_TRAIN.SOURCE.
32763     +%macro train();
32764     +
32765     +    %global last_parse_node last_filter_node last_prescore_node server_err
32766     +      parsevar EM_SASMSG;
32767     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
32768     +    %let EM_SASMSG=TMINE;
32769     +    %let syscc=0;
32770     +
32771     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
32772     +    %include temp;
32773     +    filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
32774     +    %include temp;
32775     +    filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
32776     +    %include temp;
32777     +    filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
32778     +    %include temp;
32779     +    filename temp;
32780     +
32781     +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
32782     +                        em_variableset=&em_data_variableset);
32783     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_train;
32784     +    %let lastparsenode=&last_parse_node;
32785     +    %let lastfilternode=&last_filter_node;
32786     +    %let lastprescore=&last_prescore_node;
32787     +    %if &lastfilternode=&lastparsenode %then %do;
32788     +        %let EMEXCEPTIONSTRING = EMTOOL.NOFILTERNODE;
32789     +        %goto end_cluster_train;
32790     +    %end;
32791     +
32792     +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
32793     +    %em_getname(key=last_tm_nodes, type=data);
32794     +    data &em_user_last_tm_nodes;
32795     +        set &EM_IMPORT_DATA_EMINFO;
32796     +    run;
32797     +
32798     +
32799     +    %em_getname(key=tmconfig, type=data);
32800     +    %em_getname(key=terms, type=data);
32801     +    %em_getname(key=docs, type=data);
32802     +    %em_getname(key=clusters, type=data);
32803     +    %em_getname(key=graph_table, type=data);
32804     +    %em_getname(key=svd_u, type=data);
32805     +    %em_getname(key=tmconfig, type=data);
32806     +    %em_getname(key=svd_s, type=data);
32807     +    %em_getname(key=emoutstat, type=data);
32808     +    %em_getname(key=hierds, type=data);
32809     +
32810     +
32811     +
32812     +    /* get target variable info */
32813     +    %let targetvar = ;
32814     +    data _null_;
32815     +       set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
32816     +                                       and LEVEL ne 'INTERVAL'));
32817     +       if _N_=1 then call symput('targetvar', strip(NAME));
32818     +    run;
32819     +
32820     +
32821     +
32822     +    /* set up terms strings and initial config table */
32823     +    proc sql noprint;
32824     +      create table &EM_USER_tmconfig as
32825     +         select *
32826     +         from &EM_LIB..&last_filter_node._tmconfig;
32827     +    quit;
32828     +
32829     +
32830     +    proc sql noprint;
32831     +       select  cellwgt into: _cellweight
32832     +       from &em_user_tmconfig;
32833     +       select termwgt into: _termwgt
32834     +       from &em_user_tmconfig;
32835     +    quit;
32836     +
32837     +    data _keepdocs (keep=_DOCUMENT_ %if &targetvar ne %then &targetvar; );
32838     +        set &EM_IMPORT_DATA;
32839     +    run;
32840     +
32841     +    %tm_apply_tmutil(data=&EM_LIB..&last_filter_node._tmout,
32842     +                       terms=&EM_LIB..&last_filter_node._terms,
32843     +                       docs=&EM_IMPORT_DATA,
32844     +                       keepdocs=_keepdocs,
32845     +                       reduceF=2,
32846     +                       termweight=&_termwgt,
32847     +                       cellweight=&_cellweight,
32848     +                       outdata=_outtmutil_,
32849     +                       outterms=_newkey,
32850     +                       outweights=_weights,
32851     +                       targetvar=&targetvar,
32852     +                       memloc=_tmmem);
32853     +
32854     +                       /* get the svd dimensions on the documents */
32855     +    %tm_svd_do_samp(data=_outtmutil_,docs=_keepdocs, maxK=&em_property_maxK, res=&em_property_resolution,cellwgt=&_cellweight,in_global=_weights,
32856     +                     rowVar=_termnum_,colVar=_document_,entryVar=_count_,u=&EM_USER_SVD_U,v=_svdv,s=&EM_USER_svd_S,
32857     +                     colpro=_svdcolpro,rowpro=_svdrowpro, normcol=normcol, normrow=normrow,prefix=&EM_NODEID);
32858     +
32859     +    %if(&syscc >4 ) %then %do;
32860     +        %goto end_cluster_train;
32861     +    %end;
32862     +
32863     +    proc sql noprint;
32864     +       create table &EM_USER_TERMS(drop=index) as
32865     +       select a.*,b.*
32866     +       from &EM_LIB..&last_filter_node._terms a left join _svdrowpro b
32867     +       on a.key = b.index;
32868     +    quit;
32869     +
32870     +    %tm_cluster(data=&EM_LIB..&last_filter_node._tmout,
32871     +        terms=&EM_LIB..&last_filter_node._terms,
32872     +        docs=&EM_IMPORT_DATA,
32873     +        svdColPro=_svdcolpro,
32874     +        maxNumTerms=&em_property_ndescterms,
32875     +        numClus=&em_property_nclusters,
32876     +        numType=&em_property_exactormaximum,
32877     +        algorithm=&em_property_algorithm,
32878     +        outdocs=&EM_USER_DOCS,
32879     +        outclusters=&EM_USER_CLUSTERS,
32880     +        hierds=&EM_USER_HIERDS,
32881     +        emoutstat=&EM_USER_emoutstat,
32882     +        prefixstring= &EM_NODEID);
32883     +
32884     +    %if &emexceptionstring ne %then %goto end_cluster_train;
32885     +
32886     +    %if &em_property_algorithm=2.0 %then %do;
32887     +
32888     +        data &em_user_hierds(drop=plus);
32889     +            set &em_user_hierds;
32890     +            plus='';
32891     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
32892     +            graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
32893     +        run;
32894     +    %end;
32895     +
32896     +
32897     +    * add the info to EMINFO to forward on to other nodes ;
32898     +   data &EM_DATA_EMINFO;
32899     +      length TARGET KEY $32 DATA $43;
32900     +
32901     +      key="LastTMNode";
32902     +      data="&EM_NODEID";
32903     +      output;
32904     +
32905     +      key="LastTMNodeType";
32906     +      data="TextCluster";
32907     +      output;
32908     +
32909     +      key="LastTextCluster";
32910     +      data="&EM_NODEID";
32911     +      output;
32912     +
32913     +      key="PRESCORECODE";
32914     +      data="&EM_NODEID";
32915     +      output;
32916     +   run;
32917     +
32918     +    proc sql noprint;
32919     +        select count(*) into :svdkeep
32920     +            from &em_user_svd_s
32921     +            where keep=1;
32922     +        select count(*) into :cluscnt
32923     +            from &em_user_clusters;
32924     +    quit;
32925     +   data &EM_USER_tmconfig;
32926     +         set &EM_USER_TMCONFIG;
32927     +         clus_alg = "&em_property_algorithm";
32928     +         maxsvd = &em_property_maxk;
32929     +         svdkeep=&svdkeep;
32930     +         last_prescore = "&last_prescore_node";
32931     +      run;
32932     +
32933     +    %em_metachange(name=&EM_NODEID._CLUSTER_, role=SEGMENT, level=NOMINAL);
32934     +    %do i=1 %to &svdkeep;
32935     +         %em_metachange(name=&EM_NODEID._SVD&i, role=INPUT, level=INTERVAL);
32936     +    %end;
32937     +    %do i=1 %to &cluscnt;
32938     +         %em_metachange(name=&EM_NODEID._PROB&i, role=REJECTED);
32939     +    %end;
32940     +
32941     +%end_cluster_train:
32942     +    filename temp;
32943     +    %if &tm_debug =0 %then %do;
32944     +        proc sql noprint;
32945     +              drop table _svdcolpro;
32946     +              drop table _svdrowpro;
32947     +              drop table _newkey ;
32948     +              drop table _keepdocs ;
32949     +        quit;
32950     +    %end;
32951     +
32952     +%mend train;
32953     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
32954     +/* ****************************************************************
32955     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
32956     + *
32957     + * Name:             tm_get_last_filter.sas
32958     + * Product:          SAS Text Miner
32959     + * Language:         Sas
32960     + * Script:
32961     + *
32962     + * Usage:
32963     + *
32964     + * Purpose:  macro to get the last filter node and the last parse node in the
32965     + *   diagram that corresponds to the current parse variable.  If there is no filter
32966     + *   node, the filter node is set to the last parse node.
32967     + *
32968     + *
32969     + *
32970     + * History:
32971     + * 14Aug09 Initial Coding
32972     + *
32973     + * Notes:
32974     + *    Returns an error in the following cases:
32975     + *      1. There is no preceding parse node.
32976     + *      2. There is no parse node with the current parse variable.
32977     + *
32978     + * Last Modified By:
32979     + * Last Modified On: Wed Sep 23 15:35:04 2009
32980     + *
32981     + * End
32982     + * ************************************************************** */
32983     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
32984     +   %let last_parse_node=;
32985     +   %let last_filter_node=;
32986     +   %let last_prescore_node=;
32987     +   %let server_err=;
32988     +   %let EMEXCEPTIONSTRING=;
32989     +   %let syscc=0;
32990     +
32991     +    /* verify that setinit for SAS Text Miner is currently active */
32992     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
32993     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
32994     +        %goto end_macro;
32995     +        %end;
32996     +
32997     +
32998     +    * find last filter or text parse node if no filter node. ;
32999     +   %if %sysfunc(exist(&eminfo)) %then %do;
33000     +      proc sql noprint;
33001     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
33002     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
33003     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
33004     +      quit;
33005     +
33006     +   %end;
33007     +
33008     +   %if &last_parse_node= %then %do;
33009     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
33010     +      %goto end_macro;
33011     +      %end;
33012     +
33013     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
33014     +   %else %let last_filter_node = %ktrim(&last_filter_node);
33015     +   %let last_parse_node = %ktrim(&last_parse_node);
33016     +
33017     +   * Check to make sure parse variable is present and still exists;
33018     +   %let parsevar = ;
33019     +   proc sql noprint;
33020     +    select parsevar into :parsevar
33021     +    from &em_lib..&last_filter_node._tmconfig;
33022     +    quit;
33023     +
33024     +    *check for dropped parsevar on input dataset;
33025     +       %let parsevarOK= ;
33026     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
33027     +       data _null_;
33028     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
33029     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
33030     +         run;
33031     +       %if(&parsevarOK eq ) %then %do;
33032     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
33033     +          %goto end_macro;
33034     +          %end;
33035     +%end_macro:
33036     +
33037     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_CLUSTER.SOURCE.
33039     +   /* ****************************************************************
33040     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33041     + *
33042     + * Name:             tm_cluster.sas
33043     + * Support:          rualbr Russell Albright
33044     + * Product:
33045     + * Language:         Sas
33046     + * Script:
33047     + *
33048     + * Usage:
33050     + !Inputs into %tm_train_cluster
33051     + * doc = doc datset from a tm node
33052     + * data =  out datset from a tm node
33053     + * terms = terms dataset from  tm node
33054     + * svdcolpro = column projections data set
33055     + * cellweight setting
33056     + * termweight setting
33057     + * maxSvddim = Maximum number of dimension to calculate
33058     + * svdres= <HIGH, MED, or LOW>
33059     + * maxNumTerms - maximum number of term to use for descriptive terms
33060     + * numClus = number of clusters to use
33061     + * numType=<MAXIMUM or EXACT> Max means that <= maximum will actually be used.
33062     + * threads = the number of threads you would like emclus to use
33065     + !Outputs from %tm_train_cluster
33066     + * outdocs - a doc table with the cluster restults on it.
33067     + * outclusters- an output cluster table with the descriptive terms on it (future story)
33068     + *
33069     + * Example call
33070     + *
33071     + *%tm_cluster(data=tmn.text_out_t,
33072     + *             terms=tmn.terms,
33073     + *             docs=testdata._train,
33074     + *             svdcolpro=tmn._svdcolpro,
33075     + *             maxNumTerms=5,
33076     + *             numClus=40,
33077     + *             numType=MAXIMUM,
33078     + *             outdocs=docsresult,
33079     + *             hierds=_hierds,
33080     + *             emoutstat=_emoutstat,
33081     + *             outclusters= clusterResult);
33082     + *
33083     + *
33084     + * Purpose: Perform the clustering on out,term, doc from parse or filter node
33085     + *
33086     + * History:
33087     + *
33088     + *
33089     + * Notes:
33090     + *
33091     + * Last Modified By:
33092     + * Last Modified On: Thu Jan 08 17:22:43 2009
33093     + *
33094     + * End
33095     + * ************************************************************** */
33097     +%macro tm_cluster(data=,
33098     +                     terms=,
33099     +                     docs=,
33100     +                     svdColPro=,
33101     +                     maxNumTerms=,
33102     +                     numClus=,
33103     +                     numType=MAXIMUM,
33104     +                     algorithm=,
33105     +                     outdocs=,
33106     +                     hierds=_hierds,
33107     +                     emoutstat=_emoutstat,
33108     +                     outclusters=,
33109     +                     prefixString=,
33110     +                     threads=);
33113     +    %local _cleanedout ;
33114     +    %local _numRepDocs;
33115     +    %global systmutil;
33116     +    %let systmutil = ;
33117     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
33119     +    filename temp catalog 'sashelp.emtext.tmgetncl.source';
33120     +    %include temp;
33121     +    filename temp catalog 'sashelp.emtext.tmfast.source';
33122     +    %include temp;
33124     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
33125     +    %include temp;
33127     +    filename temp catalog 'sashelp.emtext.tmpred.source';
33128     +    %include temp;
33130     +    filename temp catalog 'sashelp.emtext.tmsort.source';
33131     +    %include temp;
33133     +    %let tmdata=&data;
33134     +    %let tmterms=&terms;
33135     +    %let tmdocs=&docs;
33136     +    %let emexceptionstring=;
33139     +    /* check some basic size requirements to proceed.*/
33140     +    proc sql noprint;
33141     +       select count(*) into: numTerms
33142     +       from &terms a
33143     +       where a.numdocs>=2 and _ispar in('+',' ')
33144     +       ;
33145     +       select count (*) into: numdocs
33146     +       from &docs a;
33147     +    quit;
33149     +    %if (&numterms < 10)  OR (&numdocs< 8) %then %do;
33150     +        %let emexceptionstring=EMTOOL.INSUFFICIENTDATA;
33151     +        %goto end_train_cluster;
33152     +    %end;
33154     +    /* Get number of kept svd variables */
33155     +    %let pid = %sysfunc(open(&svdcolpro));
33156     +    %let svdkeep=%eval(%sysfunc(attrn(&pid,nvars))-1);
33157     +    %let rc = %sysfunc(close(&pid));
33160     +   /************************ Find clusters *************************************/
33162     +   %if %upcase(&numType) = MAXIMUM %then %do;   /* numClus = MAXIMUM */
33164     +      /* Call tmgetncl to find the recommended number of clusters. */
33166     +      %tmGetNcl(data=&svdcolpro,
33167     +               maxclusters=&numClus,
33168     +               vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
33169     +               tempDS=_clusTemp1,
33170     +               clusDS=_clusTemp,
33171     +               threads=
33172     +            );
33174     +      /* error returned in above macro */
33175     +      %if (&syscc >4 ) %then %do;
33176     +         %let emexceptionstring= &SYSERRORTEXT;
33177     +         %goto end_train_cluster;
33178     +      %end;
33180     +      /* Store the recommended number into a macro variable. */
33182     +      proc sql noprint;
33183     +         select max(nclus) into: numClus
33184     +         from _clusTemp
33185     +         ;
33186     +      quit;
33189     +      %if not (&numClus > 1) %then %do;
33190     +        %let numClus = 2;
33191     +      %end;
33194     +       %if &tm_debug =0  %then %do;
33195     +          proc sql nowarn noprint;
33196     +              drop table _clustemp;
33197     +              drop table _clustemp1;
33198     +           quit;
33199     +       %end;
33201     +   %end;  /* &numtype = MAXIMUM */
33203     +   %else  %do;
33204     +       %let numClus = %left(&numClus);/*&numtype=EXACT*/
33205     +   %end;
33207     +    proc sql noprint;
33208     +        select count(*) into: nobs
33209     +        from &svdcolpro;
33210     +    quit;
33212     +   %if %left(&algorithm)=2.0 %then %do; /* Hierarchical clustering */
33213     +        filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
33214     +        %include temp;
33216     +        filename temp catalog 'sashelp.emtext.tmhclus.source';
33217     +        %include temp;
33218     +        filename temp catalog 'sashelp.emtext.tmtree.source';
33219     +        %include temp;
33221     +        %if &nobs < &numClus and  %upcase(&numType) = EXACT %then %do;
33222     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
33223     +            %goto end_train_cluster;
33224     +        %end;
33226     +        %tmgethclus(outtree=_outtree,
33227     +                    idvar=index,
33228     +                    inDS=&svdcolpro,
33229     +                    outDS=&outdocs,
33230     +                    fastOut=_fastclusstat,
33231     +                    textClusDS=_clusstat,
33232     +                    vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
33233     +                    nobs=&nobs,
33234     +                    nclus=&numClus,
33235     +                    hierds=&hierds,
33236     +                    svdkeep=&svdkeep,
33237     +                    prefix=&prefixString);
33238     +        %if &EMEXCEPTIONSTRING ne %then %goto end_train_cluster;
33240     +        data _clusstat;
33241     +            set _clusstat(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep.=_mean1-_mean&svdkeep.));
33242     +        run;
33244     +        data _clustermean;
33245     +          set _clusstat(keep=_cluster_ _mean1-_mean&svdkeep. rename=(_cluster_=cluster));
33246     +        run;
33248     +        proc sql noprint;
33249     +            drop table _outtree;
33250     +        quit;
33251     +   %end;
33252     +   %else %do; /* Expectation-maximization */
33253     +       /* Call %anl_tmfast to create cluster stat data set that will be used as an input for %anl_tmemclus. */
33254     +          %tmFast(data=&svdcolpro,
33255     +             clusters=&numClus,
33256     +             outstat=_fastclusstat,
33257     +             outseed=,
33258     +                id=,
33259     +             out=,
33260     +             vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep)
33261     +             );
33262     +          run;
33264     +          /* If some of the clusters are too small (frequency less than 5) and &g_numClusFlag=MAXIMUM, */
33265     +          /* reassign value for &cluster macro var from WORK.&s_reportID._fastclusstat data set. */
33267     +       %if %upcase(&numType) = MAXIMUM %then
33268     +       %do;   /* &ClusType = MAXIMUM */
33270     +          proc sql noprint;
33271     +             select max(CLUSTER) into :numClus
33272     +             from _fastclusstat
33273     +             where upcase(_TYPE_)='SEED'
33274     +             ;
33275     +          quit;
33277     +          %let numClus = %left(&numClus);
33279     +       %end;  /* &ClusType = MAXIMUM */
33280     +       %else %do; /* &ClusType = EXACT */
33281     +          %if &nobs < &numClus %then %do;
33282     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
33283     +            %goto end_train_cluster;
33284     +          %end;
33285     +       %end;
33287     +       %tmEMClus(data=&svdcolpro,
33288     +                role=TRAIN,
33289     +                clusters=&numClus,
33290     +                seed=_fastclusstat,
33291     +                outstat=&emoutstat,
33292     +                out=_tmutildoc,
33293     +                vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
33294     +                cov=,
33295     +                iter=5,
33296     +                secclus=,
33297     +                seciter=,
33298     +                min=,
33299     +                method=,
33300     +                eps=.1,
33301     +                init=FASTCLUS,
33302     +                print=NONE,
33303     +                p=,
33304     +                outliers=,
33305     +                decvar=0,
33306     +                initstd=,
33307     +                dist=,
33308     +                secstd=,
33309     +                nobs=,
33310     +                threads=&threads.
33311     +             );
33312     +       run;
33315     +       /* Run %anl_tmpred macro to assign documents to clusters with the largest posterior probability */
33316     +       /* and to calculate cluster frequency. */
33318     +       %tmPred (inds=_tmutildoc,
33319     +                outds=&outdocs,
33320     +              clusters=&numClus,
33321     +              type=max,
33322     +              freqds=_clusstat,
33323     +              compress=1
33324     +              );
33325     +        data &outdocs;
33326     +           set &outdocs;
33327     +           rename prob1-prob&numClus = &prefixString._prob1-&prefixString._prob&numclus;
33328     +        run;
33332     +       /* Transpose the output data set to contain cluster ID and cluster frequency. */
33334     +        data _clusstat;
33335     +            array c(&numClus) _c1-_c&numClus;
33336     +            set _clusstat;
33337     +            /*keep _CLUSTER_ Freq;*/
33338     +            totalobs=0;
33339     +            do _CLUSTER_ = 1 to &numClus;
33340     +                Freq = c(_CLUSTER_);
33341     +                totalobs=totalobs+c(_CLUSTER_);
33342     +                output;
33343     +            end;
33344     +            call symput ('totNumDocs', totalobs);
33345     +        run;
33347     +       %if &totNumDocs = 0 %then
33348     +       %do;   /*&totNumDocs = 0 */
33349     +           goto end_train_cluster;
33350     +       %end; /*&totNumDocs = 0 */
33352     +       /* Calculate cluster percentage. */
33353     +       data _clusstat;
33354     +          set _clusstat;
33355     +          Percent = Freq/&totNumDocs;
33356     +       run;
33358     +       data _clustermean(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep. = _mean1-_mean&svdkeep.));
33359     +          set &emoutstat(keep=cluster _TYPE_ &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.);
33360     +          if _TYPE_ = "MEAN";
33361     +            keep cluster &prefixstring._SVD1 - &prefixstring._SVD&svdkeep. ;
33362     +      run;
33363     +  %end;
33365     +      proc sql;
33366     +      create table _meandocs(drop=cluster) as
33367     +      select a.*, b.*
33368     +      from &outdocs a left join _clustermean b
33369     +      on a._cluster_=b.cluster
33370     +      ;
33371     +      quit;
33372     +       /*calulate residual for each doc */
33373     +      data _rmscalc;
33374     +          merge _meandocs(in=inhere) _clusstat;
33375     +          array _means(&svdkeep) _mean1-_mean&svdkeep.;
33376     +          array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
33377     +          by _cluster_;
33378     +          error=0;
33379     +          do i = 1 to &svdkeep;
33380     +             error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
33381     +          end;
33382     +         /*error=sqrt(error);*/
33383     +          drop i;
33384     +       run;
33385     +    /*calc standardized residual for clusters*/
33386     +       proc summary data=_rmscalc nway;
33387     +          class _cluster_;
33388     +          var error;
33389     +          output out=_meanerr mean=meane sum=sume;
33390     +       run;
33392     +       data _rmsse;
33393     +          set _meanerr;
33394     +          /* original code divides by number of svd dims*/
33395     +          if _freq_ gt 1 then do;
33396     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
33397     +          end;
33398     +          else do;
33399     +              _rmsstd_=0;
33400     +          end;
33401     +          keep _cluster_  _rmsstd_;
33402     +       run;
33405     +       proc sql;
33406     +           create table _clusstat2(drop=cluster) as
33407     +           select a.*,b.*
33408     +           from _clustermean a left join _rmsse b
33409     +           on a.cluster=b._cluster_;
33411     +           create table &outclusters as
33412     +           select  a.*, b.freq, b.percent
33413     +           from _clusstat2(keep=_cluster_ %str(_mean1-_mean&svdkeep) _rmsstd_) a right join _clusstat b
33414     +           on a._cluster_=b._cluster_
33415     +           where b.freq>0 ;
33416     +       quit;
33419     +    filename temp catalog 'sashelp.emtext.tmterm1.source';
33420     +    %include temp / nosource2;
33422     +   /****************** Find descriptive terms for clusters ***************************/
33425     +   /* Add _term_ variable to WORK._terms data set to prepare it as an
33426     +   /* input to %tmterm1 macro. The variable is added from &EM_LIB..&last_filter_node._terms data set. */
33428     +   proc sort data=&tmterms out=_terms_;
33429     +        by key _ispar;
33430     +   run;
33432     +   data _terms_;
33433     +       set _terms_;
33434     +       by key _ispar;
33435     +       if first.key then
33436     +          output;
33437     +       else;
33438     +   run;
33440     +    /* Concatenate + to terms */
33441     +    data _terms_;
33442     +        set _terms_;
33443     +        if _ispar='+' then
33444     +            Term=_ispar || ' ' || term;
33445     +    run;
33447     +   %tmsort(data=&tmdata,
33448     +         out=_tmout_,
33449     +         by=_termnum_,
33450     +            options=,
33451     +         threads=threads);
33454     +   data _tmout_;
33455     +      merge _tmout_ (in=_A_)
33456     +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
33457     +      by _termnum_;
33458     +      if _A_;
33459     +   run;
33461     +   /* Create _segmnt_ variable in WORK._docs data set to prepare it to be an */
33462     +   /* input to %tmterm1 macro. Set it equal to _cluster_ variable. */
33464     +   %if &algorithm=2.0 %then %do;
33465     +        data _docs_;
33466     +            set &outdocs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
33467     +            _SEGMNT_=_finalcluster_;
33468     +        run;
33469     +        proc sql noprint;
33470     +            select max(_cluster_) into :numclus from &outclusters;
33471     +        quit;
33472     +   %end;
33473     +   %else %do;
33474     +       data _docs_;
33475     +        set &outdocs (rename=(index=_document_) keep=index _cluster_);
33476     +         _SEGMNT_=_cluster_;;
33477     +       run;
33479     +   %end;
33481     +   /* Run %tmterm1 macro to determine descriptive terms for clusters. */
33482     +   %tmterm1(DSN_TPARS=_tmout_,
33483     +        DSN_CLUS=_docs_,
33484     +        DSN_DESC=_desc_,
33485     +        N_DESC_TERMS=&maxnumterms,
33486     +        N_CLUS=&numclus,
33487     +        top_freq=%eval(&maxnumterms*2),
33488     +        key=);
33490     +    /* Add cluster descriptive terms to clusters table. */
33491     +   %tmsort(data=&outclusters,
33492     +         out=&outclusters,
33493     +         by=_cluster_,
33494     +            options=,
33495     +         threads=threads);
33497     +   %tmsort(data=_desc_,
33498     +         out=_desc_,
33499     +         by=_cluster_,
33500     +            options=,
33501     +         threads=threads);
33503     +   data _desc_;
33504     +      merge &outclusters _desc_;
33505     +      by _cluster_;
33506     +   run;
33508     +   %tmsort(data=_desc_,
33509     +         out=&outclusters,
33510     +         by=_cluster_,
33511     +            options=,
33512     +         threads=threads);
33514     +   %if &algorithm=2.0 %then %do;
33516     +        %tmsort(data=&HIERDS,
33517     +         out=&HIERDS,
33518     +         by=_cluster_,
33519     +            options=,
33520     +         threads=threads);
33522     +        data &HIERds;
33523     +            merge &outCLUSTERS &HIERds (keep=_cluster_ parent level in=P);
33524     +            by _cluster_;
33525     +            clust=_cluster_;
33526     +            drop _cluster_;
33527     +            if P;
33528     +        run;
33530     +        %let empty=1;
33532     +        /* Be sure that all parent clusters are on outclusters ds */
33533     +        proc sql noprint;
33534     +            create table &outclusters as
33535     +                select a._cluster_, b.* from &hierds (rename=(clust=_CLUSTER_)) a
33536     +                left join &outclusters b
33537     +                on a._cluster_=b._cluster_;
33538     +        quit;
33540     +        %do %while (&empty);
33541     +            proc sql noprint;
33542     +                update &outclusters set freq=
33543     +                    (select sum(freq) from &HIERDS
33544     +                    where parent=_cluster_), percent=
33545     +                    (select sum(percent) from &HIERDS
33546     +                    where parent=_cluster_)
33547     +                    where freq=. and _cluster_ not in
33548     +                    (select parent from &hierds where freq=.);
33549     +                select count(*) into :empty from &outclusters
33550     +                    where freq=.;
33551     +                update &hierds set freq=(select freq from &outclusters where _cluster_=clust);
33552     +            quit;
33553     +            data &HIERds;
33554     +                merge &OUTCLUSTERS &HIERds (
33555     +                    rename=(clust=_cluster_) keep=clust parent level in=P);
33556     +                by _cluster_;
33557     +                clust=_cluster_;
33558     +                drop _cluster_;
33559     +                if P;
33560     +            run;
33561     +        %end;
33563     +        data &hierds;
33564     +            set &hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
33565     +        run;
33566     +        data &outclusters;
33567     +            set &outclusters;
33568     +            if _rmsstd_ ne .;
33569     +        run;
33571     +        data &outdocs;
33572     +            set &outdocs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
33573     +            label _CLUSTER_=Cluster ID;
33574     +        run;
33576     +    %end;
33578     +   %end_train_cluster:
33580     +       filename temp;
33582     +       %if &tm_debug =0  %then %do;
33583     +          proc sql nowarn noprint;
33584     +              drop table _clusstat;
33585     +              drop table _clusstat2;
33586     +              drop table _fastclusstat;
33587     +              drop table _clustermean;
33588     +              drop table _meandocs;
33589     +              drop table _rmscalc;
33590     +              drop table _rmsse;
33591     +              drop table _meanerr;
33592     +              drop table _tmutildoc;
33593     +              drop table _desc_;
33594     +              drop table _terms_;
33595     +              drop table _docs_;
33596     +              drop table _tmout_;
33597     +           quit;
33598     +       %end;
33601     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_APPLY_TMUTIL.SOURCE.
33603     + /*****************************************************************
33604     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33605     + *
33606     + * Name:             tm_apply_tmutil.sas
33607     + * Support:          rualbr Russell Albright
33608     + * Product:
33609     + * Language:         Sas
33610     + * Script:
33611     + *
33612     + * Usage:
33613     + *
33614     + * data= out data set from tgparse
33615     + * terms= terms from tgparse
33616     + * offsets=  addoffset data set form tgparse
33617     + * docs=  data set of document id's and potentially target, not required unless target weighting is used.
33618     + * keepdocs= list of docs to keep. This is a subset of the original docs data set. Not required.
33619     + * reduceF=defaults to log(n) if not specified, eliminates terms if not in at least that many docs
33620     + *     use reduceF=1 to retain all terms.
33621     + * termweight= none, entropy, mi,
33622     + * cellweight= none, log, bin,
33623     + * synnum= Input synonym data set of _termnum_, parent ID pairs
33624     + * synchar= Input synonym data set of term,termrole, parent, parentrole. This data set will
33625     + * get converted to synnym format by the macro tm_convert_syns.
33626     + * targetvar= name of variable on doc dataset contining targetvar.
33627     + * outdata= output out dataset with no more children on this dataset
33628     + * outterms= output terms dataset with dup terms eliminated
33629     + * outweights= weight vector for the terms
33630     + * outoffsets= subsetted outtable with childterms replaced with parents
33631     + * applyweight = , indicates if the weight settings are to be applied to the output OUT table. 0 no, 1 yes.
33632     + * memloc= string for tmutil to use to store its memory pointer. Normally the default can just be used.
33633     + * keeponly=Y  If set to Y (default), then only kept terms are output in terms table.
33634     + *
33635     + * Purpose: Massage the out and key from docparse so that they can bes used
33636     + * in data mining applications.
33637     + *
33638     + * History:
33639     + *
33640     + * Notes:
33641     + *
33642     + * Last Modified By:
33643     + * Last Modified On: Tue Mar 05 16:32:57 2013
33644     + *
33645     + * End
33646     + * ************************************************************** */
33649     +%macro tm_apply_tmutil(data=, terms=,docs=,offsets=,keepdocs=,termweight=none,
33650     +                            cellweight=none,reduceF=,outdata=,outterms=,outweights=,
33651     +                            outoffsets=, synnum=,synchar=, targetvar=, applyweight = 0,
33652     +                            memloc=tmutil_loc,keeponly=Y,repOnly=N);
33653     +     %local keepdocs tempF reduceF synnum  terms  paraExist sentExist;
33656     +    %let EMEXCEPTIONSTRING=;
33657     +    %let syscc=0;
33658     +    %let systmutil=0;
33662     +    /* Find terms to drop */
33663     +        %if &keepdocs ne %then %do;
33664     +          proc sql noprint;
33665     +                create view _keepdata as
33666     +                select * from &data where _DOCUMENT_ in
33667     +                (select _DOCUMENT_ from &keepdocs);
33668     +          quit;
33669     +        %end;
33670     +          %else %do;
33672     +             proc sql noprint;
33673     +                 create view _keepdata as
33674     +                 select * from &data;
33675     +             quit;
33677     +           %let keepdocs=&docs;
33678     +        %end;
33681     +    /* set default on reduceF*/
33682     +         %if &reduceF = %then %do;
33683     +            proc sql noprint;
33684     +           select count(*) into :numdocs from &docs;
33685     +        quit;
33686     +        %let tempF = %sysfunc(log10(%eval(&numdocs+1)));
33687     +        %let reduceF= %sysfunc(floor(&tempF));
33688     +         %end;
33691     +    /* find synnum if synchar supplied */
33693     +    %if &synchar ne %then %do;
33694     +            filename temp catalog 'sashelp.emtxtext.tm_convert_syns.source';
33695     +            %include temp;
33696     +            %tm_convert_syns(insyns= &synchar, outsyns=_myOutsyns ,
33697     +                         interms=&terms,
33698     +                          outterms=newterms );
33699     +                %let numsyns=0;
33700     +                proc sql;
33701     +                   select count(*) into: numsyns
33702     +                   from _myOutsyns;
33703     +                quit;
33704     +                %if &numsyns >0 %then %do;
33705     +                   %Let synnum=_myOutsyns;
33706     +                   %let terms=newterms;
33707     +                %end;
33708     +    %end;
33709     +    /* get the out and key in the proper format*/
33710     +    proc tmutil data=_keepdata key= &terms doc=&keepdocs
33711     +        %if &targetvar ne %then target=&targetvar;
33712     +        ;
33713     +        control init memloc="&memloc";
33714     +            %if &synnum ne %then syn syndata=&synnum force;
33715     +         ;
33716     +    run;
33717     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
33718     +    %if &reduceF>1 %then %do;
33719     +           proc tmutil;
33720     +           control memloc="&memloc";
33721     +               select reduceF=&reduceF;
33722     +        run;
33723     +   %end;
33724     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
33726     +     proc tmutil;
33727     +        control memloc="&memloc" release;
33728     +        weight termwgt=&termweight cellwgt=&cellweight;
33729     +            output key=_termstmutil  keyformat=default
33730     +               %if &keeponly eq Y %then keeponly;
33731     +               %if &applyweight  eq 0 %then unweighted ;
33732     +               out=&outdata;
33733     +    run;
33734     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
33736     +    proc sql noprint;
33737     +           create table _distinctterms as
33738     +           select distinct key,term, role, attribute
33739     +           from &terms;
33741     +       create table &outterms as
33742     +       select  b.term, b.role,b.attribute ,a.*
33743     +       from _termstmutil a left join  _distinctterms b
33744     +       on a.key=b.key;
33745     +       ;
33746     +       %if &outweights ne %then %do;
33747     +          create table &outweights as
33748     +          select distinct a.key as index, a.weight as gwgt
33749     +          from &outterms(where=(_ispar in('+',' '))) a inner join
33750     +                         _distinctterms b
33751     +          on a.key =b.key;
33752     +       %end;
33754     +     quit;
33755     +     %if &offsets ne and &outoffsets ne %then %do;
33757     +        %let paraExist=0; %let sentExist=0;
33758     +        data _null_;
33759     +          dsid=open("&offsets");
33760     +          para=varnum(dsid,'_paragraph_');
33761     +          sent=varnum(dsid,'_sentence_');
33762     +          if para ge 1 then call symput('paraExist',1);
33763     +          if sent ge 1 then call symput('sentExist',1);
33764     +          run;
33767     +        proc sql noprint;
33768     +        create table &outoffsets as
33769     +           select  a._document_,
33770     +              %if &paraExist=1 %then a._paragraph_, ;
33771     +              %if &sentExist=1 %then a._sentence_,;
33772     +              a._offset_, a._length_, b.parent_id as _termnum_
33773     +                 from &offsets a, _termstmutil (where=(_ispar ne "+" and keep="Y")) b
33774     +                 where a._termnum_ = b.key;
33775     +              quit;
33776     +       %end;
33780     +     %end_tm_apply_tmutil:
33782     +     %if ^%symexist(tm_debug) %then %let tm_debug=0;
33783     +       %if &tm_debug =0  %then %do;
33784     +          proc sql noprint;
33785     +            drop table _termstmutil;
33786     +            drop table _distinctterms;
33787     +            drop view _keepdata;
33788     +            %if &synchar ne and &synnum ne  %then drop table &synnum; ;
33789     +         quit;
33790     +     %end;
33791     +     %if &syscc >4 and &systmutil > 4 %then %do;
33792     +           %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL,&systmutil;
33793     +           %put emexceptionstring= "&EMEXCEPTIONSTRING";
33794     +           %let syscc=0;
33795     +     %end;
33797     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_SVD_DO_SAMP.SOURCE.
33799     +   /* ****************************************************************
33800     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33801     + *
33802     + * Name:             tm_svd_do_samp.sas
33803     + * Product:
33804     + * Language:         Sas
33805     + * Script:
33806     + *
33807     + * Usage:
33808     + *
33809     + * data=out dataset containing only repreentative terms
33810     + * maxK= max number of dimensions to use to computer svd
33811     + * res=<high, med, low> guidenceon what number of dims to choose
33812     + * cellwgt= <none, log, binary>
33813     + * in_global= dataset with index, weight variables
33814     + * rowVar= name of the variable representing row(term)
33815     + * colVar= name of the variable representing col
33816     + * entryVar=count for row,col
33817     + * u= name of output u matrix
33818     + * v= name of output v matrix
33819     + * s= name of output s matrix
33820     + * colpro=dataset to hold projections for terms
33821     + * rowpro= datset to hold projections for docs
33822     + * normcol=<normcol> extra option to add to normalize docs
33823     + * normrow=<normrow> extra option to add to normalize terms
33824     + * docs =<document data set of ids that are being analyzed.
33825     +*      docs needs to be input explicit since some docs may have not terms
33826     + *
33827     + * Purpose: macro to run svd and compute projections, first without mpling
33828     + * and then with sampling onon.
33829     + *
33830     + * History:
33831     + *
33832     + * Notes:
33833     + *
33834     + * Last Modified By:
33835     + * Last Modified On: Thu Jan 08 17:22:43 2009
33836     + *
33837     + * End
33838     + * ************************************************************** */
33839     +%macro tm_svd_do_samp(data=,docs=,maxK=,res=,cellwgt=,in_global=,
33840     +                     rowVar=,colVar=,entryVar=,u=,v=,s=,
33841     +                     colpro=,rowpro=,normcol=, normrow=,prefix=SVD);
33843     +   %local svdkeep;
33844     +   %let syscc=0;
33845     +   proc sort data=&data; by _termnum_; run;
33847     +   proc spsvd data=&data max_k = &maxK res = &res
33848     +       local = &cellWgt global =none in_global = &in_global;
33849     +       row _termnum_;
33850     +       col _document_;
33851     +       entry _count_;
33852     +       output  u = &U v = &V s = &s;
33853     +   run;
33855     +   /*try sampling if out of memory occurred*/
33856     +   %if(&syscc eq 1111) %then %do;
33857     +      %let syscc=0; /*reset syscc*/
33858     +      proc spsvd data = &data max_k = &maxK res = &res
33859     +          local = &cellWgt global = none in_global = &in_global ;
33860     +          row &rowVar;
33861     +          col &colVar;
33862     +          entry &entryVar;
33863     +          output u = &U v = &V s = &s;
33864     +          sample allow;
33865     +      run;
33866     +   %end;
33867     +    %if &syscc > 4 %then %do;
33868     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
33869     +       %goto end_svd_do_samp;
33870     +    %end;
33873     +   /* if resolution is used, the matrix U/V must be truncated to the set number of dim.*/
33874     +   proc sql noprint;
33875     +       select count(*) into: svdkeep
33876     +       from &s
33877     +       where keep=1;
33878     +    quit;
33880     +    %let svdkeep=%left(&svdkeep);
33881     +    data &U;
33882     +    set &U(keep= index col1-col&svdkeep);
33883     +    run;
33885     +    data &V;
33886     +    set &V(keep= index col1-col&svdkeep);
33887     +    run;
33888     +    %if &colpro ne %then %do;
33889     +       /* when sampling weights may have wrong dimensions*/
33890     +       proc sql noprint;
33891     +          create table new_global as
33892     +             select a.*
33893     +             from &in_global a, &U b
33894     +             where a.index = b.index;
33895     +       quit;
33898     +        proc sort data=&data; by &colVar; run;
33899     +        proc spsvd data=&data IN_U=&U
33900     +            local = &cellWgt global = none in_global = new_global ;
33901     +            row &rowVar;
33902     +            col &colVar;
33903     +            entry &entryVar;
33904     +            output colpro=&colpro bigpro normcol prefix="&prefix._SVD";
33905     +        run;
33907     +        proc sort data=&docs(keep=_document_)  out=_docids;
33908     +        by _document_;
33909     +        run;
33911     +        data &colpro;
33912     +           merge &colpro _docids(rename=(_document_=index));
33913     +        by index;
33914     +        run;
33917     +        data &colpro;
33918     +          set  &colpro;
33919     +          array svd_array &prefix._SVD1 - &prefix._SVD&SVDKEEP;
33920     +          do i = 1 to dim(svd_array);
33921     +             if svd_array(i)=. then svd_array(i)=0;
33922     +          end;
33923     +          drop i;
33924     +        run;
33925     +    %end;
33927     +    %if &syscc > 4 %then %do;
33928     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
33929     +       %goto end_svd_do_samp;
33930     +    %end;
33932     +    %if &rowpro ne %then %do;
33933     +        proc sort data=&data; by &rowVar; run;
33934     +        /* when sampling weights may have wrong dimensions*/
33935     +       proc sql;
33936     +          create table new_global as
33937     +             select a.*
33938     +             from &in_global a, &U b
33939     +             where a.index = b.index;
33940     +       quit;
33942     +        proc spsvd data=&data IN_V=&V
33943     +            local = &cellWgt global = none in_global = new_global ;
33944     +            row &rowVar; col &colVar; entry &entryVar;
33945     +            output wordPro = &rowpro bigpro normrow prefix="&prefix._SVD";
33946     +        run;
33947     +    %end;
33949     +    %if &syscc > 4 %then %do;
33950     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
33951     +       %goto end_svd_do_samp;
33952     +    %end;
33954     +   %end_svd_do_samp:
33956     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS1.TextFilter_EMINFO where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS1.TextFilter_EMINFO where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS1.TextFilter_EMINFO where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS1.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS1.TextCluster2_VariableSet(where=(kupcase(NAME)="ADJUSTERNOTES" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER2_VARIABLESET.
      WHERE (KUPCASE(NAME)='ADJUSTERNOTES') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.TextCluster2_last_tm_nodes;
MPRINT(TRAIN):   set EMWS1.TextFilter_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TEXTFILTER_EMINFO.
NOTE: The data set EMWS1.TEXTCLUSTER2_LAST_TM_NODES has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.TextCluster2_VariableSet(where=(ROLE='TARGET' and USE in('Y' 'D') and LEVEL ne 'INTERVAL'));
MPRINT(TRAIN):   if _N_=1 then call symput('targetvar', strip(NAME));
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER2_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS1.TextCluster2_tmconfig as select * from EMWS1.TextFilter_tmconfig;
NOTE: Table EMWS1.TEXTCLUSTER2_TMCONFIG created, with 1 rows and 30 columns.
 
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select cellwgt into: _cellweight from EMWS1.TextCluster2_tmconfig;
MPRINT(TRAIN):   select termwgt into: _termwgt from EMWS1.TextCluster2_tmconfig;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data _keepdocs (keep=_DOCUMENT_ SubroFlag );
MPRINT(TRAIN):   set EMWS1.TextFilter_TRAIN;
MPRINT(TRAIN):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTPARSING_TRAIN.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_DOC_IDS.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_TRAIN.
NOTE: The data set WORK._KEEPDOCS has 302 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create view _keepdata as select * from EMWS1.TextFilter_tmout where _DOCUMENT_ in (select _DOCUMENT_ from _keepdocs);
NOTE: SQL view WORK._KEEPDATA has been defined.
MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_APPLY_TMUTIL):   proc tmutil data=_keepdata key= EMWS1.TextFilter_terms doc=_keepdocs target=SubroFlag ;
MPRINT(TM_APPLY_TMUTIL):   control init memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   run;
 
NOTE: There are 2 distinct target levels.
NOTE: There were 1658 observations read from the data set EMWS1.TEXTFILTER_TMOUT.
NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: There were 1658 observations read from the data set WORK._KEEPDATA.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   select reduceF=2;
MPRINT(TM_APPLY_TMUTIL):   run;
 
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem" release;
MPRINT(TM_APPLY_TMUTIL):   weight termwgt=MI cellwgt=LOG;
MPRINT(TM_APPLY_TMUTIL):   output key=_termstmutil keyformat=default keeponly unweighted out=_outtmutil_;
MPRINT(TM_APPLY_TMUTIL):   run;
 
NOTE: The data set WORK._TERMSTMUTIL has 421 observations and 8 variables.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create table _distinctterms as select distinct key,term, role, attribute from EMWS1.TextFilter_terms;
NOTE: Table WORK._DISTINCTTERMS created, with 323 rows and 4 columns.
 
MPRINT(TM_APPLY_TMUTIL):   create table _newkey as select b.term, b.role,b.attribute ,a.* from _termstmutil a left join _distinctterms b on a.key=b.key;
NOTE: Table WORK._NEWKEY created, with 421 rows and 11 columns.
 
MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   create table _weights as select distinct a.key as index, a.weight as gwgt from _newkey(where=(_ispar in('+',' '))) a inner join _distinctterms b on a.key =b.key;
NOTE: Table WORK._WEIGHTS created, with 184 rows and 2 columns.
 
MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ max_k = 10 res = HIGH local = LOG global =none in_global = _weights;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output u = EMWS1.TextCluster2_svd_u v = _svdv s = EMWS1.TextCluster2_svd_s;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: P has been set to 10.
NOTE: Restart 1, Converged 3
NOTE: Restart 2, Converged 6
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 2 times.
NOTE: Using value of 10 for K.
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 184 observations read from the data set WORK._WEIGHTS.
NOTE: The data set EMWS1.TEXTCLUSTER2_SVD_U has 184 observations and 11 variables.
NOTE: The data set WORK._SVDV has 298 observations and 11 variables.
NOTE: The data set EMWS1.TEXTCLUSTER2_SVD_S has 10 observations and 2 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.17 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   select count(*) into: svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   data EMWS1.TextCluster2_svd_u;
MPRINT(TM_SVD_DO_SAMP):   set EMWS1.TextCluster2_svd_u(keep= index col1-col10);
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: The data set EMWS1.TEXTCLUSTER2_SVD_U has 184 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   data _svdv;
MPRINT(TM_SVD_DO_SAMP):   set _svdv(keep= index col1-col10);
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 298 observations read from the data set WORK._SVDV.
NOTE: The data set WORK._SVDV has 298 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS1.TextCluster2_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 184 rows and 2 columns.
 
MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_U=EMWS1.TextCluster2_svd_u local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output colpro=_svdcolpro bigpro normcol prefix="TextCluster2_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: There were 184 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDCOLPRO has 298 observations and 11 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_keepdocs(keep=_document_) out=_docids;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 302 observations read from the data set WORK._KEEPDOCS.
NOTE: The data set WORK._DOCIDS has 302 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   merge _svdcolpro _docids(rename=(_document_=index));
MPRINT(TM_SVD_DO_SAMP):   by index;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 298 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 302 observations read from the data set WORK._DOCIDS.
NOTE: The data set WORK._SVDCOLPRO has 302 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   set _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   array svd_array TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TM_SVD_DO_SAMP):   do i = 1 to dim(svd_array);
MPRINT(TM_SVD_DO_SAMP):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TM_SVD_DO_SAMP):   end;
MPRINT(TM_SVD_DO_SAMP):   drop i;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 302 observations read from the data set WORK._SVDCOLPRO.
NOTE: The data set WORK._SVDCOLPRO has 302 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc sql;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS1.TextCluster2_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 184 rows and 2 columns.
 
MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_V=_svdv local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output wordPro = _svdrowpro bigpro normrow prefix="TextCluster2_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 298 observations read from the data set WORK._SVDV.
NOTE: There were 184 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDROWPRO has 184 observations and 11 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS1.TextCluster2_terms(drop=index) as select a.*,b.* from EMWS1.TextFilter_terms a left join _svdrowpro b on a.key = b.index;
NOTE: Table EMWS1.TEXTCLUSTER2_TERMS created, with 421 rows and 23 columns.
 
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.35 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmgetncl.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMGETNCL.SOURCE.
33959     +
33960     + /*
33961     +  Macro:   tmgetncl.sas
33962     +  Purpose: To obtain a default number of clusters
33963     +  Syntax:  %tmgetncl(data=, maxclusters=, vars=);
33964     +
33965     +  Required Parameters:  data=      The input data set.
33966     +
33967     +  Optional Parameters:  vars=      Variables to be used
33968     +
33969     +  History:
33970     +  2001/01/23 - Bill Wheeler - Initial Coding.
33971     +
33972     +*/
33973     + %MACRO tmgetncl(data=, maxclusters=, vars=, tempDS=,
33974     +                 clusDS=, threads=THREADS);
33975     +
33976     +  %if &maxclusters= %then %let maxclusters = 40;
33977     +
33978     +  %if &vars ^= %then %let var = var &vars;
33979     +  %else %let var = ;
33980     +
33981     +  /* run PROC FASTCLUS with maxClusters clusters */
33982     +  proc fastclus data = &data noprint
33983     +    maxclusters = &maxclusters
33984     +    mean = &tempDS;
33985     +    &var
33986     +    ;
33987     +    run;
33988     +
33989     +  /* use PROC CLUSTER with the MEAN data set from FASTCLUS */
33990     +  proc cluster data = &tempDS
33991     +    method = WARD
33992     +    pseudo
33993     +    noprint
33994     +    outtree = &tempDS;
33995     +    &var;
33996     +  run;
33997     +
33998     +  %if (&SYSERR > 4) %then %do;
33999     +    data &clusDS; nclus = 0; run;
34000     +    %goto exit;
34001     +  %end;
34002     +
34003     +  /* sort and get rid of missing values in the outtree data set */
34004     +  %tmsort(data=&tempDS(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_),
34005     +        out=&tempDS, by=_ncl_, options=, threads=&threads);
34006     +
34007     +  data &clusDS; set &tempDS;
34008     +    keep nclus;
34009     +    retain loclclus -1 loclccc 0 maxccc 0 maxclus 0
34010     +   jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
34011     +
34012     +   if _N_ = 1 then do;
34013     +     maxccc = _ccc_;
34014     +     maxclus = _ncl_;
34015     +     nclus = _ncl_;
34016     +     occc = _ccc_;
34017     +     oncl = _ncl_;
34018     +   end;
34019     +   else if (_N_ = 2) then do;
34020     +     jump = _ccc_ - occc;
34021     +     if (jump > 0) then do;
34022     +       maxjump = jump;
34023     +       jclus = _ncl_;
34024     +     end;
34025     +     if (_ccc_ > maxccc) then do;
34026     +       maxccc = _ccc_;
34027     +       maxclus = _ncl_;
34028     +     end;
34029     +     occc = _ccc_;
34030     +     oncl = _ncl_;
34031     +   end;
34032     +
34033     +   else if (_N_ > 2) then do;
34034     +     prevjump = jump;
34035     +     jump = _ccc_ - occc;
34036     +
34037     +     if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
34038     +        loclclus = oncl;
34039     +        loclccc = occc;
34040     +     end;
34041     +     if (_ccc_ > maxccc) then do;
34042     +       maxccc = _ccc_;
34043     +       maxclus = _ncl_;
34044     +     end;
34045     +     if ((jump > 0) & (jump > maxjump)) then do;
34046     +       jclus = _ncl_;
34047     +       maxjump = jump;
34048     +       jccc = _ccc_;
34049     +     end;
34050     +
34051     +     occc = _ccc_;
34052     +     oncl = _ncl_;
34053     +
34054     +     if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
34055     +     else if (loclclus > 0) then nclus = loclclus;
34056     +     else if (jclus > 0) then nclus = jclus;
34057     +     else nclus = maxclus;
34058     +   end;
34059     +  run;
34060     +
34061     +  %exit: ;
34062     +
34063     +%MEND tmgetncl;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
34064     + /*
34065     +
34066     +  Macro:   tmfast.sas
34067     +  Purpose: Call proc fastclus with given defaults and parameters.
34068     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
34069     +
34070     +  Required Parameters:  data=      The input data set.
34071     +                        clusters=  The maximum number of clusters
34072     +
34073     +  Optional Parameters:  vars=      Variables to be used
34074     +                        outstat=   The name of the OUTSTAT data set
34075     +                        outseed=   The name of the OUTSEED data set
34076     +
34077     +  Either outstat or outseed mut be given, but not both.
34078     +  History:
34079     +  2001/01/16 - Bill Wheeler - Initial Coding.
34080     +
34081     +*/
34082     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
34083     +                 id=, out=, vars=);
34084     + /* defaults */
34085     + %if (&id ne ) %then %let id = id &id;
34086     + %if (&out ne ) %then %let out = out = &out;
34087     + %if (&vars ne ) %then %let var = var &vars;
34088     + %else %let var = ;
34089     +
34090     + %if &outseed= %then
34091     + %do;
34092     +   proc fastclus data = &data
34093     +   maxclusters = &clusters noprint
34094     +   outstat = &outstat &out;
34095     +   &var;
34096     +   &id;
34097     + %end;
34098     + %else
34099     + %do;
34100     +   proc fastclus data = &data
34101     +   maxclusters = &clusters noprint
34102     +   outseed = &outseed &out;
34103     +   &var;
34104     +   &id;
34105     + %end;
34106     +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
34107     +
34108     + /*
34109     +
34110     +  Macro:   tmemclus.sas
34111     +  Purpose: Call proc emclus with given defaults and parameters.
34112     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
34113     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
34114     +                   seciter=, min=, method=, eps=, init=, print=,
34115     +                   p=, outliers=, decvar=, initstd=, dist=,
34116     +                   secstd=, nobs=, threads=);
34117     +  Required Parameters:  data=      The input data set.
34118     +                        role=      Train or score
34119     +                        clusters=  The number of primary clusters
34120     +
34121     +  Optional Parameters:  vars=      Variables to be used
34122     +                   cov=       Type of covariance matrix
34123     +                   iter=      Number of EM iterations
34124     +                   secclus    Number of secondary clusters
34125     +                   seciter    Number of k-means iterations
34126     +                   min=       Minimum number of obs in a cluster
34127     +                   method=    Standard or scaled
34128     +                   eps=       Stopping tolerance
34129     +                   init=      Random, Fastclus, or Emclus
34130     +                   print=     All, last, or none
34131     +                   p=
34132     +                   outliers=  Keep, cluster, or ignore
34133     +                   outstat=   Name of OUTSTAT data set
34134     +                   out=       Name of OUT data set
34135     +                   seed=      Name of SEED data set
34136     +                   decvar=    Proportion to decrease variances
34137     +                   initstd=   Initial standard deviation
34138     +                   dist=      Minimum distance between clusters
34139     +                   secstd=    Secondary cluster max std dev.
34140     +                   nobs=      Number of obs read in each iteration
34141     +  History:
34142     +  2001/01/16 - Bill Wheeler - Initial Coding.
34143     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
34144     +*/
34145     +%MACRO tmemclus(data=, role=, clusters=, seed=,
34146     + outstat=, out=, vars=, cov=, iter=, secclus=,
34147     + seciter=, min=, method=, eps=, init=, print=,
34148     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
34149     +
34150     + %local saveout saveseed op1 op2 op3 op4;
34151     +
34152     + %LET saveout = &out;
34153     + %LET saveseed = &outstat;
34154     +
34155     + /* defaults */
34156     + %if &role= %then %let role = TRAIN;
34157     + %if &seed ne %then %let seed = seed=&seed;
34158     + %if &vars= %then %let var = ;
34159     + %else %let var = var &vars;
34160     + %if &cov ne %then %let cov = cov = &cov;
34161     + %if &iter ne %then %let iter = iter = &iter;
34162     + %if &init ne %then %let init = init = &init;
34163     + %if &eps ne  %then %let eps = eps = &eps;
34164     + %if &min ne %then %let min = min = &min;
34165     + %if &seciter ne %then %let seciter = seciter = &seciter;
34166     + %if &print ne %then %let print = print = &print;
34167     + %if &p ne %then %let p = p = &p;
34168     + %if &outliers ne %then %let outliers = outliers = &outliers;
34169     + %if &method ne %then %let method = method = &method;
34170     + %if &decvar ne %then %let decvar = decvar = &decvar;
34171     + %if &outstat ne %then %let outstat = outstat = &outstat;
34172     + %if &out ne %then %let out = out = &out;
34173     + %if (&threads >= 0)  %then %let threads = threads = &threads;
34174     + %else %let threads = ;
34175     +
34176     + %LET op1 = ;
34177     + %LET op2 = ;
34178     + %LET op3 = ;
34179     + %LET op4 = ;
34180     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
34181     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
34182     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
34183     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
34184     +
34185     +
34186     + %IF &SYSVER < 9 %THEN %DO;
34187     +    %LET cov = ;
34188     +    %LET decvar = ;
34189     +    %LET outliers = ;
34190     +    %LET out = ;
34191     + %END;
34192     +
34193     +
34194     + %if %upcase(&role) = TRAIN %then
34195     + %do;
34196     +   proc emclus data = &data
34197     +   clusters = &clusters
34198     +   &seed
34199     +   &outstat
34200     +   &out
34201     +   &init
34202     +   &eps
34203     +   &method
34204     +   &secclus
34205     +   &min
34206     +   &print
34207     +   &outliers
34208     +   &iter
34209     +   &op1 &op2
34210     +   &op3 &op4
34211     +   &decvar
34212     +   &cov
34213     +   &threads
34214     +   ;
34215     +   &var;
34216     + %end;
34217     + %else
34218     +  %do;
34219     +    proc emclus data = &data
34220     +    role = score
34221     +    clusters = &clusters
34222     +    &seed
34223     +    &out
34224     +    &cov
34225     +    ;
34226     +    &var;
34227     +  %end;
34228     +
34229     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
34230     +   proc emclus data = &data
34231     +   role = score
34232     +   clusters = &clusters
34233     +   seed = &saveseed
34234     +   &saveout
34235     +   ;
34236     +   &var;
34237     + %END;
34238     +
34239     +
34240     +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
34241     +
34242     +/*
34243     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
34244     +
34245     +  Description: This macro will take output from
34246     +     emclus and generate predicted
34247     +      predicted clusters.
34248     +
34249     +  Parms: inds - input data set, produced by emclus.
34250     +   outds - data set with clusters created by this macro.
34251     +   clusters - number of clusters that should be on this data set
34252     +   type - valid values: 'max' or 'prob'.  Max will just take the
34253     +      cluster with the highest probability as the predicted cluster.
34254     +      In the case of a tie the first cluster with that value will
34255     +       selected.
34256     +      Prob will attempt to select multiple clusters based on
34257     +      how many clusters were requested.  That is if 3 clusters
34258     +      were requested, any cluster with prob>1/3 will be selected
34259     +      as the predicted cluster. THIS OPTION IS UNTESTED.
34260     +*/
34261     +
34262     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
34263     +
34264     +  %local _str newfreqDS _flag;
34265     +
34266     +  * set the optional arguments;
34267     +  %if &type= %then %let type=max;
34268     +  %if &ignore = 1 %then %let
34269     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
34270     +  %else %let _str = ;
34271     +  %if %str(&freqDS) ^= %str() %then %do;
34272     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
34273     +   %let _flag = 1;
34274     +  %end;
34275     +  %else %let _flag = 0;
34276     +
34277     +  %if &compress = 1 %then %let compress = compress=Y;
34278     +  %else %let compress = ;
34279     +
34280     +  data &outds(&compress drop=_c1-_c&clusters)
34281     +    %if &_flag = 1 %then %do;
34282     +    &newfreqDS
34283     +    %end;
34284     +    ;
34285     +    set &inds end=eof;
34286     +   * array for holding all probabilities;
34287     +    array _p prob1--prob&clusters;
34288     +    array _c(&clusters);
34289     +    retain _c 0;
34290     +   * get rid of working columns;
34291     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
34292     +    /* keep the largest probability and the cluster */
34293     +    _max_ = 0;
34294     +    do _i = 1 to &clusters;
34295     +      if _p(_i) > _max_ then do;
34296     +        _max_ = _p(_i);
34297     +        _CLUSTER_ = _i;
34298     +      end;
34299     +    end;
34300     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
34301     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
34302     +    else _CLUSTER_ = .;
34303     +    &_str;
34304     +    %if &_flag = 1 %then %do;
34305     +      if eof then do;
34306     +        output &freqDS;
34307     +                output &outDS;
34308     +          end;
34309     +          else output &outDS;
34310     +        %end;
34311     +
34312     +    run;
34313     +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
34314     + /*
34315     +PROC SORT macro
34316     +
34317     +%tmsort(data=, out=, by=);
34318     +
34319     +data=      - name of input data set (outtree data set from PROC CLUSTER)
34320     +out=       - name of the output data set
34321     +by=        - by statement
34322     +options=   - proc options
34323     +*/
34324     +
34325     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
34326     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
34327     +  %if &SYSVER < 9 %then %let threads = ;
34328     +
34329     +  proc sort data = %STR(&data) &threads &options
34330     +    &out;
34331     +    by &by;
34332     +  run;
34333     +
34334     +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: numTerms from EMWS1.TextFilter_terms a where a.numdocs>=2 and _ispar in('+',' ') ;
MPRINT(TM_CLUSTER):   select count (*) into: numdocs from EMWS1.TextFilter_TRAIN a;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMGETNCL):   proc fastclus data = _svdcolpro noprint maxclusters = 40 mean = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster2_SVD1 - TextCluster2_SVD10 ;
MPRINT(TMGETNCL):   run;
 
NOTE: The data set WORK._CLUSTEMP1 has 40 observations and 17 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMGETNCL):   proc cluster data = _clusTemp1 method = WARD pseudo noprint outtree = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMGETNCL):   run;
 
NOTE: The data set WORK._CLUSTEMP1 has 79 observations and 26 variables.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _clusTemp1(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_) out = _clusTemp1;
MPRINT(TMSORT):   by _ncl_;
MPRINT(TMSORT):   run;
 
NOTE: There were 39 observations read from the data set WORK._CLUSTEMP1.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._CLUSTEMP1 has 39 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMGETNCL):  ;
MPRINT(TMGETNCL):   data _clusTemp;
MPRINT(TMGETNCL):   set _clusTemp1;
MPRINT(TMGETNCL):   keep nclus;
MPRINT(TMGETNCL):   retain loclclus -1 loclccc 0 maxccc 0 maxclus 0 jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
MPRINT(TMGETNCL):   if _N_ = 1 then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   nclus = _ncl_;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ = 2) then do;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if (jump > 0) then do;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ > 2) then do;
MPRINT(TMGETNCL):   prevjump = jump;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
MPRINT(TMGETNCL):   loclclus = oncl;
MPRINT(TMGETNCL):   loclccc = occc;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if ((jump > 0) & (jump > maxjump)) then do;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jccc = _ccc_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
MPRINT(TMGETNCL):   else if (loclclus > 0) then nclus = loclclus;
MPRINT(TMGETNCL):   else if (jclus > 0) then nclus = jclus;
MPRINT(TMGETNCL):   else nclus = maxclus;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   run;
 
NOTE: There were 39 observations read from the data set WORK._CLUSTEMP1.
NOTE: The data set WORK._CLUSTEMP has 39 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMGETNCL):   ;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(nclus) into: numClus from _clusTemp ;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: nobs from _svdcolpro;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMFAST):   proc fastclus data = _svdcolpro maxclusters = 9 noprint outstat = _fastclusstat ;
MPRINT(TMFAST):   var TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMFAST):   ;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;
 
NOTE: The data set WORK._FASTCLUSSTAT has 55 observations and 13 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(CLUSTER) into :numClus from _fastclusstat where upcase(_TYPE_)='SEED' ;
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMEMCLUS):   proc emclus data = _svdcolpro clusters = 9 seed=_fastclusstat outstat = EMWS1.TextCluster2_emoutstat out = _tmutildoc init = FASTCLUS eps = .1 print = NONE iter = 5 decvar = 0 ;
MPRINT(TMEMCLUS):   var TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;
 
NOTE: The standard EM algorithm will be run.
NOTE: DIST is set to 0.2378832603
NOTE: EPS is set to 0.1
NOTE: INITSTD is set to 32.003004704
NOTE: ITER is set to 5
NOTE: MAXTIME is set to 2147483647
WARNING: The maximum number of 5 iterations in the EM algorithm has been reached. Parameter estimates may not be accurate.
NOTE: There were 302 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 55 observations read from the data set WORK._FASTCLUSSTAT.
NOTE: The data set EMWS1.TEXTCLUSTER2_EMOUTSTAT has 19 observations and 17 variables.
NOTE: The data set WORK._TMUTILDOC has 302 observations and 21 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.17 seconds
      cpu time            0.07 seconds
 
 
MPRINT(TMPRED):   * set the optional arguments;
MPRINT(TMPRED):   data EMWS1.TextCluster2_docs(compress=Y drop=_c1-_c9) _clusstat(keep=_c1-_c9) ;
MPRINT(TMPRED):   set _tmutildoc end=eof;
MPRINT(TMPRED):   * array for holding all probabilities;
MPRINT(TMPRED):   array _p prob1--prob9;
MPRINT(TMPRED):   array _c(9);
MPRINT(TMPRED):   retain _c 0;
MPRINT(TMPRED):   * get rid of working columns;
MPRINT(TMPRED):   drop _max_ _i _WARN_;
MPRINT(TMPRED):   _max_ = 0;
MPRINT(TMPRED):   do _i = 1 to 9;
MPRINT(TMPRED):   if _p(_i) > _max_ then do;
MPRINT(TMPRED):   _max_ = _p(_i);
MPRINT(TMPRED):   _CLUSTER_ = _i;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   if (_CLUSTER_ >= 1) and (_CLUSTER_ <= 9) then _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
MPRINT(TMPRED):   else _CLUSTER_ = .;
MPRINT(TMPRED):   ;
MPRINT(TMPRED):   if eof then do;
MPRINT(TMPRED):   output _clusstat;
MPRINT(TMPRED):   output EMWS1.TextCluster2_docs;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   else output EMWS1.TextCluster2_docs;
MPRINT(TMPRED):   run;
 
NOTE: There were 302 observations read from the data set WORK._TMUTILDOC.
NOTE: The data set EMWS1.TEXTCLUSTER2_DOCS has 302 observations and 21 variables.
NOTE: Compressing data set EMWS1.TEXTCLUSTER2_DOCS increased size by 100.00 percent.
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: The data set WORK._CLUSSTAT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data EMWS1.TextCluster2_docs;
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster2_docs;
MPRINT(TM_CLUSTER):   rename prob1-prob9 = TextCluster2_prob1-TextCluster2_prob9;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_DOCS.
NOTE: The data set EMWS1.TEXTCLUSTER2_DOCS has 302 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_CLUSTER):   data _clusstat;
MPRINT(TM_CLUSTER):   array c(9) _c1-_c9;
MPRINT(TM_CLUSTER):   set _clusstat;
MPRINT(TM_CLUSTER):   totalobs=0;
MPRINT(TM_CLUSTER):   do _CLUSTER_ = 1 to 9;
MPRINT(TM_CLUSTER):   Freq = c(_CLUSTER_);
MPRINT(TM_CLUSTER):   totalobs=totalobs+c(_CLUSTER_);
MPRINT(TM_CLUSTER):   output;
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   call symput ('totNumDocs', totalobs);
MPRINT(TM_CLUSTER):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      451:154
NOTE: There were 1 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 9 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_CLUSTER):   data _clusstat;
MPRINT(TM_CLUSTER):   set _clusstat;
MPRINT(TM_CLUSTER):   Percent = Freq/ 302;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 9 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 9 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_CLUSTER):   data _clustermean(rename=(TextCluster2_SVD1 - TextCluster2_SVD10 = _mean1-_mean10));
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster2_emoutstat(keep=cluster _TYPE_ TextCluster2_SVD1 - TextCluster2_SVD10);
MPRINT(TM_CLUSTER):   if _TYPE_ = "MEAN";
MPRINT(TM_CLUSTER):   keep cluster TextCluster2_SVD1 - TextCluster2_SVD10 ;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 19 observations read from the data set EMWS1.TEXTCLUSTER2_EMOUTSTAT.
NOTE: The data set WORK._CLUSTERMEAN has 9 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _meandocs(drop=cluster) as select a.*, b.* from EMWS1.TextCluster2_docs a left join _clustermean b on a._cluster_=b.cluster ;
NOTE: Table WORK._MEANDOCS created, with 302 rows and 31 columns.
 
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_CLUSTER):   data _rmscalc;
MPRINT(TM_CLUSTER):   merge _meandocs(in=inhere) _clusstat;
MPRINT(TM_CLUSTER):   array _means(10) _mean1-_mean10;
MPRINT(TM_CLUSTER):   array _svds(10) TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   error=0;
MPRINT(TM_CLUSTER):   do i = 1 to 10;
MPRINT(TM_CLUSTER):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   drop i;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 302 observations read from the data set WORK._MEANDOCS.
NOTE: There were 9 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._RMSCALC has 302 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_CLUSTER):   proc summary data=_rmscalc nway;
MPRINT(TM_CLUSTER):   class _cluster_;
MPRINT(TM_CLUSTER):   var error;
MPRINT(TM_CLUSTER):   output out=_meanerr mean=meane sum=sume;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 302 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 9 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_CLUSTER):   data _rmsse;
MPRINT(TM_CLUSTER):   set _meanerr;
MPRINT(TM_CLUSTER):   if _freq_ gt 1 then do;
MPRINT(TM_CLUSTER):   _rmsstd_=sqrt(sume/((_freq_-1)*(10)));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   else do;
MPRINT(TM_CLUSTER):   _rmsstd_=0;
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   keep _cluster_ _rmsstd_;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 9 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _clusstat2(drop=cluster) as select a.*,b.* from _clustermean a left join _rmsse b on a.cluster=b._cluster_;
NOTE: Table WORK._CLUSSTAT2 created, with 9 rows and 12 columns.
 
MPRINT(TM_CLUSTER):   create table EMWS1.TextCluster2_clusters as select a.*, b.freq, b.percent from _clusstat2(keep=_cluster_ _mean1-_mean10 _rmsstd_) a right join _clusstat b on a._cluster_=b._cluster_ where b.freq>0 ;
NOTE: Table EMWS1.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 14 columns.
 
MPRINT(TM_CLUSTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.27 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmterm1.source';
MPRINT(TM_CLUSTER):   proc sort data=EMWS1.TextFilter_terms out=_terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 421 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   if first.key then output;
MPRINT(TM_CLUSTER):   else;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 421 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = EMWS1.TextFilter_tmout threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;
 
NOTE: There were 1658 observations read from the data set EMWS1.TEXTFILTER_TMOUT.
NOTE: The data set WORK._TMOUT_ has 1658 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.17 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _tmout_;
MPRINT(TM_CLUSTER):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TM_CLUSTER):   by _termnum_;
MPRINT(TM_CLUSTER):   if _A_;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 1658 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):   data _docs_;
MPRINT(TM_CLUSTER):   set EMWS1.TextCluster2_docs (rename=(index=_document_) keep=index _cluster_);
MPRINT(TM_CLUSTER):   _SEGMNT_=_cluster_;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_DOCS.
NOTE: The data set WORK._DOCS_ has 302 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1658 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 676 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 1658 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1658 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 10 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 10 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: Table WORK._SUM has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;
 
NOTE: There were 676 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 676 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 676 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 260 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;
 
NOTE: There were 260 observations read from the data set WORK._UNQT.
NOTE: 137 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 123 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 422 rows and 3 columns.
 
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: Table WORK._UNQT has been dropped.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: Table WORK._TFREQ has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 422 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 123 observations and 11 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 9 ) 4 clus1 - clus9 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 9 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus9 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 1658 - 61;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 61 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 1658 - 79;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 79 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 1658 - 381;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 381 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 1658 - 177;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 177 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 1658 - 136;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 136 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 1658 - 166;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 166 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus7 = 0) or (clus7 < 0) then cdf7 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus7 ;
MPRINT(TMTERM1):   div = 1658 - 549;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf7 = CDF( 'binomial', clus7 , propor , 549 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf7 = 1;
MPRINT(TMTERM1):   else cdf7 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus8 = 0) or (clus8 < 0) then cdf8 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus8 ;
MPRINT(TMTERM1):   div = 1658 - 80;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf8 = CDF( 'binomial', clus8 , propor , 80 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf8 = 1;
MPRINT(TMTERM1):   else cdf8 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus9 = 0) or (clus9 < 0) then cdf9 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus9 ;
MPRINT(TMTERM1):   div = 1658 - 29;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf9 = CDF( 'binomial', clus9 , propor , 29 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf9 = 1;
MPRINT(TMTERM1):   else cdf9 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 123 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 123 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 9 ) cdf1 - cdf9 ;
MPRINT(TMTERM1):   array a_count ( 9 ) clus1 - clus9 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 9 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 123 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 422 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: Table WORK._CLCDF has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;
 
NOTE: There were 422 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 422 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 422) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 422) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 422) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;
 
NOTE: There were 422 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: Table WORK._CLCDFTR has been dropped.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = EMWS1.TextCluster2_clusters threads out = EMWS1.TextCluster2_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: The data set EMWS1.TEXTCLUSTER2_CLUSTERS has 9 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = _desc_ threads out = _desc_;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;
 
NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _desc_;
MPRINT(TM_CLUSTER):   merge EMWS1.TextCluster2_clusters _desc_;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 9 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMSORT):   proc sort data = _desc_ threads out = EMWS1.TextCluster2_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;
 
NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set EMWS1.TEXTCLUSTER2_CLUSTERS has 9 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   * add the info to EMINFO to forward on to other nodes ;
MPRINT(TRAIN):   data EMWS1.TextCluster2_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   key="LastTMNode";
MPRINT(TRAIN):   data="TextCluster2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTMNodeType";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTextCluster";
MPRINT(TRAIN):   data="TextCluster2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="PRESCORECODE";
MPRINT(TRAIN):   data="TextCluster2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: Variable TARGET is uninitialized.
NOTE: The data set EMWS1.TEXTCLUSTER2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(TRAIN):   select count(*) into :cluscnt from EMWS1.TextCluster2_clusters;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS1.TextCluster2_tmconfig;
MPRINT(TRAIN):   set EMWS1.TextCluster2_tmconfig;
MPRINT(TRAIN):   clus_alg = "1.0";
MPRINT(TRAIN):   maxsvd = 10;
MPRINT(TRAIN):   svdkeep= 10;
MPRINT(TRAIN):   last_prescore = "TextFilter                                 ";
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER2_TMCONFIG.
NOTE: The data set EMWS1.TEXTCLUSTER2_TMCONFIG has 1 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_CLUSTER_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD5");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD6");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD7");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD8");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD9");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_SVD10");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB5");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB6");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB7");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB8");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster2_PROB9");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp;
WARNING: No logical assign for filename TEMP.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: TextCluster2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34671      *------------------------------------------------------------*;
34672      * End TRAIN: TextCluster2;
34673      *------------------------------------------------------------*;
 
34674      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34675      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
34676      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34677      ;
MPRINT(EM_DIAGRAM):   ;
34678      ;
MPRINT(EM_DIAGRAM):   ;
34679      ;
MPRINT(EM_DIAGRAM):   ;
34680      ;
MPRINT(EM_DIAGRAM):   ;
34681      quit;
MPRINT(EM_DIAGRAM):   quit;
34682      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34683      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
34684      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34685      /*; *"; *'; */
34686      ;
MPRINT(EM_DIAGRAM):   ;
34687      run;
MPRINT(EM_DIAGRAM):   run;
34688      quit;
MPRINT(EM_DIAGRAM):   quit;
34689      /* Reset EM Options */
34690      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
34691      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
34692      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
34693      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
34694      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
34695      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
34696      filename x "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\CDELTA_TRAIN.sas";
34697      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
34698      file x;
MPRINT(EM_DIAGRAM):   file x;
34699      put 'if upcase(NAME) = "TEXTCLUSTER2_CLUSTER_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_CLUSTER_" then do;';
34700      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
34701      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
34702      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34703      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34704      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB1" then do;';
34705      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34706      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34707      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34708      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB2" then do;';
34709      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34710      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34711      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34712      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB3" then do;';
34713      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34714      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34715      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34716      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB4" then do;';
34717      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34718      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34719      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34720      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB5" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB5" then do;';
34721      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34722      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34723      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34724      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB6" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB6" then do;';
34725      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34726      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34727      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34728      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB7" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB7" then do;';
34729      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34730      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34731      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34732      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB8" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB8" then do;';
34733      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34734      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34735      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34736      put 'if upcase(NAME) = "TEXTCLUSTER2_PROB9" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_PROB9" then do;';
34737      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
34738      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34739      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34740      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD1" then do;';
34741      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34742      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34743      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34744      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34745      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD10" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD10" then do;';
34746      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34747      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34748      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34749      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34750      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD2" then do;';
34751      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34752      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34753      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34754      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34755      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD3" then do;';
34756      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34757      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34758      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34759      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34760      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD4" then do;';
34761      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34762      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34763      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34764      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34765      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD5" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD5" then do;';
34766      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34767      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34768      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34769      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34770      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD6" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD6" then do;';
34771      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34772      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34773      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34774      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34775      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD7" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD7" then do;';
34776      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34777      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34778      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34779      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34780      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD8" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD8" then do;';
34781      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34782      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34783      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34784      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
34785      put 'if upcase(NAME) = "TEXTCLUSTER2_SVD9" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER2_SVD9" then do;';
34786      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
34787      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
34788      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
34789      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Apr2017:12:38:38,
      Create Time=23Apr2017:18:14:12
 
NOTE: 90 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
34790      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:38:39" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 27, 2017
Time:                12:38:39
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O333X_E_ "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O333X_E_ new;
MPRINT(EM_DIAGRAM):   run;
34892      %let EMEXCEPTIONSTRING=;
34893      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34894      * SCORE: TextCluster2;
MPRINT(EM_DIAGRAM):   * SCORE: TextCluster2;
34895      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34896      %let EM_ACTION = SCORE;
34897      %let syscc = 0;
34898      %macro main();
34899
34900         %if %upcase(&EM_ACTION) eq CREATE %then %do;
34901            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
34902            %include temp;
34903            %create();
34904         %end;
34905         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
34906            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
34907            %include temp;
34908            %train();
34909         %end;
34910         %if %upcase(&EM_ACTION) eq REPORT %then %do;
34911            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
34912            %include temp;
34913            %report();
34914         %end;
34915         %if %upcase(&EM_ACTION) eq SCORE %then %do;
34916            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
34917            %include temp;
34918            %score();
34919         %end;
34920      %mend main;
34921
34922      %main();
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
34923     +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
34924     +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
34925     +  %if &import_ds ne %then %do;
34927     +    %let syscc=0;
34929     +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
34930     +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
34931     +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
34932     +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
34933     +                filtertmout=&ftmout, hierds=&hier);
34935     +  %end;
34937     +%mend tmc_score;
34938     +%macro score();
34940     +    %global last_parse_node last_filter_node last_prescore_node server_err
34941     +      parsevar EM_SASMSG ;
34942     +    %let syscc=0;
34943     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
34944     +    /*use saved version of em_info in case macro is not populated*/
34945     +    %em_getname(key=last_tm_nodes, type=data);
34947     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
34948     +    %include temp;
34949     +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
34950     +                        em_variableset=&em_data_variableset);
34951     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
34952     +    %let lastparsenode=&last_parse_node;
34953     +    %let lastfilternode=&last_filter_node;
34954     +    %let lastprescore=&last_prescore_node;
34955     +    %let filt_node=;
34957     +   %em_getname(key=terms, type=data);
34958     +   %em_getname(key=docs, type=data);
34959     +   %em_getname(key=clusters, type=data);
34960     +   %em_getname(key=svd_u, type=data);
34961     +   %em_getname(key=svd_s, type=data);
34962     +   %em_getname(key=emoutstat, type=data);
34963     +   %em_getname(key=tmconfig, type=data);
34965     +   %em_getname(key=tmout, type=data);
34966     +   %em_getname(key=validout, type=data);
34967     +   %em_getname(key=testout, type=data);
34968     +   %em_getname(key=scoreout, type=data);
34969     +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
34970     +   %let systmutil=;
34972     +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
34973     +    %include temp;
34974     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
34975     +    %include temp;
34976     +    filename temp catalog 'sashelp.emtext.tmpred.source';
34977     +    %include temp;
34978     +    filename temp catalog 'sashelp.emtext.tmsort.source';
34979     +    %include temp;
34980     +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
34981     +    %include temp;
34982     +    filename temp catalog 'sashelp.emtext.tmsvd.source';
34983     +    %include temp;
34984     +    filename temp catalog 'sashelp.emtext.tmfast.source';
34985     +    %include temp;
34987     +   %let EM_PUBLISHCODE = PUBLISH;
34988     +   %let EM_SCORECODEFORMAT = DATASTEP;
34989     +   %let overwrite_pre = ;
34991     +   %let lastprescore=%trim(%left(&lastprescore));
34993     +   /* Create indexed term table for writing out score code */
34994     +   proc sql noprint;
34995     +       select count(*) into :svdkeep
34996     +       from &em_user_svd_s
34997     +       where keep=1;
34998     +   create table _clusterms as
34999     +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
35001     +   data _filter_tmout;
35002     +      set &EM_LIB..&lastfilternode._tmout;
35003     +   run;
35005     +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
35006     +              import_out=_filter_tmout,
35007     +              export_out=&EM_export_transaction,
35008     +              term_ds=_clusterms,
35009     +              clusters_ds=&em_user_clusters,
35010     +              svdu=&em_user_svd_u,
35011     +              svds=&em_user_svd_s,
35012     +              em_outstat=&em_user_emoutstat,
35013     +              configdata=&em_user_tmconfig,
35014     +              prefixstring=&EM_NODEID,
35015     +              ocluster=&em_user_clusters,
35016     +              ndescterms=&em_property_ndescterms,
35017     +              fterms=&EM_LIB..&lastfilternode._terms,
35018     +              ftmout=&EM_LIB..&lastfilternode._tmout,
35019     +              hier=&em_user_hierds);
35021     +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
35022     +              export_out=&EM_USER_validout,
35023     +              import_out=&EM_LIB..&lastfilternode._validout,
35024     +              term_ds=_clusterms,
35025     +              clusters_ds=&em_user_clusters,
35026     +              svdu=&em_user_svd_u,
35027     +              svds=&em_user_svd_s,
35028     +              em_outstat=&em_user_emoutstat,
35029     +              configdata=&em_user_tmconfig,
35030     +              prefixstring=&EM_NODEID);
35031     +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
35032     +              export_out=&EM_USER_testout,
35033     +              import_out=&EM_LIB..&lastfilternode._testout,
35034     +              term_ds=_clusterms,
35035     +              clusters_ds=&em_user_clusters,
35036     +              svdu=&em_user_svd_u,
35037     +              svds=&em_user_svd_s,
35038     +              em_outstat=&em_user_emoutstat,
35039     +              configdata=&em_user_tmconfig,
35040     +              prefixstring=&EM_NODEID);
35042     +   %if &syscc>4 %then %do;
35043     +       %let syscc=0;
35044     +       %goto end_cluster_score;
35045     +   %end;
35047     +   * path of the diagram ;
35048     +   %let emwspath = ;
35049     +   data _null_;
35050     +      call symput("emwspath", strip(pathname("&EM_LIB")));
35051     +   run;
35053     +   filename pre "&EM_USER_PRESCORECODE";
35054     +   data _null_;
35055     +       file pre;
35056     +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
35057     +       put '%include temp;';
35058     +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
35059     +       put '%include temp;';
35060     +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
35061     +       put '%include temp;';
35062     +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
35063     +       put '%include temp;';
35064     +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
35065     +       put '%include temp;';
35066     +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
35067     +       put '%include temp;';
35068     +       put 'filename temp;';
35069     +   run;
35072     +   /* We need to use last prescore */
35073     +   %if &lastprescore ne %then %do;
35074     +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
35075     +      filename tmpre "&tmprescoreFile";
35076     +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
35077     +      filename tmpre;
35078     +   %end;
35080     +   data _codeclusters;
35081     +        set &em_user_clusters (drop=clus_desc);
35082     +   run;
35084     +     %if not %symexist(em_term_loc) %then %do;
35085     +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
35086     +         libname termloc "&em_term_loc";
35088     +      %let scored_terms = termloc.&lastfilternode._filtterms;
35089     +       %let scored_clust = termloc.&EM_NODEID._clusters;
35090     +       %let scored_config = termloc.&EM_NODEID._tmconfig;
35091     +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
35092     +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
35094     +       %if &em_property_algorithm=1.0 %then  %do;
35095     +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
35096     +       %end;
35098     +   %end;
35099     +   %else %do; /* Write out data sets to external directory */
35100     +       libname termloc "&em_term_loc";
35101     +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
35102     +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
35103     +           %goto end_cluster_score;
35104     +       %end;
35106     +      /* copy datasets to use for prescore code*/
35107     +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
35108     +         set _codeclusters;
35109     +       run;
35111     +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
35112     +         set &em_user_svd_u;
35113     +       run;
35115     +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
35116     +         set &em_user_svd_s;
35117     +       run;
35119     +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
35120     +         set &em_user_tmconfig;
35121     +       run;
35123     +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
35124     +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
35125     +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
35126     +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
35127     +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
35129     +       %if &em_property_algorithm=1.0 %then  %do;
35130     +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
35131     +         set &em_user_emoutstat;
35132     +         run;
35133     +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
35134     +       %end;
35135     +   %end;
35139     +   %let _score_append=;
35141     +   * Now save code, if necessary, for search phrase;
35142     +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
35143     +   %if &em_property_algorithm=1.0 %then %do;
35144     +   data _NULL_;
35145     +     file _tmscore;
35146     +     length string $200;
35147     +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
35148     +     put string;
35149     +     string="      termds=&scored_terms, configds=&scored_config,";
35150     +     put string;
35151     +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
35152     +     put string;
35153     +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
35154     +     put string;
35155     +     string='data &em_score_output; set work._newexport;';
35156     +     put string;
35157     +    run;
35158     +    %end;
35159     +    %else %do;
35160     +    data _NULL_;
35161     +     file _tmscore;
35162     +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
35163     +     put string;
35164     +     put "      termds=&scored_terms,configds=&scored_config,";
35165     +     put "      clusters=&scored_clust, ";
35166     +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
35167     +     put 'data &em_score_output; set work._newexport;';
35168     +    run;
35169     +    %end;
35170     +   filename _tmscore;
35172     +%end_cluster_score:
35173     +    filename temp;
35174     +    %if &tm_debug =0 %then %do;
35175     +    proc sql noprint;
35176     +        drop table _clusterms;
35177     +        drop table _filter_tmout;
35178     +        drop table _codeclusters;
35179     +    quit;
35180     +    %end;
35182     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
35184     +/* ****************************************************************
35185     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35186     + *
35187     + * Name:             tm_get_last_filter.sas
35188     + * Product:          SAS Text Miner
35189     + * Language:         Sas
35190     + * Script:
35191     + *
35192     + * Usage:
35193     + *
35194     + * Purpose:  macro to get the last filter node and the last parse node in the
35195     + *   diagram that corresponds to the current parse variable.  If there is no filter
35196     + *   node, the filter node is set to the last parse node.
35197     + *
35198     + *
35199     + *
35200     + * History:
35201     + * 14Aug09 Initial Coding
35202     + *
35203     + * Notes:
35204     + *    Returns an error in the following cases:
35205     + *      1. There is no preceding parse node.
35206     + *      2. There is no parse node with the current parse variable.
35207     + *
35208     + * Last Modified By:
35209     + * Last Modified On: Wed Sep 23 15:35:04 2009
35210     + *
35211     + * End
35212     + * ************************************************************** */
35213     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
35214     +   %let last_parse_node=;
35215     +   %let last_filter_node=;
35216     +   %let last_prescore_node=;
35217     +   %let server_err=;
35218     +   %let EMEXCEPTIONSTRING=;
35219     +   %let syscc=0;
35220     +
35221     +    /* verify that setinit for SAS Text Miner is currently active */
35222     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
35223     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
35224     +        %goto end_macro;
35225     +        %end;
35226     +
35227     +
35228     +    * find last filter or text parse node if no filter node. ;
35229     +   %if %sysfunc(exist(&eminfo)) %then %do;
35230     +      proc sql noprint;
35231     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
35232     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
35233     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
35234     +      quit;
35235     +
35236     +   %end;
35237     +
35238     +   %if &last_parse_node= %then %do;
35239     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
35240     +      %goto end_macro;
35241     +      %end;
35242     +
35243     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
35244     +   %else %let last_filter_node = %ktrim(&last_filter_node);
35245     +   %let last_parse_node = %ktrim(&last_parse_node);
35246     +
35247     +   * Check to make sure parse variable is present and still exists;
35248     +   %let parsevar = ;
35249     +   proc sql noprint;
35250     +    select parsevar into :parsevar
35251     +    from &em_lib..&last_filter_node._tmconfig;
35252     +    quit;
35253     +
35254     +    *check for dropped parsevar on input dataset;
35255     +       %let parsevarOK= ;
35256     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
35257     +       data _null_;
35258     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
35259     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
35260     +         run;
35261     +       %if(&parsevarOK eq ) %then %do;
35262     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
35263     +          %goto end_macro;
35264     +          %end;
35265     +%end_macro:
35266     +
35267     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS1.TextCluster2_last_tm_nodes where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS1.TextCluster2_last_tm_nodes where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS1.TextCluster2_last_tm_nodes where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS1.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS1.TextCluster2_VariableSet(where=(kupcase(NAME)="ADJUSTERNOTES" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TEXTCLUSTER2_VARIABLESET.
      WHERE (KUPCASE(NAME)='ADJUSTERNOTES') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
35268     +/* ****************************************************************
35269     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35270     + *
35271     + * Name:             tm_data2code.sas
35272     + * Product:          SAS Text Miner
35273     + * Language:         Sas
35274     + * Script:
35275     + *
35276     + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
35277     + *
35278     + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
35279     + *  to be view or data.
35280     + *
35281     + *    PARAMETERS:
35282     + *        DATA        = data set
35283     + *        OUTDATA     = out data set
35284     + *        OUTFILE     = file where to saved the code
35285     + *        APPEND      = append (Y/N)
35286     + * History:
35287     + * 11Jun09 Initial Coding
35288     + *
35289     + * Notes:
35290     + *
35291     + * Last Modified By:
35292     + * Last Modified On: Thu Jul 23 11:00:06 2009
35293     + *
35294     + * End
35295     + * ************************************************************** */
35296     +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
35297     +%if &data eq %then %do;
35298     +   %put ERROR: Data set not defined;
35299     +   %end;
35300     +%else %do;
35301     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
35302     +       %put ERROR: Data set does not exist;
35303     +       %end;
35304     +   %else %do;
35305     +      %global em_data em_outdata em_codefile em_append;
35306     +      %let em_data=&data;
35307     +      %let em_outdata=&outdata;
35308     +      %let em_codefile=&outfile;
35309     +      %let em_append=&append;
35310     +      proc display c=sashelp.emutil.data2code.scl; run;
35311     +      %end;
35312     +   %end;
35313     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
35314     +
35315     + /*
35316     +
35317     +  Macro:   tmemclus.sas
35318     +  Purpose: Call proc emclus with given defaults and parameters.
35319     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
35320     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
35321     +                   seciter=, min=, method=, eps=, init=, print=,
35322     +                   p=, outliers=, decvar=, initstd=, dist=,
35323     +                   secstd=, nobs=, threads=);
35324     +  Required Parameters:  data=      The input data set.
35325     +                        role=      Train or score
35326     +                        clusters=  The number of primary clusters
35327     +
35328     +  Optional Parameters:  vars=      Variables to be used
35329     +                   cov=       Type of covariance matrix
35330     +                   iter=      Number of EM iterations
35331     +                   secclus    Number of secondary clusters
35332     +                   seciter    Number of k-means iterations
35333     +                   min=       Minimum number of obs in a cluster
35334     +                   method=    Standard or scaled
35335     +                   eps=       Stopping tolerance
35336     +                   init=      Random, Fastclus, or Emclus
35337     +                   print=     All, last, or none
35338     +                   p=
35339     +                   outliers=  Keep, cluster, or ignore
35340     +                   outstat=   Name of OUTSTAT data set
35341     +                   out=       Name of OUT data set
35342     +                   seed=      Name of SEED data set
35343     +                   decvar=    Proportion to decrease variances
35344     +                   initstd=   Initial standard deviation
35345     +                   dist=      Minimum distance between clusters
35346     +                   secstd=    Secondary cluster max std dev.
35347     +                   nobs=      Number of obs read in each iteration
35348     +  History:
35349     +  2001/01/16 - Bill Wheeler - Initial Coding.
35350     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
35351     +*/
35352     +%MACRO tmemclus(data=, role=, clusters=, seed=,
35353     + outstat=, out=, vars=, cov=, iter=, secclus=,
35354     + seciter=, min=, method=, eps=, init=, print=,
35355     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
35356     +
35357     + %local saveout saveseed op1 op2 op3 op4;
35358     +
35359     + %LET saveout = &out;
35360     + %LET saveseed = &outstat;
35361     +
35362     + /* defaults */
35363     + %if &role= %then %let role = TRAIN;
35364     + %if &seed ne %then %let seed = seed=&seed;
35365     + %if &vars= %then %let var = ;
35366     + %else %let var = var &vars;
35367     + %if &cov ne %then %let cov = cov = &cov;
35368     + %if &iter ne %then %let iter = iter = &iter;
35369     + %if &init ne %then %let init = init = &init;
35370     + %if &eps ne  %then %let eps = eps = &eps;
35371     + %if &min ne %then %let min = min = &min;
35372     + %if &seciter ne %then %let seciter = seciter = &seciter;
35373     + %if &print ne %then %let print = print = &print;
35374     + %if &p ne %then %let p = p = &p;
35375     + %if &outliers ne %then %let outliers = outliers = &outliers;
35376     + %if &method ne %then %let method = method = &method;
35377     + %if &decvar ne %then %let decvar = decvar = &decvar;
35378     + %if &outstat ne %then %let outstat = outstat = &outstat;
35379     + %if &out ne %then %let out = out = &out;
35380     + %if (&threads >= 0)  %then %let threads = threads = &threads;
35381     + %else %let threads = ;
35382     +
35383     + %LET op1 = ;
35384     + %LET op2 = ;
35385     + %LET op3 = ;
35386     + %LET op4 = ;
35387     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
35388     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
35389     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
35390     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
35391     +
35392     +
35393     + %IF &SYSVER < 9 %THEN %DO;
35394     +    %LET cov = ;
35395     +    %LET decvar = ;
35396     +    %LET outliers = ;
35397     +    %LET out = ;
35398     + %END;
35399     +
35400     +
35401     + %if %upcase(&role) = TRAIN %then
35402     + %do;
35403     +   proc emclus data = &data
35404     +   clusters = &clusters
35405     +   &seed
35406     +   &outstat
35407     +   &out
35408     +   &init
35409     +   &eps
35410     +   &method
35411     +   &secclus
35412     +   &min
35413     +   &print
35414     +   &outliers
35415     +   &iter
35416     +   &op1 &op2
35417     +   &op3 &op4
35418     +   &decvar
35419     +   &cov
35420     +   &threads
35421     +   ;
35422     +   &var;
35423     + %end;
35424     + %else
35425     +  %do;
35426     +    proc emclus data = &data
35427     +    role = score
35428     +    clusters = &clusters
35429     +    &seed
35430     +    &out
35431     +    &cov
35432     +    ;
35433     +    &var;
35434     +  %end;
35435     +
35436     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
35437     +   proc emclus data = &data
35438     +   role = score
35439     +   clusters = &clusters
35440     +   seed = &saveseed
35441     +   &saveout
35442     +   ;
35443     +   &var;
35444     + %END;
35445     +
35446     +
35447     +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
35448     +
35449     +/*
35450     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
35451     +
35452     +  Description: This macro will take output from
35453     +     emclus and generate predicted
35454     +      predicted clusters.
35455     +
35456     +  Parms: inds - input data set, produced by emclus.
35457     +   outds - data set with clusters created by this macro.
35458     +   clusters - number of clusters that should be on this data set
35459     +   type - valid values: 'max' or 'prob'.  Max will just take the
35460     +      cluster with the highest probability as the predicted cluster.
35461     +      In the case of a tie the first cluster with that value will
35462     +       selected.
35463     +      Prob will attempt to select multiple clusters based on
35464     +      how many clusters were requested.  That is if 3 clusters
35465     +      were requested, any cluster with prob>1/3 will be selected
35466     +      as the predicted cluster. THIS OPTION IS UNTESTED.
35467     +*/
35468     +
35469     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
35470     +
35471     +  %local _str newfreqDS _flag;
35472     +
35473     +  * set the optional arguments;
35474     +  %if &type= %then %let type=max;
35475     +  %if &ignore = 1 %then %let
35476     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
35477     +  %else %let _str = ;
35478     +  %if %str(&freqDS) ^= %str() %then %do;
35479     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
35480     +   %let _flag = 1;
35481     +  %end;
35482     +  %else %let _flag = 0;
35483     +
35484     +  %if &compress = 1 %then %let compress = compress=Y;
35485     +  %else %let compress = ;
35486     +
35487     +  data &outds(&compress drop=_c1-_c&clusters)
35488     +    %if &_flag = 1 %then %do;
35489     +    &newfreqDS
35490     +    %end;
35491     +    ;
35492     +    set &inds end=eof;
35493     +   * array for holding all probabilities;
35494     +    array _p prob1--prob&clusters;
35495     +    array _c(&clusters);
35496     +    retain _c 0;
35497     +   * get rid of working columns;
35498     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
35499     +    /* keep the largest probability and the cluster */
35500     +    _max_ = 0;
35501     +    do _i = 1 to &clusters;
35502     +      if _p(_i) > _max_ then do;
35503     +        _max_ = _p(_i);
35504     +        _CLUSTER_ = _i;
35505     +      end;
35506     +    end;
35507     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
35508     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
35509     +    else _CLUSTER_ = .;
35510     +    &_str;
35511     +    %if &_flag = 1 %then %do;
35512     +      if eof then do;
35513     +        output &freqDS;
35514     +                output &outDS;
35515     +          end;
35516     +          else output &outDS;
35517     +        %end;
35518     +
35519     +    run;
35520     +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
35521     + /*
35522     +PROC SORT macro
35523     +
35524     +%tmsort(data=, out=, by=);
35525     +
35526     +data=      - name of input data set (outtree data set from PROC CLUSTER)
35527     +out=       - name of the output data set
35528     +by=        - by statement
35529     +options=   - proc options
35530     +*/
35531     +
35532     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
35533     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
35534     +  %if &SYSVER < 9 %then %let threads = ;
35535     +
35536     +  proc sort data = %STR(&data) &threads &options
35537     +    &out;
35538     +    by &by;
35539     +  run;
35540     +
35541     +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
35542     +/*****************************************************************************
35543     +*
35544     +* tmc_doc_score
35545     +*
35546     +*  import  =  the doc data set of _document_ ids's as input
35547     +*  export = the new doc dataset with the svd dimensions and cluster results as output
35548     +*  termds = the terms table as input
35549     +*  clusters = input dataset of clusters from train
35550     +*  emoutstat = input dataset of seeds from training
35551     +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
35552     +*  svd_u = input singular vectors
35553     +
35554     +
35555     +*  svd_s = input singular values
35556     +*  prefxi = variable prefix string identifier.
35557     +*
35558     +**************************************************************************************/
35559     +
35560     +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
35561     +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
35562     +                filterterms=,filtertmout=, descterms=);
35563     +
35564     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
35565     +
35566     +    proc sql noprint;
35567     +        select cellwgt into: cellwgt
35568     +            from &configds;
35569     +        select clus_alg into: algorithm
35570     +            from &configds;
35571     +        select parseVar into :textvar
35572     +            from &configds;
35573     +        select count(*) into :nclus
35574     +            from &clusters;
35575     +        select count(*) into :svdkeep
35576     +            from &svd_s
35577     +            where keep=1;
35578     +    quit;
35579     +
35580     +    %let svdkeep=%left(&svdkeep);
35581     +    %let nclus=%left(&nclus);
35582     +    %let algorithm=%left(&algorithm);
35583     +    %Let cellwgt=%left(&cellwgt);
35584     +    data _import_ds;
35585     +        set &import;
35586     +    run;
35587     +
35588     +
35589     +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
35590     +            by=KEY);
35591     +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
35592     +
35593     +    data _svdm1;
35594     +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
35595     +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
35596     +        by _termnum_;
35597     +        if _B_;
35598     +        if (_A_ and _B_ and (PARENT ne .))
35599     +          then _TERMNUM_ = PARENT;
35600     +
35601     +        keep _TERMNUM_ _DOCUMENT_ COUNT;
35602     +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
35603     +    run;
35604     +
35605     +    proc sql ;
35606     +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
35607     +        sum(COUNT) as _COUNT_ from _svdm1
35608     +        group by _TERMNUM_, _DOCUMENT_;
35609     +
35610     +       drop table _svdm1;
35611     +       drop table _terms;
35612     +    quit;
35613     +
35614     +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
35615     +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
35616     +         by=KEY, options=, threads=);
35617     +
35618     +
35619     +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
35620     +      %let svdkeep=%left(&svdkeep);
35621     +      data &svd_u;
35622     +         set &svd_u(keep= index col1-col&svdkeep);
35623     +      run;
35624     +
35625     +      proc sql;
35626     +         create table  _inweights as
35627     +         select a.*
35628     +         from _weights a right join &svd_u b
35629     +         on a.index=b.index
35630     +         ;
35631     +       quit;
35632     +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
35633     +    proc spsvd data=_scrout IN_U=&svd_u
35634     +        local = &cellwgt global = none in_global = _inweights ;
35635     +        row _TERMNUM_;
35636     +        col _DOCUMENT_;
35637     +        entry _COUNT_;
35638     +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
35639     +    run;
35640     +    proc sort data=_import_ds;
35641     +    by _DOCUMENT_; run;
35642     +
35643     +    proc sort data=_colpro;
35644     +    by INDEX;
35645     +    run;
35646     +
35647     +    data &export;
35648     +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
35649     +        by _DOCUMENT_;
35650     +        if _C_;
35651     +    run;
35652     +
35653     +    data &export;
35654     +       set  &export;
35655     +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
35656     +       do i = 1 to dim(svd_array);
35657     +          if svd_array(i)=. then svd_array(i)=0;
35658     +       end;
35659     +       drop i;
35660     +    run;
35661     +
35662     +
35663     +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
35664     +
35665     +    %if %left(&algorithm)=1.0 %then %do;
35666     +
35667     +        %tmemclus(data=&export,
35668     +            role=SCORE, clusters=&nclus,
35669     +            seed=&emoutstat,
35670     +            outstat=, out=&export,
35671     +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
35672     +            cov=, iter=5, secclus=,
35673     +            seciter=, min=, method=, eps=.1, init=, print=,
35674     +            p=, outliers=, decvar=0,
35675     +            initstd=, dist=, secstd=, nobs=);
35676     +        run;
35677     +
35678     +        %tmpred(&export, &export, &nclus, type=, ignore=0,
35679     +                  freqDS=, compress=1);
35680     +
35681     +        data &export;
35682     +           set &export;
35683     +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
35684     +           rename _cluster_=&prefix._cluster_;
35685     +        run;
35686     +
35687     +        %if &outclusters ne %then %do;
35688     +              %let memloc = _tmmem;
35689     +              proc tmutil data=&_scrout key=&filterterms ;
35690     +                 control init memloc="&memloc" release;
35691     +                 output keeponly out=_outtmutil;
35692     +              run;
35693     +
35694     +              data _docdata;
35695     +                 set &export (rename=(&prefix._cluster_=cluster));
35696     +              run;
35697     +
35698     +              /* Recalculate desc terms */
35699     +              data _terms_;
35700     +               set &filterterms;
35701     +               by key _ispar;
35702     +               if first.key then
35703     +                output;
35704     +               else;
35705     +              run;
35706     +
35707     +              data _terms_;
35708     +               set _terms_;
35709     +               if _ispar='+' then
35710     +                  Term=_ispar || ' ' || term;
35711     +              run;
35712     +
35713     +             %tmsort(data=_outtmutil,
35714     +               out=_tmout_,
35715     +               by=_termnum_,
35716     +                  options=,
35717     +               threads=threads);
35718     +
35719     +
35720     +             data _tmout_;
35721     +               merge _tmout_ (in=_A_)
35722     +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
35723     +               by _termnum_;
35724     +               if _A_;
35725     +             run;
35726     +
35727     +             data _docs_;
35728     +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
35729     +               _SEGMNT_=_cluster_;
35730     +             run;
35731     +
35732     +             %tmterm1(DSN_TPARS=_tmout_,
35733     +              DSN_CLUS=_docs_,
35734     +              DSN_DESC=_desc_,
35735     +              N_DESC_TERMS=&descterms,
35736     +              N_CLUS=&nclus,
35737     +              top_freq=%eval(&descterms*2),
35738     +              key=);
35739     +
35740     +             %tmsort(data=_desc_,
35741     +               out=_desc_,
35742     +               by=_cluster_,
35743     +                  options=,
35744     +               threads=threads);
35745     +
35746     +             proc sql noprint;
35747     +               create table &outclusters as
35748     +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
35749     +                 on a._cluster_=b._cluster_;
35750     +             quit;
35751     +
35752     +       %end;
35753     +
35754     +    %end;
35755     +    %else %do;
35756     +
35757     +        data _clustermean;
35758     +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
35759     +        run;
35760     +
35761     +        proc sql;
35762     +        create table _meandocs as
35763     +            select a.*, b.*
35764     +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
35765     +        quit;
35766     +
35767     +
35768     +        proc sort data=_meandocs;
35769     +        by _document_;
35770     +        run;
35771     +
35772     +        %if (&syscc>4) %then %do;
35773     +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
35774     +            %goto end_tmc;
35775     +        %end;
35776     +
35777     +        %tmsort(data=_meandocs,out=,by=_document_);
35778     +
35779     +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
35780     +            set _meandocs;
35781     +            drop _minDist_ _dist_ j freq;
35782     +            label CLUSTER = 'Cluster ID';
35783     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
35784     +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
35785     +            by _document_;
35786     +            retain CLUSTER _mindist_;
35787     +            _dist_ = 0;
35788     +            /* innner product*/
35789     +            do j = 1 to &svdkeep;
35790     +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
35791     +            end;
35792     +
35793     +            /* initialization*/
35794     +            if first._document_ then do;
35795     +                _minDist_ = _dist_;
35796     +                CLUSTER = _cluster_;
35797     +            end;
35798     +            /*optimization*/
35799     +            if (_dist_ < _minDist_) then do;
35800     +                _minDist_ = _dist_;
35801     +                CLUSTER = _cluster_;
35802     +            end;
35803     +            if last._document_ then do;
35804     +               output;
35805     +            end;
35806     +        run;
35807     +        proc sort data=_docdata;
35808     +           by _document_;
35809     +        proc sort data=&export;
35810     +           by _document_;
35811     +        run;
35812     +
35813     +        data &export;
35814     +           merge &export _docdata;
35815     +           by _document_;
35816     +           rename cluster=&prefix._cluster_;
35817     +        run;
35818     +    %end;
35819     +
35820     +    /* Reorder variables in exported data set */
35821     +    proc sql noprint;
35822     +        create table &export as
35823     +        select &textvar, &prefix._cluster_, *
35824     +        from &export;
35825     +    quit;
35826     +
35827     +
35828     +    %if &outclusters ne %then %do;
35829     +
35830     +        /* update freqencies in cluster table */
35831     +         proc freq data =_docdata ;
35832     +            tables cluster/out=_tempfreqtable;
35833     +         run;
35834     +
35835     +        proc sql noprint;
35836     +            create table &outclusters as
35837     +            select  a.*, b.count as freq, b.percent/100 as percent
35838     +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
35839     +           where a._cluster_=b.cluster;
35840     +
35841     +        quit;
35842     +
35843     +        %if %left(&algorithm)=2.0 %then %do;
35844     +
35845     +          proc sql noprint;
35846     +
35847     +             create table &hierds as select a.freq, b.*
35848     +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
35849     +          quit;
35850     +
35851     +          /* Find descriptive terms for clusters & parents */
35852     +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
35853     +          %include temp;
35854     +          filename temp;
35855     +
35856     +          %tm_getHierTerms(hierds=&hierds,
35857     +                         docs=_docdata,
35858     +                         tmout=&filtertmout,
35859     +                         terms= &filterterms,
35860     +                         ndescterms=&descterms);
35861     +
35862     +          proc sql noprint;
35863     +             create table &outclusters as
35864     +                select a.clus_desc, b.* from &hierds a, &outclusters b
35865     +                where a._cluster_=b._cluster_;
35866     +
35867     +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
35868     +          quit;
35869     +
35870     +          /* Add frequencies to ancestors */
35871     +          data _hd;
35872     +             set &hierds;
35873     +             cluster=_cluster_;
35874     +             drop _cluster_ parent;
35875     +          run;
35876     +
35877     +          %let empty=1;
35878     +
35879     +          %do %while (&empty);
35880     +
35881     +            proc sql noprint;
35882     +                update _hd set freq=
35883     +                    (select sum(freq) from &HIERDS
35884     +                    where parent=cluster)
35885     +                    where freq=. and cluster not in
35886     +                    (select parent from &hierds where freq=.);
35887     +                select count(*) into :empty from _hd
35888     +                    where freq=.;
35889     +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
35890     +            quit;
35891     +
35892     +          %end;
35893     +
35894     +          /* Set graphdesc variable for graph display */
35895     +          data &hierds(drop=plus pos sub);
35896     +            set &hierds;
35897     +            plus='';
35898     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
35899     +            if ktrim(clus_desc) ne "" then do;
35900     +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
35901     +                 pos = findc(CLUS_DESC, "'",2);
35902     +                 sub = substr(CLUS_DESC,1,pos);
35903     +              end;
35904     +              else sub = scan(CLUS_DESC, 1);
35905     +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
35906     +            end;
35907     +            else graphdesc=_CLUSTER_;
35908     +          run;
35909     +        %end;
35910     +
35911     +         /*calculate residual for each doc */
35912     +
35913     +         proc sort data=_docdata (rename=(cluster=_cluster_));
35914     +            by _cluster_;
35915     +         run;
35916     +
35917     +         data _rmscalc;
35918     +            merge _docdata(in=inhere) &outclusters;
35919     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
35920     +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
35921     +            by _cluster_;
35922     +            error=0;
35923     +            do i = 1 to &svdkeep;
35924     +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
35925     +            end;
35926     +
35927     +            drop i ;
35928     +         run;
35929     +
35930     +          /*calc standardized residual for clusters*/
35931     +         proc summary data=_rmscalc nway;
35932     +            class _cluster_;
35933     +            var error;
35934     +            output out=_meanerr mean=meane sum=sume;
35935     +         run;
35936     +
35937     +         data _rmsse;
35938     +            set _meanerr;
35939     +            /* original code divides by number of svd dims*/
35940     +            if _freq_ gt 1 then do;
35941     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
35942     +            end;
35943     +            else do;
35944     +              _rmsstd_=0;
35945     +            end;
35946     +            keep _cluster_  _rmsstd_;
35947     +         run;
35948     +
35949     +
35950     +         proc sql noprint;
35951     +           create table _clusstat2 as
35952     +           select a.*,b.*
35953     +           from &outclusters a left join _rmsse b
35954     +           on a._cluster_=b._cluster_;
35955     +
35956     +           create table &outclusters as
35957     +           select * from _clusstat2;
35958     +         quit;
35959     +
35960     +
35961     +    %end;
35962     +
35963     +
35964     +%end_tmc:
35965     +    %if &tm_debug =0  %then %do;
35966     +    proc sql noprint;
35967     +        drop table _weights;
35968     +        drop table _colpro;
35969     +        drop table _scrout;
35970     +        drop table _svdm1;
35971     +        drop table _inweights;
35972     +        drop table _clustermean;
35973     +        drop table _clusstat2;
35974     +        drop table _outtmutil;
35975     +        drop table _rmscalc;
35976     +        drop table _rmsse;
35977     +        drop table _meanerr;
35978     +        drop table _meandocs;
35979     +        drop table _import_ds;
35980     +        drop table _hd;
35981     +        drop table _terms_;
35982     +        drop table _docs_;
35983     +        drop table _tmout_;
35984     +        drop table _desc_;
35985     +        drop table _docdata;
35986     +    quit;
35987     +    %end;
35988     +
35989     +%mend tmc_doc_score;
35990     +
35991     +
35992     +
35993     +
35994     +
35995     +
35996     +
35997     +
35998     +
35999     +
36000     +
36001     +
36002     +
36003     +
36004     +
36005     +
36006     +
36007     +
36008     +
36009     +
36010     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsvd.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
36012     + /*
36014     +  Macro:     tmsvd.sas
36015     +  Purpose:  Call proc spsvd with given defaults and parameters.
36016     +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
36017     +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
36018     +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
36020     +  Required Parameters:  in     The data= data set.
36021     +  Optional Parameters:  k= The number of dimensions to reduce to
36022     +                   global=  The global weight to use, defaults to IDF.
36023     +                   local=  The local weight to use, defaults to BINARY.
36024     +                   row=   Column in the input data set that represents
36025     +                          the matrix row,
36026     +                       defaults to _termnum_.
36027     +            col=   Column in the input data set that represents
36028     +                          the matrix column,
36029     +                         defaults to _document_.
36030     +            entry= Column in the input data set that represents the
36031     +                          value in the
36032     +                         given row,column cell.  Defaults to _count_.
36033     +             scaleOp= Scale options: scalerow scalecol scaleall
36034     +            normOp=  Normalization options: normrow normcol normall
36035     +            in_global= The gwgt= output data set from a prior spsvd run.
36036     +                   in_u=  The u= output from a prior spsvd run.
36037     +                   in_s=  The s= output from a prior spsvd run.
36038     +                   in_v=  The v= output from a prior spsvd run.
36039     +                   u=     matrix U data set
36040     +                   s=     matrix S data set
36041     +                   v=     matrix V data set
36042     +                  wgt=   weighted input matrix data set
36043     +                  wordPro= projections of rows of A onto columns of V
36044     +                  colPro=  projection of columns of A onto columns of U
36045     +                  p=   number of iterations
36046     +                  tol= convergence tolerance
36047     +                   gwgt= global weights data set
36048     +                  mink=
36049     +                  maxk=
36050     +                  res=
36051     +                  remote= name of file
36053     +  History:
36054     +  2001/01/16 - Kevin Daly - Initial coding.
36055     +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
36056     +             no gwgt data set
36057     +               is requested.  This was causing an error and the proc
36058     +              would terminate.
36059     +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
36060     +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
36061     +  2001/08/14 - Bill Wheeler - Added remote option
36062     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
36063     +*/
36065     +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
36066     +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
36067     +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
36068     +             remote=, compact=,bigpro= );
36070     +  %put;
36071     +  /* Defaults */
36072     +  %if &k ^= %then %let k = k = &k;
36073     +  %if &global ^= %then %let global = global = &global;
36074     +  %if %lowcase(&local) = bin %then %let local=BINARY;
36075     +  %if &local ^= %then %let local=local=&local;
36076     +  %if &row= %then %let row=_termnum_;
36077     +  %if &col= %then %let col=_document_;
36078     +  %if &entry= %then %let entry=_count_;
36079     +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
36080     +  %if &normOp ^= %then %let normOp = normdoc;
36081     +  %if &compact ^= %then %let compact = compact;
36082     +  %else %let compact = ;
36084     +  %if &in_global ^= %then %let in_global = in_global=&in_global;
36085     +  %if &in_u ^= %then %let in_u = in_u=&in_u;
36086     +  %if &in_s ^= %then %let in_s = in_s=&in_s;
36087     +  %if &in_v ^= %then %let in_v = in_v=&in_v;
36088     +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
36089     +  %else %let p = ;
36090     +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
36091     +  %else %let tol = ;
36093     +  %IF &SYSVER < 9 %THEN %DO;
36094     +    %IF &k = %THEN %DO;
36095     +      %IF &maxk ^= %THEN %LET k = k = &maxk;
36096     +      %ELSE %LET k = k = 100;
36097     +    %END;
36098     +    %LET mink = ;
36099     +    %LET maxk = ;
36100     +    %LET res = ;
36101     +    %LET remote = ;
36102     +    %LET compact = ;
36103     +  %END;
36106     +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
36107     +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
36108     +  %if &s ^= %then %let s = S=&s;
36109     +  %if &u ^= %then %let u = U=&u;
36110     +  %if &v ^= %then %let v = V=&v;
36111     +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
36112     +  %if &wgt ^= %then %let wgt = WGT=&wgt;
36113     +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
36114     +  %else %let mink = ;
36115     +  %if &maxk ^= %then %let maxk = max_k = &maxk;
36116     +  %if &res ^= %then %let res = res = &res;
36117     +  proc sort data=&in; by &col;
36118     +  /* Run the proc */
36119     +  proc spsvd data=&in
36120     +      &mink
36121     +      &maxk
36122     +      &res
36123     +      &k &compact
36124     +    &local &global &in_global
36125     +    &in_u &in_s &in_v &p &tol;
36126     +    row &row; col &col; entry &entry;
36127     +      output &colPro &gwgt &normOp &scaleOp &s &u &v
36128     +           &wordPro &wgt &bigpro;
36129     +    &remote;
36130     +  run;
36132     +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
36133     + /*
36134     +
36135     +  Macro:   tmfast.sas
36136     +  Purpose: Call proc fastclus with given defaults and parameters.
36137     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
36138     +
36139     +  Required Parameters:  data=      The input data set.
36140     +                        clusters=  The maximum number of clusters
36141     +
36142     +  Optional Parameters:  vars=      Variables to be used
36143     +                        outstat=   The name of the OUTSTAT data set
36144     +                        outseed=   The name of the OUTSEED data set
36145     +
36146     +  Either outstat or outseed mut be given, but not both.
36147     +  History:
36148     +  2001/01/16 - Bill Wheeler - Initial Coding.
36149     +
36150     +*/
36151     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
36152     +                 id=, out=, vars=);
36153     + /* defaults */
36154     + %if (&id ne ) %then %let id = id &id;
36155     + %if (&out ne ) %then %let out = out = &out;
36156     + %if (&vars ne ) %then %let var = var &vars;
36157     + %else %let var = ;
36158     +
36159     + %if &outseed= %then
36160     + %do;
36161     +   proc fastclus data = &data
36162     +   maxclusters = &clusters noprint
36163     +   outstat = &outstat &out;
36164     +   &var;
36165     +   &id;
36166     + %end;
36167     + %else
36168     + %do;
36169     +   proc fastclus data = &data
36170     +   maxclusters = &clusters noprint
36171     +   outseed = &outseed &out;
36172     +   &var;
36173     +   &id;
36174     + %end;
36175     +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   proc sql noprint;
MPRINT(SCORE):   select count(*) into :svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(SCORE):   create table _clusterms as select key, term, role, keep, freq, numdocs, parent, _ispar, weight from EMWS1.TextCluster2_terms;
NOTE: Table WORK._CLUSTERMS created, with 421 rows and 9 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   data _filter_tmout;
MPRINT(SCORE):   set EMWS1.TextFilter_tmout;
MPRINT(SCORE):   run;
 
NOTE: There were 1658 observations read from the data set EMWS1.TEXTFILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 1658 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   select cellwgt into: cellwgt from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select clus_alg into: algorithm from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select parseVar into :textvar from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select count(*) into :nclus from EMWS1.TextCluster2_clusters;
MPRINT(TMC_DOC_SCORE):   select count(*) into :svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _import_ds;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextFilter_TRAIN;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTPARSING_TRAIN.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_DOC_IDS.
NOTE: There were 302 observations read from the data set EMWS1.TEXTFILTER_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 302 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMSORT):   proc sort data = _clusterms(where=(keep='Y')) THREADS out = _terms(keep= KEY PARENT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 421 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 421 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _filter_tmout THREADS out = _filter_tmout;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;
 
NOTE: There were 1658 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 1658 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _svdm1;
MPRINT(TMC_DOC_SCORE):   merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_)) _filter_tmout (in = _A_ rename=(_COUNT_=COUNT));
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _B_;
MPRINT(TMC_DOC_SCORE):   if (_A_ and _B_ and (PARENT ne .)) then _TERMNUM_ = PARENT;
MPRINT(TMC_DOC_SCORE):   keep _TERMNUM_ _DOCUMENT_ COUNT;
MPRINT(TMC_DOC_SCORE):   if (_DOCUMENT_=.) or (COUNT=.) then delete;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 323 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 1658 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 1658 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql ;
MPRINT(TMC_DOC_SCORE):   create table _scrout as select distinct _TERMNUM_, _DOCUMENT_, sum(COUNT) as _COUNT_ from _svdm1 group by _TERMNUM_, _DOCUMENT_;
NOTE: Table WORK._SCROUT created, with 1643 rows and 3 columns.
 
MPRINT(TMC_DOC_SCORE):   drop table _svdm1;
NOTE: Table WORK._SVDM1 has been dropped.
MPRINT(TMC_DOC_SCORE):   drop table _terms;
NOTE: Table WORK._TERMS has been dropped.
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMSORT):   proc sort data = _clusterms(where=(KEEP='Y' and PARENT=.)) out = _weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 184 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 184 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _scrout out = _scrout;
MPRINT(TMSORT):   by _DOCUMENT_;
MPRINT(TMSORT):   run;
 
NOTE: There were 1643 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_svd_u;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_svd_u(keep= index col1-col10);
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: The data set EMWS1.TEXTCLUSTER2_SVD_U has 184 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql;
MPRINT(TMC_DOC_SCORE):   create table _inweights as select a.* from _weights a right join EMWS1.TextCluster2_svd_u b on a.index=b.index ;
NOTE: Table WORK._INWEIGHTS created, with 184 rows and 2 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc spsvd data=_scrout IN_U=EMWS1.TextCluster2_svd_u local = LOG global = none in_global = _inweights ;
MPRINT(TMC_DOC_SCORE):   row _TERMNUM_;
MPRINT(TMC_DOC_SCORE):   col _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   entry _COUNT_;
MPRINT(TMC_DOC_SCORE):   output colpro=_COLPRO bigpro normcol prefix="TextCluster2_SVD";
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 1643 observations read from the data set WORK._SCROUT.
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: There were 184 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 298 observations and 11 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sort data=_import_ds;
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 302 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sort data=_colpro;
MPRINT(TMC_DOC_SCORE):   by INDEX;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 298 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 298 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   if _C_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 298 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   array svd_array TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMC_DOC_SCORE):   do i = 1 to dim(svd_array);
MPRINT(TMC_DOC_SCORE):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMSORT):   proc sort data = EMWS1.TextCluster2_TRAIN ;
MPRINT(TMSORT):   by _document_;
MPRINT(TMSORT):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMEMCLUS):   proc emclus data = EMWS1.TextCluster2_TRAIN role = score clusters = 9 seed=EMWS1.TextCluster2_emoutstat out = EMWS1.TextCluster2_TRAIN ;
MPRINT(TMEMCLUS):   var TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: There were 19 observations read from the data set EMWS1.TEXTCLUSTER2_EMOUTSTAT.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 29 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMPRED):   * set the optional arguments;
MPRINT(TMPRED):   data EMWS1.TextCluster2_TRAIN(compress=Y drop=_c1-_c9) ;
MPRINT(TMPRED):   set EMWS1.TextCluster2_TRAIN end=eof;
MPRINT(TMPRED):   * array for holding all probabilities;
MPRINT(TMPRED):   array _p prob1--prob9;
MPRINT(TMPRED):   array _c(9);
MPRINT(TMPRED):   retain _c 0;
MPRINT(TMPRED):   * get rid of working columns;
MPRINT(TMPRED):   drop _max_ _i _WARN_;
MPRINT(TMPRED):   _max_ = 0;
MPRINT(TMPRED):   do _i = 1 to 9;
MPRINT(TMPRED):   if _p(_i) > _max_ then do;
MPRINT(TMPRED):   _max_ = _p(_i);
MPRINT(TMPRED):   _CLUSTER_ = _i;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   if (_CLUSTER_ >= 1) and (_CLUSTER_ <= 9) then _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
MPRINT(TMPRED):   else _CLUSTER_ = .;
MPRINT(TMPRED):   ;
MPRINT(TMPRED):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 29 variables.
NOTE: Compressing data set EMWS1.TEXTCLUSTER2_TRAIN decreased size by 0.00 percent.
      Compressed is 3 pages; un-compressed would require 3 pages.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   rename prob1-prob9 = TextCluster2_prob1-TextCluster2_prob9;
MPRINT(TMC_DOC_SCORE):   rename _cluster_=TextCluster2_cluster_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: The data set EMWS1.TEXTCLUSTER2_TRAIN has 302 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc tmutil data=_filter_tmout key=EMWS1.TextFilter_terms ;
MPRINT(TMC_DOC_SCORE):   control init memloc="_tmmem" release;
MPRINT(TMC_DOC_SCORE):   output keeponly out=_outtmutil;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 1658 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 1643 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _docdata;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_TRAIN (rename=(TextCluster2_cluster_=cluster));
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: The data set WORK._DOCDATA has 302 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _terms_;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextFilter_terms;
MPRINT(TMC_DOC_SCORE):   by key _ispar;
MPRINT(TMC_DOC_SCORE):   if first.key then output;
MPRINT(TMC_DOC_SCORE):   else;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 1442 observations read from the data set EMWS1.TEXTFILTER_TERM_STRINGS.
NOTE: There were 421 observations read from the data set EMWS1.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _terms_;
MPRINT(TMC_DOC_SCORE):   set _terms_;
MPRINT(TMC_DOC_SCORE):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 323 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _outtmutil threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;
 
NOTE: There were 1643 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 1643 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _tmout_;
MPRINT(TMC_DOC_SCORE):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _A_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 1643 observations read from the data set WORK._TMOUT_.
NOTE: There were 323 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 1643 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _docs_;
MPRINT(TMC_DOC_SCORE):   set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
MPRINT(TMC_DOC_SCORE):   _SEGMNT_=_cluster_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 302 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 1643 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1643 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 584 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 1643 observations read from the data set WORK._TMOUT_.
NOTE: There were 302 observations read from the data set WORK._DOCS_.
NOTE: There were 1643 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 10 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 10 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: Table WORK._SUM has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;
 
NOTE: There were 584 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 584 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 584 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 259 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;
 
NOTE: There were 259 observations read from the data set WORK._UNQT.
NOTE: 145 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 114 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 438 rows and 3 columns.
 
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: Table WORK._UNQT has been dropped.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: Table WORK._TFREQ has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 438 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 114 observations and 11 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 9 ) 4 clus1 - clus9 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 9 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus9 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 1643 - 59;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 59 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 1643 - 79;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 79 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 1643 - 378;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 378 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 1643 - 177;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 177 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 1643 - 134;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 134 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 1643 - 165;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 165 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus7 = 0) or (clus7 < 0) then cdf7 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus7 ;
MPRINT(TMTERM1):   div = 1643 - 542;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf7 = CDF( 'binomial', clus7 , propor , 542 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf7 = 1;
MPRINT(TMTERM1):   else cdf7 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus8 = 0) or (clus8 < 0) then cdf8 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus8 ;
MPRINT(TMTERM1):   div = 1643 - 80;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf8 = CDF( 'binomial', clus8 , propor , 80 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf8 = 1;
MPRINT(TMTERM1):   else cdf8 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus9 = 0) or (clus9 < 0) then cdf9 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus9 ;
MPRINT(TMTERM1):   div = 1643 - 29;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf9 = CDF( 'binomial', clus9 , propor , 29 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf9 = 1;
MPRINT(TMTERM1):   else cdf9 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 114 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 114 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 9 ) cdf1 - cdf9 ;
MPRINT(TMTERM1):   array a_count ( 9 ) clus1 - clus9 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 9 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;
 
NOTE: There were 114 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 438 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: Table WORK._CLCDF has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;
 
NOTE: There were 438 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 438 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 438) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 438) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 438) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;
 
NOTE: There were 438 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: Table WORK._CLCDFTR has been dropped.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _desc_ threads out = _desc_;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;
 
NOTE: There were 9 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS1.TextCluster2_clusters as select a.clus_desc, b.* from EMWS1.TextCluster2_clusters b left join _desc_ a on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: Table EMWS1.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 15 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS1.TextCluster2_TRAIN as select adjusternotes , TextCluster2_cluster_, * from EMWS1.TextCluster2_TRAIN;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable AdjusterNotes already exists on file EMWS1.TEXTCLUSTER2_TRAIN.
WARNING: Variable TextCluster2_cluster_ already exists on file EMWS1.TEXTCLUSTER2_TRAIN.
NOTE: Table EMWS1.TEXTCLUSTER2_TRAIN created, with 302 rows and 29 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc freq data =_docdata ;
MPRINT(TMC_DOC_SCORE):   tables cluster/out=_tempfreqtable;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 9 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 4.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS1.TextCluster2_clusters as select a.*, b.count as freq, b.percent/100 as percent from EMWS1.TextCluster2_clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b where a._cluster_=b.cluster;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS1.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 14 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sort data=_docdata (rename=(cluster=_cluster_));
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 302 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _rmscalc;
MPRINT(TMC_DOC_SCORE):   merge _docdata(in=inhere) EMWS1.TextCluster2_clusters;
MPRINT(TMC_DOC_SCORE):   array _means(10) _mean1-_mean10;
MPRINT(TMC_DOC_SCORE):   array _svds(10) TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   error=0;
MPRINT(TMC_DOC_SCORE):   do i = 1 to 10;
MPRINT(TMC_DOC_SCORE):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i ;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._DOCDATA.
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 302 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc summary data=_rmscalc nway;
MPRINT(TMC_DOC_SCORE):   class _cluster_;
MPRINT(TMC_DOC_SCORE):   var error;
MPRINT(TMC_DOC_SCORE):   output out=_meanerr mean=meane sum=sume;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 302 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 9 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _rmsse;
MPRINT(TMC_DOC_SCORE):   set _meanerr;
MPRINT(TMC_DOC_SCORE):   if _freq_ gt 1 then do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=sqrt(sume/((_freq_-1)*(10)));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   else do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   keep _cluster_ _rmsstd_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 9 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table _clusstat2 as select a.*,b.* from EMWS1.TextCluster2_clusters a left join _rmsse b on a._cluster_=b._cluster_;
WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 9 rows and 15 columns.
 
MPRINT(TMC_DOC_SCORE):   create table EMWS1.TextCluster2_clusters as select * from _clusstat2;
NOTE: Table EMWS1.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 15 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   select cellwgt into: cellwgt from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select clus_alg into: algorithm from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select parseVar into :textvar from EMWS1.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select count(*) into :nclus from EMWS1.TextCluster2_clusters;
MPRINT(TMC_DOC_SCORE):   select count(*) into :svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data _import_ds;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextFilter_VALIDATE;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTFILTER_VALIDATE.
NOTE: The data set WORK._IMPORT_DS has 305 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMSORT):   proc sort data = _clusterms(where=(keep='Y')) THREADS out = _terms(keep= KEY PARENT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 421 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 421 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = EMWS1.TextFilter_validout THREADS out = EMWS1.TextFilter_validout;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 1392 observations read from the data set EMWS1.TEXTFILTER_VALIDOUT.
NOTE: The data set EMWS1.TEXTFILTER_VALIDOUT has 1392 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _svdm1;
MPRINT(TMC_DOC_SCORE):   merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_)) EMWS1.TextFilter_validout (in = _A_ rename=(_COUNT_=COUNT));
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _B_;
MPRINT(TMC_DOC_SCORE):   if (_A_ and _B_ and (PARENT ne .)) then _TERMNUM_ = PARENT;
MPRINT(TMC_DOC_SCORE):   keep _TERMNUM_ _DOCUMENT_ COUNT;
MPRINT(TMC_DOC_SCORE):   if (_DOCUMENT_=.) or (COUNT=.) then delete;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 323 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 1392 observations read from the data set EMWS1.TEXTFILTER_VALIDOUT.
NOTE: The data set WORK._SVDM1 has 1392 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql ;
MPRINT(TMC_DOC_SCORE):   create table _scrout as select distinct _TERMNUM_, _DOCUMENT_, sum(COUNT) as _COUNT_ from _svdm1 group by _TERMNUM_, _DOCUMENT_;
NOTE: Table WORK._SCROUT created, with 1392 rows and 3 columns.
 
MPRINT(TMC_DOC_SCORE):   drop table _svdm1;
NOTE: Table WORK._SVDM1 has been dropped.
MPRINT(TMC_DOC_SCORE):   drop table _terms;
NOTE: Table WORK._TERMS has been dropped.
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMSORT):   proc sort data = _clusterms(where=(KEEP='Y' and PARENT=.)) out = _weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 184 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 184 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _scrout out = _scrout;
MPRINT(TMSORT):   by _DOCUMENT_;
MPRINT(TMSORT):   run;
 
NOTE: There were 1392 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 1392 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_svd_u;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_svd_u(keep= index col1-col10);
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: The data set EMWS1.TEXTCLUSTER2_SVD_U has 184 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql;
MPRINT(TMC_DOC_SCORE):   create table _inweights as select a.* from _weights a right join EMWS1.TextCluster2_svd_u b on a.index=b.index ;
NOTE: Table WORK._INWEIGHTS created, with 184 rows and 2 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc spsvd data=_scrout IN_U=EMWS1.TextCluster2_svd_u local = LOG global = none in_global = _inweights ;
MPRINT(TMC_DOC_SCORE):   row _TERMNUM_;
MPRINT(TMC_DOC_SCORE):   col _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   entry _COUNT_;
MPRINT(TMC_DOC_SCORE):   output colpro=_COLPRO bigpro normcol prefix="TextCluster2_SVD";
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 1392 observations read from the data set WORK._SCROUT.
NOTE: There were 184 observations read from the data set EMWS1.TEXTCLUSTER2_SVD_U.
NOTE: There were 184 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 303 observations and 11 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sort data=_import_ds;
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 305 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sort data=_colpro;
MPRINT(TMC_DOC_SCORE):   by INDEX;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 303 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 303 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_VALIDATE;
MPRINT(TMC_DOC_SCORE):   merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   if _C_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 303 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_VALIDATE;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_VALIDATE;
MPRINT(TMC_DOC_SCORE):   array svd_array TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMC_DOC_SCORE):   do i = 1 to dim(svd_array);
MPRINT(TMC_DOC_SCORE):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMSORT):   proc sort data = EMWS1.TextCluster2_VALIDATE ;
MPRINT(TMSORT):   by _document_;
MPRINT(TMSORT):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMEMCLUS):   proc emclus data = EMWS1.TextCluster2_VALIDATE role = score clusters = 9 seed=EMWS1.TextCluster2_emoutstat out = EMWS1.TextCluster2_VALIDATE ;
MPRINT(TMEMCLUS):   var TextCluster2_SVD1 - TextCluster2_SVD10;
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: There were 19 observations read from the data set EMWS1.TEXTCLUSTER2_EMOUTSTAT.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 29 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMPRED):   * set the optional arguments;
MPRINT(TMPRED):   data EMWS1.TextCluster2_VALIDATE(compress=Y drop=_c1-_c9) ;
MPRINT(TMPRED):   set EMWS1.TextCluster2_VALIDATE end=eof;
MPRINT(TMPRED):   * array for holding all probabilities;
MPRINT(TMPRED):   array _p prob1--prob9;
MPRINT(TMPRED):   array _c(9);
MPRINT(TMPRED):   retain _c 0;
MPRINT(TMPRED):   * get rid of working columns;
MPRINT(TMPRED):   drop _max_ _i _WARN_;
MPRINT(TMPRED):   _max_ = 0;
MPRINT(TMPRED):   do _i = 1 to 9;
MPRINT(TMPRED):   if _p(_i) > _max_ then do;
MPRINT(TMPRED):   _max_ = _p(_i);
MPRINT(TMPRED):   _CLUSTER_ = _i;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   if (_CLUSTER_ >= 1) and (_CLUSTER_ <= 9) then _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
MPRINT(TMPRED):   else _CLUSTER_ = .;
MPRINT(TMPRED):   ;
MPRINT(TMPRED):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 29 variables.
NOTE: Compressing data set EMWS1.TEXTCLUSTER2_VALIDATE decreased size by 0.00 percent.
      Compressed is 3 pages; un-compressed would require 3 pages.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS1.TextCluster2_VALIDATE;
MPRINT(TMC_DOC_SCORE):   set EMWS1.TextCluster2_VALIDATE;
MPRINT(TMC_DOC_SCORE):   rename prob1-prob9 = TextCluster2_prob1-TextCluster2_prob9;
MPRINT(TMC_DOC_SCORE):   rename _cluster_=TextCluster2_cluster_;
MPRINT(TMC_DOC_SCORE):   run;
 
NOTE: There were 305 observations read from the data set EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: The data set EMWS1.TEXTCLUSTER2_VALIDATE has 305 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS1.TextCluster2_VALIDATE as select adjusternotes , TextCluster2_cluster_, * from EMWS1.TextCluster2_VALIDATE;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable AdjusterNotes already exists on file EMWS1.TEXTCLUSTER2_VALIDATE.
WARNING: Variable TextCluster2_cluster_ already exists on file EMWS1.TEXTCLUSTER2_VALIDATE.
NOTE: Table EMWS1.TEXTCLUSTER2_VALIDATE created, with 305 rows and 29 columns.
 
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMC_SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   * path of the diagram ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   call symput("emwspath", strip(pathname("EMWS1")));
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   filename pre "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\PRESCORECODE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file pre;
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmpred.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsort.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmfast.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp;';
MPRINT(SCORE):   run;
 
NOTE: The file PRE is:
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Apr2017:12:38:42,
      Create Time=27Apr2017:12:38:42
 
NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   filename tmpre "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextFilter\PRESCORECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pre MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("tmpre",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PRE is:
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=27Apr2017:12:38:42,
      Create Time=27Apr2017:12:38:42
 
NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 108.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename tmpre;
NOTE: Fileref TMPRE has been deassigned.
MPRINT(SCORE):   data _codeclusters;
MPRINT(SCORE):   set EMWS1.TextCluster2_clusters (drop=clus_desc);
MPRINT(SCORE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 9 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(SCORE):   libname termloc "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1";
NOTE: Libref TERMLOC refers to the same physical library as EMWS1.
NOTE: Libref TERMLOC was successfully assigned as follows:
      Engine:        V9
      Physical Name: C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1
MPRINT(SCORE):   * Now save code, if necessary, for search phrase;
MPRINT(SCORE):   filename _tmscore "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   data _NULL_;
MPRINT(SCORE):   file _tmscore;
MPRINT(SCORE):   length string $200;
MPRINT(SCORE):   string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string="      termds=termloc.TextFilter_filtterms, configds=termloc.TextCluster2_tmconfig,";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string= "      clusters=termloc.TextCluster2_clusters, emoutstat=termloc.TextCluster2_emoutstat, ";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string = "      _scrout=work.TextFilter_out, svd_u=termloc.TextCluster2_svd_u, svd_s=termloc.TextCluster2_svd_s, prefix=TextCluster2);";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string='data &em_score_output; set work._newexport;';
MPRINT(SCORE):   put string;
MPRINT(SCORE):   run;
 
NOTE: The file _TMSCORE is:
      Filename=C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Apr2017:12:38:42,
      Create Time=27Apr2017:12:38:42
 
NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 118.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _tmscore;
NOTE: Fileref _TMSCORE has been deassigned.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: TextCluster2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36176      *------------------------------------------------------------*;
36177      * End SCORE: TextCluster2;
36178      *------------------------------------------------------------*;
 
36180      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
36181      * TextCluster2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * TextCluster2: Computing metadata for TRAIN data;
36182      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.TextCluster2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.TextCluster2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.TextCluster2_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.TextCluster2_TRAIN out=WORK.M33WUYR5 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33WUYR5;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M33WUYR5(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33WUYR5;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M33WUYR5;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1X55MDR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34W_D8Q(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X55MDR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.TextFilter_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.TextFilter_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.TextCluster2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextCluster2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "TEXTCLUSTER2_CLUSTER_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD10" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36618      proc sort data = EMWS1.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36619      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36620      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TEXTFILTER_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
36621      proc sort data = EMWS1.TextCluster2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.TextCluster2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36622      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36623      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TEXTCLUSTER2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
36624      data EMWS1.TextCluster2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.TextCluster2_EMINFO;
36625      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36626      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36627      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TEXTCLUSTER2_EMINFO has 9 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
36628      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
36629      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
36630      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
36631      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 27, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12:38:44" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 27, 2017
Time:                12:38:44
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VRE7XI "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 3\Insurance Claim\Workspaces\EMWS1\TextCluster2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VRE7XI new;
MPRINT(EM_DIAGRAM):   run;
36655      %let EMEXCEPTIONSTRING=;
36656      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36657      * REPORT: TextCluster2;
MPRINT(EM_DIAGRAM):   * REPORT: TextCluster2;
36658      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36659      %let EM_ACTION = REPORT;
36660      %let syscc = 0;
36661      %macro main();
36662
36663         %if %upcase(&EM_ACTION) eq CREATE %then %do;
36664            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
36665            %include temp;
36666            %create();
36667         %end;
36668         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
36669            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
36670            %include temp;
36671            %train();
36672         %end;
36673         %if %upcase(&EM_ACTION) eq REPORT %then %do;
36674            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
36675            %include temp;
36676            %report();
36677         %end;
36678         %if %upcase(&EM_ACTION) eq SCORE %then %do;
36679            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
36680            %include temp;
36681            %score();
36682         %end;
36683      %mend main;
36684
36685      %main();
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_REPORT.SOURCE.
36686     +%macro report();
36687     +
36688     +    %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
36689     +    %EM_GETNAME(KEY=clusters, TYPE=DATA);
36690     +    %EM_GETNAME(KEY=prescorecode, type=file, extension=sas);
36691     +    %em_getname(key=svd_s, type=data);
36692     +    %em_getname(key=hierds, type=data);
36693     +
36694     +    proc sql noprint;
36695     +        select count(*) into :svdkeep
36696     +            from &em_user_svd_s
36697     +            where keep=1;
36698     +        select count(*) into :nclus
36699     +            from &em_user_clusters;
36700     +    quit;
36701     +    %let svdkeep=%left(&svdkeep);
36702     +    %let nclus=%left(&nclus);
36703     +    %let clusterid=%sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterid_vlabel, NOQUOTE));
36704     +    %let frequency=%sysfunc(sasmsg(sashelp.tmine, rpt_text_frequency_vlabel, NOQUOTE));
36705     +    %let percentage=%sysfunc(sasmsg(sashelp.tmine, rpt_text_percentage_vlabel, NOQUOTE));
36706     +    %let descterms=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descterms_vlabel, NOQUOTE));
36707     +    %let rmsstd=%sysfunc(sasmsg(sashelp.tmine, rpt_text_rmsstd_vlabel, NOQUOTE));
36708     +    %let coordinate=%sysfunc(sasmsg(sashelp.tmine, rpt_text_coordinate_vlabel, NOQUOTE));
36709     +    %let parent=%sysfunc(sasmsg(sashelp.tmine, rpt_text_parent_vlabel, NOQUOTE));
36710     +    %let hierlevel=%sysfunc(sasmsg(sashelp.tmine, rpt_text_hierlevel_vlabel, NOQUOTE));
36711     +    %let graphdesc=%sysfunc(sasmsg(sashelp.tmine, rpt_text_graphdesc_vlabel, NOQUOTE));
36712     +    %let descshort=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descshort_vlabel, NOQUOTE));
36713     +
36714     +    data &em_user_graph_table;
36715     +        set &em_user_clusters;
36716     +        label _cluster_="&clusterid"
36717     +              clus_desc="&DescTerms"
36718     +              freq="&Frequency"
36719     +              percent="&Percentage"
36720     +              _rmsstd_="&rmsstd"
36721     +              %do i=1 %to &svdkeep;
36722     +                _mean&i="&Coordinate &i"
36723     +              %end;
36724     +              ;
36725     +        format percent percent10.;
36726     +        desc_short = clus_desc;
36727     +        if COUNTW(clus_desc, ' ') > 5 then do;
36728     +            call scan(clus_desc, 6, position, len, ' ');
36729     +            desc_short=substr(clus_desc, 1, position-1) || '...';
36730     +            drop position len;
36731     +            label desc_short="&descshort";
36732     +        end;
36733     +    run;
36734     +
36735     +    proc sql noprint;
36736     +        create table &em_user_graph_table as
36737     +        select _cluster_, clus_desc, freq, percent, *
36738     +        from &em_user_graph_table;
36739     +    quit;
36740     +
36741     +    %let block = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
36742     +
36743     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_prescore_title, NOQUOTE));
36744     +    %EM_REPORT(KEY=PRESCORECODE, VIEWTYPE=SOURCE, DESCRIPTION=%nrbquote(&desc),
36745     +              BLOCK=Scoring, AUTODISPLAY=N);
36746     +
36747     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusfreqbyrms_title, NOQUOTE));
36748     +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=FREQ, Y=_RMSSTD_, DESCRIPTION=%nrbquote(&desc),
36749     +            BLOCK=%nrbquote(&block), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;);
36750     +
36751     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
36752     +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=DATA, DESCRIPTION=%nrbquote(&desc), BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
36753     +
36754     +    %if &nclus > 2 %then %do;
36755     +        data work.graph_table(drop=_cluster_);
36756     +            set &em_user_graph_table;
36757     +            cluster=put(_cluster_,best12.);
36758     +        run;
36759     +        proc distance data=work.graph_table out=work.graph_table method=EUCLID nostd;
36760     +            var RATIO(_mean1-_mean&svdkeep);
36761     +            id cluster;
36762     +        run;
36763     +        proc mds data=work.graph_table out=work.graph_table
36764     +            level=ratio dimension=2 noprint;
36765     +        run;
36766     +        data work.graph_table;
36767     +            set work.graph_table;
36768     +            if _name_ ne '';
36769     +            Cluster=input(substr(_name_,2),8.);
36770     +            LABEL dim1='X' dim2='Y';
36771     +        run;
36772     +        proc sql noprint;
36773     +            create table &em_user_graph_table as
36774     +            select a.*, b.dim1, b.dim2
36775     +            from &em_user_graph_table a, work.graph_table b
36776     +            where a._cluster_=b.cluster;
36777     +        quit;
36778     +
36779     +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterdist_title, NOQUOTE));
36780     +        %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=DIM1, Y=DIM2, BLOCK=%nrbquote(&BLOCK),
36781     +            DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;,
36782     +            GROUP=_CLUSTER_, LEGEND=N);
36783     +    %end;
36784     +    %else %do;
36785     +        %put &em_codebar;
36786     +        %let errormsg=%sysfunc(sasmsg(sashelp.tmine, EMTOOL.NODISTANCEREPORT_NOTE, NOQUOTE));
36787     +        %put &errormsg;
36788     +        %put &em_codebar;
36789     +    %end;
36790     +
36791     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterfreq_title, NOQUOTE));
36792     +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=PIE, X=_cluster_, Y=freq, DESCRIPTION=%nrbquote(&desc),
36793     +        TOOLTIP=clus_desc, BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
36794     +
36795     +    %if &EM_PROPERTY_ALGORITHM=2.0 %then %do;
36796     +
36797     +        proc sql noprint;
36798     +            create table &em_user_hierds as
36799     +            select level, _cluster_, parent, clus_desc, *
36800     +            from &em_user_hierds;
36801     +        quit;
36802     +        filename temp catalog 'sashelp.emtext.tmsort.source';
36803     +        %include temp;
36804     +        %tmsort(data=&em_user_hierds, out=, by=level parent _cluster_);
36805     +
36806     +        data &em_user_hierds;
36807     +            set &em_user_hierds;
36808     +            label _cluster_="&clusterid"
36809     +                  clus_desc="&descterms"
36810     +                  freq="&frequency"
36811     +                  parent="&parent"
36812     +                  level="&hierlevel"
36813     +                  graphdesc="&graphdesc";
36814     +        run;
36815     +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterhierarchy_title, NOQUOTE));
36816     +        %em_report(viewtype=constellation, linkkey=hierds, nodekey=hierds, method=HIERARCHY,
36817     +            linkfrom=_CLUSTER_,linkto=PARENT,linkid=_cluster_,nodeid=_CLUSTER_,nodesize=FREQ,nodelabel=graphdesc,
36818     +            nodetip=clus_desc, BLOCK=%nrbquote(&block), DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y);
36819     +
36820     +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_hierarchydata_title, NOQUOTE));
36821     +        %em_report(KEY=hierds, VIEWTYPE=data, DESCRIPTION=%nrbquote(&DESC), AUTODISPLAY=Y, BLOCK=%nrbquote(&BLOCK));
36822     +    %end;
36823     +
36824     +    proc sql noprint;
36825     +        drop table work.graph_table;
36826     +    quit;
36827     +
36828     +%mend report;
36829     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   select count(*) into :svdkeep from EMWS1.TextCluster2_svd_s where keep=1;
MPRINT(REPORT):   select count(*) into :nclus from EMWS1.TextCluster2_clusters;
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   data EMWS1.TextCluster2_GRAPH_TABLE;
MPRINT(REPORT):   set EMWS1.TextCluster2_clusters;
MPRINT(REPORT):   label _cluster_= "Cluster ID" clus_desc= "Descriptive Terms" freq= "Frequency" percent= "Percentage" _rmsstd_= "RMS Std." _mean1= "Coordinate 1" _mean2= "Coordinate 2" _mean3= "Coordinate 3" _mean4= "Coordinate 4" _mean5= "Coordinate 5"
_mean6= "Coordinate 6" _mean7= "Coordinate 7" _mean8= "Coordinate 8" _mean9= "Coordinate 9" _mean10= "Coordinate 10" ;
MPRINT(REPORT):   format percent percent10.;
MPRINT(REPORT):   desc_short = clus_desc;
MPRINT(REPORT):   if COUNTW(clus_desc, ' ') > 5 then do;
MPRINT(REPORT):   call scan(clus_desc, 6, position, len, ' ');
MPRINT(REPORT):   desc_short=substr(clus_desc, 1, position-1) || '...';
MPRINT(REPORT):   drop position len;
MPRINT(REPORT):   label desc_short= "Descriptive Term Sample";
MPRINT(REPORT):   end;
MPRINT(REPORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_CLUSTERS.
NOTE: The data set EMWS1.TEXTCLUSTER2_GRAPH_TABLE has 9 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   create table EMWS1.TextCluster2_GRAPH_TABLE as select _cluster_, clus_desc, freq, percent, * from EMWS1.TextCluster2_GRAPH_TABLE;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS1.TEXTCLUSTER2_GRAPH_TABLE.
WARNING: Variable _CLUSTER_ already exists on file EMWS1.TEXTCLUSTER2_GRAPH_TABLE.
WARNING: Variable freq already exists on file EMWS1.TEXTCLUSTER2_GRAPH_TABLE.
WARNING: Variable percent already exists on file EMWS1.TEXTCLUSTER2_GRAPH_TABLE.
NOTE: Table EMWS1.TEXTCLUSTER2_GRAPH_TABLE created, with 9 rows and 16 columns.
 
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "PRESCORECODE";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
The SAS System
 
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SAS Prescore Code";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Scoring";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18600796730537;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SCATTER";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Cluster Frequency by RMS";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "FREQ";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_RMSSTD_";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Clusters";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "desc_short";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13031245681006;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 265 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Clusters";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Clusters";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34415444980568;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 265 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   data work.graph_table(drop=_cluster_);
MPRINT(REPORT):   set EMWS1.TextCluster2_GRAPH_TABLE;
MPRINT(REPORT):   cluster=put(_cluster_,best12.);
MPRINT(REPORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TEXTCLUSTER2_GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 9 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):   proc distance data=work.graph_table out=work.graph_table method=EUCLID nostd;
MPRINT(REPORT):   var RATIO(_mean1-_mean10);
MPRINT(REPORT):   id cluster;
MPRINT(REPORT):   run;
 
WARNING: Found negative value(s) in the ratio variable(s). The distance matrix may be meaningless.
NOTE: The data set WORK.GRAPH_TABLE has 9 observations and 10 variables.
NOTE: PROCEDURE DISTANCE used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   proc mds data=work.graph_table out=work.graph_table level=ratio dimension=2 noprint;
MPRINT(REPORT):   run;
 
NOTE: Convergence reached in 11 iterations.
NOTE: The data set WORK.GRAPH_TABLE has 11 observations and 7 variables.
NOTE: PROCEDURE MDS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):   data work.graph_table;
MPRINT(REPORT):   set work.graph_table;
MPRINT(REPORT):   if _name_ ne '';
MPRINT(REPORT):   Cluster=input(substr(_name_,2),8.);
MPRINT(REPORT):   LABEL dim1= 'X' dim2= 'Y';
MPRINT(REPORT):   run;
 
NOTE: There were 11 observations read from the data set WORK.GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   create table EMWS1.TextCluster2_GRAPH_TABLE as select a.*, b.dim1, b.dim2 from EMWS1.TextCluster2_GRAPH_TABLE a, work.graph_table b where a._cluster_=b.cluster;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS1.TEXTCLUSTER2_GRAPH_TABLE created, with 9 rows and 18 columns.
 
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SCATTER";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Distance Between Clusters";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DIM1";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "DIM2";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "_CLUSTER_";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Clusters";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "desc_short";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43113727608282;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 530 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.10 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "PIE";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Cluster Frequencies";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_cluster_";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "freq";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Clusters";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "clus_desc";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.13610805530851;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 530 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   drop table work.graph_table;
NOTE: Table WORK.GRAPH_TABLE has been dropped.
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: TextCluster2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36830      *------------------------------------------------------------*;
36831      * End REPORT: TextCluster2;
36832      *------------------------------------------------------------*;
 
36833      /* Reset EM Options */
36834      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
36835      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
36836      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
36837      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
36838      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
36839      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 663 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

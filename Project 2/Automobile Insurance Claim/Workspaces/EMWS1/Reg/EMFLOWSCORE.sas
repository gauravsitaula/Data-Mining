*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_CLAIM_IND $ 12;
label I_CLAIM_IND = 'Into: CLAIM_IND' ;
*** Target Values;
array REGDRF [2] $12 _temporary_ ('1' '0' );
label U_CLAIM_IND = 'Unnormalized Into: CLAIM_IND' ;
*** Unnormalized target values;
ARRAY REGDRU[2]  _TEMPORARY_ (1 0);

*** Generate dummy variables for CLAIM_IND ;
drop _Y ;
label F_CLAIM_IND = 'From: CLAIM_IND' ;
length F_CLAIM_IND $ 12;
F_CLAIM_IND = put( CLAIM_IND , BEST12. );
%DMNORMIP( F_CLAIM_IND )
if missing( CLAIM_IND ) then do;
   _Y = .;
end;
else do;
   if F_CLAIM_IND = '0'  then do;
      _Y = 1;
   end;
   else if F_CLAIM_IND = '1'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Check CHILD_DRIV for missing values ;
if missing( CHILD_DRIV ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check CLM_FREQ for missing values ;
if missing( CLM_FREQ ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check DISTANCE for missing values ;
if missing( DISTANCE ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check IMP_LOG_INCOME for missing values ;
if missing( IMP_LOG_INCOME ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check LOG_VEHICLE_VAL for missing values ;
if missing( LOG_VEHICLE_VAL ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check MVR_PTS for missing values ;
if missing( MVR_PTS ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for AREA ;
drop _1_0 ;
if missing( AREA ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm21 $ 21; drop _dm21 ;
   %DMNORMCP( AREA , _dm21 )
   if _dm21 = 'HIGHLY URBAN/ URBAN'  then do;
      _1_0 = 1;
   end;
   else if _dm21 = 'Z_HIGHLY RURAL/ RURAL'  then do;
      _1_0 = -1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for CAR_USE ;
drop _2_0 ;
if missing( CAR_USE ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   %DMNORMCP( CAR_USE , _dm10 )
   if _dm10 = 'PRIVATE'  then do;
      _2_0 = -1;
   end;
   else if _dm10 = 'COMMERCIAL'  then do;
      _2_0 = 1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for EDU_LEVEL ;
drop _3_0 _3_1 _3_2 _3_3 ;
*** encoding is sparse, initialize to zero;
_3_0 = 0;
_3_1 = 0;
_3_2 = 0;
_3_3 = 0;
if missing( EDU_LEVEL ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   _3_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm13 $ 13; drop _dm13 ;
   %DMNORMCP( EDU_LEVEL , _dm13 )
   if _dm13 = 'Z_HIGH SCHOOL'  then do;
      _3_0 = -1;
      _3_1 = -1;
      _3_2 = -1;
      _3_3 = -1;
   end;
   else if _dm13 = 'BACHELORS'  then do;
      _3_1 = 1;
   end;
   else if _dm13 = 'MASTERS'  then do;
      _3_2 = 1;
   end;
   else if _dm13 = '<HIGH SCHOOL'  then do;
      _3_0 = 1;
   end;
   else if _dm13 = 'PHD'  then do;
      _3_3 = 1;
   end;
   else do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      _3_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IMP_JOB ;
drop _5_0 _5_1 _5_2 _5_3 _5_4 _5_5 _5_6 _5_7 _5_8 _5_9 ;
*** encoding is sparse, initialize to zero;
_5_0 = 0;
_5_1 = 0;
_5_2 = 0;
_5_3 = 0;
_5_4 = 0;
_5_5 = 0;
_5_6 = 0;
_5_7 = 0;
_5_8 = 0;
_5_9 = 0;
if missing( IMP_JOB ) then do;
   _5_0 = .;
   _5_1 = .;
   _5_2 = .;
   _5_3 = .;
   _5_4 = .;
   _5_5 = .;
   _5_6 = .;
   _5_7 = .;
   _5_8 = .;
   _5_9 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm13 $ 13; drop _dm13 ;
   _dm13 = put( IMP_JOB , $13. );
   %DMNORMIP( _dm13 )
   _dm_find = 0; drop _dm_find;
   if _dm13 <= 'NONE'  then do;
      if _dm13 <= 'DOCTOR'  then do;
         if _dm13 <= 'CLERICAL'  then do;
            if _dm13 = 'BANKING'  then do;
               _5_0 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm13 = 'CLERICAL'  then do;
                  _5_1 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm13 = 'DOCTOR'  then do;
               _5_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm13 <= 'MANAGER'  then do;
            if _dm13 = 'HOME MAKER'  then do;
               _5_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm13 = 'MANAGER'  then do;
                  _5_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm13 = 'NONE'  then do;
               _5_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm13 <= 'PROFESSIONAL'  then do;
         if _dm13 <= 'POLICE'  then do;
            if _dm13 = 'NURSE'  then do;
               _5_6 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm13 = 'POLICE'  then do;
                  _5_7 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm13 = 'PROFESSIONAL'  then do;
               _5_8 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm13 = 'STUDENT'  then do;
            _5_9 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm13 = 'TEACHER'  then do;
               _5_0 = -1;
               _5_1 = -1;
               _5_2 = -1;
               _5_3 = -1;
               _5_4 = -1;
               _5_5 = -1;
               _5_6 = -1;
               _5_7 = -1;
               _5_8 = -1;
               _5_9 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _5_0 = .;
      _5_1 = .;
      _5_2 = .;
      _5_3 = .;
      _5_4 = .;
      _5_5 = .;
      _5_6 = .;
      _5_7 = .;
      _5_8 = .;
      _5_9 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for M_YOJ ;
drop _11_0 ;
if missing( M_YOJ ) then do;
   _11_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( M_YOJ , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _11_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _11_0 = -1;
   end;
   else do;
      _11_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REVOKED ;
drop _12_0 ;
if missing( REVOKED ) then do;
   _12_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm3 $ 3; drop _dm3 ;
   %DMNORMCP( REVOKED , _dm3 )
   if _dm3 = 'NO'  then do;
      _12_0 = 1;
   end;
   else if _dm3 = 'YES'  then do;
      _12_0 = -1;
   end;
   else do;
      _12_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for STATUS ;
drop _14_0 ;
if missing( STATUS ) then do;
   _14_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm5 $ 5; drop _dm5 ;
   %DMNORMCP( STATUS , _dm5 )
   if _dm5 = 'YES'  then do;
      _14_0 = 1;
   end;
   else if _dm5 = 'Z_NO'  then do;
      _14_0 = -1;
   end;
   else do;
      _14_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for VEHICLE_TYPE ;
drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 ;
*** encoding is sparse, initialize to zero;
_15_0 = 0;
_15_1 = 0;
_15_2 = 0;
_15_3 = 0;
_15_4 = 0;
_15_5 = 0;
_15_6 = 0;
if missing( VEHICLE_TYPE ) then do;
   _15_0 = .;
   _15_1 = .;
   _15_2 = .;
   _15_3 = .;
   _15_4 = .;
   _15_5 = .;
   _15_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm11 $ 11; drop _dm11 ;
   %DMNORMCP( VEHICLE_TYPE , _dm11 )
   _dm_find = 0; drop _dm_find;
   if _dm11 <= 'PICKUP'  then do;
      if _dm11 <= 'MINIVAN'  then do;
         if _dm11 = 'FAMILY'  then do;
            _15_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm11 = 'MINIVAN'  then do;
               _15_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm11 = 'PANEL TRUCK'  then do;
            _15_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm11 = 'PICKUP'  then do;
               _15_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm11 <= 'SPORTS CAR'  then do;
         if _dm11 = 'RACING'  then do;
            _15_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm11 = 'SPORTS CAR'  then do;
               _15_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm11 = 'UNKNOWN'  then do;
            _15_0 = -1;
            _15_1 = -1;
            _15_2 = -1;
            _15_3 = -1;
            _15_4 = -1;
            _15_5 = -1;
            _15_6 = -1;
            _dm_find = 1;
         end;
         else do;
            if _dm11 = 'VAN'  then do;
               _15_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _15_0 = .;
      _15_1 = .;
      _15_2 = .;
      _15_3 = .;
      _15_4 = .;
      _15_5 = .;
      _15_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.2705196697;
   _P1 = 0.7294803303;
   goto REGDR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: AREA ;
_TEMP = 1;
_LP0 = _LP0 + (    1.24534842556463) * _TEMP * _1_0;

***  Effect: CAR_USE ;
_TEMP = 1;
_LP0 = _LP0 + (    0.29747066717807) * _TEMP * _2_0;

***  Effect: CHILD_DRIV ;
_TEMP = CHILD_DRIV ;
_LP0 = _LP0 + (      0.519652147892 * _TEMP);

***  Effect: CLM_FREQ ;
_TEMP = CLM_FREQ ;
_LP0 = _LP0 + (    0.10048319877231 * _TEMP);

***  Effect: DISTANCE ;
_TEMP = DISTANCE ;
_LP0 = _LP0 + (    0.01194476504246 * _TEMP);

***  Effect: EDU_LEVEL ;
_TEMP = 1;
_LP0 = _LP0 + (    0.22686793304514) * _TEMP * _3_0;
_LP0 = _LP0 + (    0.01622376796419) * _TEMP * _3_1;
_LP0 = _LP0 + (   -0.29233231094297) * _TEMP * _3_2;
_LP0 = _LP0 + (   -0.43253266706758) * _TEMP * _3_3;

***  Effect: IMP_JOB ;
_TEMP = 1;
_LP0 = _LP0 + (   -2.09584964889387) * _TEMP * _5_0;
_LP0 = _LP0 + (    2.17457541558136) * _TEMP * _5_1;
_LP0 = _LP0 + (    0.92089332432591) * _TEMP * _5_2;
_LP0 = _LP0 + (    1.48771384825651) * _TEMP * _5_3;
_LP0 = _LP0 + (    1.16791685978838) * _TEMP * _5_4;
_LP0 = _LP0 + (    -5.8493886557413) * _TEMP * _5_5;
_LP0 = _LP0 + (    2.09122670362681) * _TEMP * _5_6;
_LP0 = _LP0 + (   -5.46597257531274) * _TEMP * _5_7;
_LP0 = _LP0 + (    1.84532024450198) * _TEMP * _5_8;
_LP0 = _LP0 + (    1.64633304187056) * _TEMP * _5_9;

***  Effect: IMP_LOG_INCOME ;
_TEMP = IMP_LOG_INCOME ;
_LP0 = _LP0 + (   -0.25418768165569 * _TEMP);

***  Effect: LOG_VEHICLE_VAL ;
_TEMP = LOG_VEHICLE_VAL ;
_LP0 = _LP0 + (     -0.280669623916 * _TEMP);

***  Effect: MVR_PTS ;
_TEMP = MVR_PTS ;
_LP0 = _LP0 + (    0.08067171883955 * _TEMP);

***  Effect: M_YOJ ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.22643289144558) * _TEMP * _11_0;

***  Effect: REVOKED ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.28329859471645) * _TEMP * _12_0;

***  Effect: STATUS ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.41591570989922) * _TEMP * _14_0;

***  Effect: VEHICLE_TYPE ;
_TEMP = 1;
_LP0 = _LP0 + (   -5.45093970994824) * _TEMP * _15_0;
_LP0 = _LP0 + (    1.48544984897199) * _TEMP * _15_1;
_LP0 = _LP0 + (    2.01337086168006) * _TEMP * _15_2;
_LP0 = _LP0 + (    2.09981727960443) * _TEMP * _15_3;
_LP0 = _LP0 + (   -6.59759414435931) * _TEMP * _15_4;
_LP0 = _LP0 + (    2.39822353916199) * _TEMP * _15_5;
_LP0 = _LP0 + (    2.05034750374193) * _TEMP * _15_6;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =    -1.52017316599822 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

REGDR1:

*** Residuals;
if (_Y = .) then do;
   R_CLAIM_IND1 = .;
   R_CLAIM_IND0 = .;
end;
else do;
    label R_CLAIM_IND1 = 'Residual: CLAIM_IND=1' ;
    label R_CLAIM_IND0 = 'Residual: CLAIM_IND=0' ;
   R_CLAIM_IND1 = - _P0;
   R_CLAIM_IND0 = - _P1;
   select( _Y );
      when (0)  R_CLAIM_IND1 = R_CLAIM_IND1 + 1;
      when (1)  R_CLAIM_IND0 = R_CLAIM_IND0 + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_CLAIM_IND1 = 'Predicted: CLAIM_IND=1' ;
label P_CLAIM_IND0 = 'Predicted: CLAIM_IND=0' ;
P_CLAIM_IND1 = _P0;
_MAXP = _P0;
_IY = 1;
P_CLAIM_IND0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I_CLAIM_IND = REGDRF[_IY];
U_CLAIM_IND = REGDRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;

MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "February 25, 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:49:38" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                February 25, 2017
Time:                16:49:38
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TNK487 "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TNK487 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
21561      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
21562      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
21563      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
21564      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 49 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21565      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21566      *------------------------------------------------------------*;
21567      * Neural: Scoring DATA data;
21568      *------------------------------------------------------------*;
21569      data EMWS1.Neural_TRAIN
21570      / view=EMWS1.Neural_TRAIN
21571      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
21572      set EMWS1.Reg_TRAIN
21573      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN ;
21574      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_CLAIM_IND $ 12 ;
MPRINT(EM_DIAGRAM):   label S_CHILD_DRIV = 'Standard: CHILD_DRIV' ;
MPRINT(EM_DIAGRAM):   label S_CLM_FREQ = 'Standard: CLM_FREQ' ;
MPRINT(EM_DIAGRAM):   label S_DISTANCE = 'Standard: DISTANCE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_LOG_INCOME = 'Standard: IMP_LOG_INCOME' ;
MPRINT(EM_DIAGRAM):   label S_LOG_VEHICLE_VAL = 'Standard: LOG_VEHICLE_VAL' ;
MPRINT(EM_DIAGRAM):   label S_MVR_PTS = 'Standard: MVR_PTS' ;
MPRINT(EM_DIAGRAM):   label AREAHighly_Urban__Urban = 'Dummy: AREA=Highly Urban/ Urban' ;
MPRINT(EM_DIAGRAM):   label CAR_USECommercial = 'Dummy: CAR_USE=Commercial' ;
MPRINT(EM_DIAGRAM):   label M_YOJ0 = 'Dummy: M_YOJ=0' ;
MPRINT(EM_DIAGRAM):   label REVOKEDNo = 'Dummy: REVOKED=No' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVEL_High_School = 'Dummy: EDU_LEVEL=<High School' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELBachelors = 'Dummy: EDU_LEVEL=Bachelors' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELMasters = 'Dummy: EDU_LEVEL=Masters' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELPhD = 'Dummy: EDU_LEVEL=PhD' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBBanking = 'Dummy: IMP_JOB=Banking' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBClerical = 'Dummy: IMP_JOB=Clerical' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBDoctor = 'Dummy: IMP_JOB=Doctor' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBHome_Maker = 'Dummy: IMP_JOB=Home Maker' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBManager = 'Dummy: IMP_JOB=Manager' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBNone = 'Dummy: IMP_JOB=None' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBNurse = 'Dummy: IMP_JOB=Nurse' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBPolice = 'Dummy: IMP_JOB=Police' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBProfessional = 'Dummy: IMP_JOB=Professional' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBStudent = 'Dummy: IMP_JOB=Student' ;
MPRINT(EM_DIAGRAM):   label STATUSYes = 'Dummy: STATUS=Yes' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEFamily = 'Dummy: VEHICLE_TYPE=Family' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEMinivan = 'Dummy: VEHICLE_TYPE=Minivan' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEPanel_Truck = 'Dummy: VEHICLE_TYPE=Panel Truck' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEPickup = 'Dummy: VEHICLE_TYPE=Pickup' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPERacing = 'Dummy: VEHICLE_TYPE=Racing' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPESports_Car = 'Dummy: VEHICLE_TYPE=Sports Car' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEVan = 'Dummy: VEHICLE_TYPE=Van' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_CLAIM_IND = 'Into: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label F_CLAIM_IND = 'From: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label U_CLAIM_IND = 'Unnormalized Into: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label P_CLAIM_IND1 = 'Predicted: CLAIM_IND=1' ;
MPRINT(EM_DIAGRAM):   label R_CLAIM_IND1 = 'Residual: CLAIM_IND=1' ;
MPRINT(EM_DIAGRAM):   label P_CLAIM_IND0 = 'Predicted: CLAIM_IND=0' ;
MPRINT(EM_DIAGRAM):   label R_CLAIM_IND0 = 'Residual: CLAIM_IND=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AREA ;
MPRINT(EM_DIAGRAM):   drop AREAHighly_Urban__Urban ;
MPRINT(EM_DIAGRAM):   if missing( AREA ) then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm21 $ 21;
MPRINT(EM_DIAGRAM):   drop _dm21 ;
MPRINT(DMNORMCP):   _dm21=dmnorm(AREA,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm21 = 'HIGHLY URBAN/ URBAN' then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm21 = 'Z_HIGHLY RURAL/ RURAL' then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CAR_USE ;
MPRINT(EM_DIAGRAM):   drop CAR_USECommercial ;
MPRINT(EM_DIAGRAM):   if missing( CAR_USE ) then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(DMNORMCP):   _dm10=dmnorm(CAR_USE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'PRIVATE' then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'COMMERCIAL' then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_YOJ ;
MPRINT(EM_DIAGRAM):   drop M_YOJ0 ;
MPRINT(EM_DIAGRAM):   if missing( M_YOJ ) then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( M_YOJ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REVOKED ;
MPRINT(EM_DIAGRAM):   drop REVOKEDNo ;
MPRINT(EM_DIAGRAM):   if missing( REVOKED ) then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(DMNORMCP):   _dm3=dmnorm(REVOKED,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for EDU_LEVEL ;
MPRINT(EM_DIAGRAM):   drop EDU_LEVEL_High_School EDU_LEVELBachelors EDU_LEVELMasters EDU_LEVELPhD ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = 0;
MPRINT(EM_DIAGRAM):   if missing( EDU_LEVEL ) then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm13 $ 13;
MPRINT(EM_DIAGRAM):   drop _dm13 ;
MPRINT(DMNORMCP):   _dm13=dmnorm(EDU_LEVEL,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm13 = 'Z_HIGH SCHOOL' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'BACHELORS' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'MASTERS' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = '<HIGH SCHOOL' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'PHD' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   drop IMP_JOBBanking IMP_JOBClerical IMP_JOBDoctor IMP_JOBHome_Maker IMP_JOBManager IMP_JOBNone IMP_JOBNurse IMP_JOBPolice IMP_JOBProfessional IMP_JOBStudent ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = .;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = .;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = .;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = .;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = .;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = .;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm13 $ 13;
MPRINT(EM_DIAGRAM):   drop _dm13 ;
MPRINT(EM_DIAGRAM):   _dm13 = put( IMP_JOB , $13. );
MPRINT(DMNORMIP):   call dmnorm(_dm13,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'NONE' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'DOCTOR' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'CLERICAL' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'BANKING' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'CLERICAL' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'DOCTOR' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'MANAGER' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'HOME MAKER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'MANAGER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'NONE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'PROFESSIONAL' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'POLICE' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'NURSE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'POLICE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'PROFESSIONAL' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'TEACHER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = .;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = .;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = .;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = .;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = .;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = .;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for STATUS ;
MPRINT(EM_DIAGRAM):   drop STATUSYes ;
MPRINT(EM_DIAGRAM):   if missing( STATUS ) then do;
MPRINT(EM_DIAGRAM):   STATUSYes = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(DMNORMCP):   _dm5=dmnorm(STATUS,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   STATUSYes = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'Z_NO' then do;
MPRINT(EM_DIAGRAM):   STATUSYes = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   STATUSYes = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for VEHICLE_TYPE ;
MPRINT(EM_DIAGRAM):   drop VEHICLE_TYPEFamily VEHICLE_TYPEMinivan VEHICLE_TYPEPanel_Truck VEHICLE_TYPEPickup VEHICLE_TYPERacing VEHICLE_TYPESports_Car VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = 0;
MPRINT(EM_DIAGRAM):   if missing( VEHICLE_TYPE ) then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
MPRINT(DMNORMCP):   _dm11=dmnorm(VEHICLE_TYPE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'PICKUP' then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'MINIVAN' then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'FAMILY' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'MINIVAN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'PANEL TRUCK' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'PICKUP' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'SPORTS CAR' then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'RACING' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'SPORTS CAR' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'VAN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( CHILD_DRIV , CLM_FREQ , DISTANCE , IMP_LOG_INCOME , LOG_VEHICLE_VAL , MVR_PTS ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_CHILD_DRIV = -0.33889829319443 + 1.98236245933903 * CHILD_DRIV ;
MPRINT(EM_DIAGRAM):   S_CLM_FREQ = -1.18335194737188 + 0.66003566562067 * CLM_FREQ ;
MPRINT(EM_DIAGRAM):   S_DISTANCE = -4.92891307224816 + 0.06256903395884 * DISTANCE ;
MPRINT(EM_DIAGRAM):   S_IMP_LOG_INCOME = -7.71975589401575 + 0.73483797312181 * IMP_LOG_INCOME ;
MPRINT(EM_DIAGRAM):   S_LOG_VEHICLE_VAL = -14.7013556030914 + 1.55052342831751 * LOG_VEHICLE_VAL ;
MPRINT(EM_DIAGRAM):   S_MVR_PTS = -1.22354744241005 + 0.37986794088092 * MVR_PTS ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( CHILD_DRIV ) THEN S_CHILD_DRIV = . ;
MPRINT(EM_DIAGRAM):   ELSE S_CHILD_DRIV = -0.33889829319443 + 1.98236245933903 * CHILD_DRIV ;
MPRINT(EM_DIAGRAM):   IF MISSING( CLM_FREQ ) THEN S_CLM_FREQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_CLM_FREQ = -1.18335194737188 + 0.66003566562067 * CLM_FREQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( DISTANCE ) THEN S_DISTANCE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_DISTANCE = -4.92891307224816 + 0.06256903395884 * DISTANCE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_LOG_INCOME ) THEN S_IMP_LOG_INCOME = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_LOG_INCOME = -7.71975589401575 + 0.73483797312181 * IMP_LOG_INCOME ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_VEHICLE_VAL ) THEN S_LOG_VEHICLE_VAL = . ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_VEHICLE_VAL = -14.7013556030914 + 1.55052342831751 * LOG_VEHICLE_VAL ;
MPRINT(EM_DIAGRAM):   IF MISSING( MVR_PTS ) THEN S_MVR_PTS = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MVR_PTS = -1.22354744241005 + 0.37986794088092 * MVR_PTS ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -0.1252378074658 * S_CHILD_DRIV + 0.09408574105602 * S_CLM_FREQ + -0.07946846054203 * S_DISTANCE + 0.00841139818475 * S_IMP_LOG_INCOME + -0.38957464959927 * S_LOG_VEHICLE_VAL + -0.17788416999258 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H12 = -0.20757966026726 * S_CHILD_DRIV + -0.10902479833941 * S_CLM_FREQ + 0.03432411285676 * S_DISTANCE + 0.07241010606637 * S_IMP_LOG_INCOME + 0.14171911009909 * S_LOG_VEHICLE_VAL + -0.23938254396847 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H13 = 0.0152623414381 * S_CHILD_DRIV + 0.0242266546183 * S_CLM_FREQ + -0.40476149909825 * S_DISTANCE + 0.24385773761884 * S_IMP_LOG_INCOME + 0.10439093147282 * S_LOG_VEHICLE_VAL + 0.02589402426179 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H14 = 0.17995797588877 * S_CHILD_DRIV + 0.06573232117785 * S_CLM_FREQ + 0.09547306793793 * S_DISTANCE + 0.02947537838749 * S_IMP_LOG_INCOME + 0.06424319514932 * S_LOG_VEHICLE_VAL + -0.09430275588411 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H15 = -0.16237500595013 * S_CHILD_DRIV + -0.06759509101746 * S_CLM_FREQ + 0.08264282633625 * S_DISTANCE + -0.43427175295388 * S_IMP_LOG_INCOME + 0.00206610743942 * S_LOG_VEHICLE_VAL + -0.01036610365646 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.10330274635216 * AREAHighly_Urban__Urban + -0.13536656726171 * CAR_USECommercial + 0.24635675473307 * M_YOJ0 + -0.00353047570297 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.72361958024483 * AREAHighly_Urban__Urban + -0.19683060426702 * CAR_USECommercial + 0.1546229365424 * M_YOJ0 + -0.11828897886945 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1968870084944 * AREAHighly_Urban__Urban + -0.11419679788138 * CAR_USECommercial + -0.08579965938502 * M_YOJ0 + 0.04069984887363 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.3756494564891 * AREAHighly_Urban__Urban + 0.01718396842312 * CAR_USECommercial + -0.18790984790795 * M_YOJ0 + -0.26122208587085 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.45031626809909 * AREAHighly_Urban__Urban + 0.18312708887385 * CAR_USECommercial + 0.16247004537545 * M_YOJ0 + -0.28331520830214 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.17300254217076 * EDU_LEVEL_High_School + -0.00337395451316 * EDU_LEVELBachelors + 0.00875474659916 * EDU_LEVELMasters + -0.08565040121022 * EDU_LEVELPhD + -0.06986035759261 * IMP_JOBBanking + 0.04850709510363 * 
IMP_JOBClerical + -0.2982277772542 * IMP_JOBDoctor + 0.10896991556589 * IMP_JOBHome_Maker + 0.03794641786246 * IMP_JOBManager + -0.03151051727722 * IMP_JOBNone + -0.06120477592314 * IMP_JOBNurse + 0.29775783361704 * IMP_JOBPolice + -0.18430507294012 * 
IMP_JOBProfessional + 0.03502420567248 * IMP_JOBStudent + 0.03239045387589 * STATUSYes + -0.00043259759814 * VEHICLE_TYPEFamily + -0.16192825250518 * VEHICLE_TYPEMinivan + 0.09320447463126 * VEHICLE_TYPEPanel_Truck + 0.24022891019073 * VEHICLE_TYPEPickup 
+ 0.09747826531222 * VEHICLE_TYPERacing + -0.23932091258751 * VEHICLE_TYPESports_Car + -0.13947192218984 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.24067336974208 * EDU_LEVEL_High_School + 0.0993434567293 * EDU_LEVELBachelors + 0.28374667780048 * EDU_LEVELMasters + 0.40715354997677 * EDU_LEVELPhD + -0.07127803588024 * IMP_JOBBanking + -0.28763219470482 * 
IMP_JOBClerical + 0.10087267931556 * IMP_JOBDoctor + 0.08098977985857 * IMP_JOBHome_Maker + 0.38669781180368 * IMP_JOBManager + 0.04430411601632 * IMP_JOBNone + -0.37978805878021 * IMP_JOBNurse + -0.48413141489338 * IMP_JOBPolice + 0.10090637437493 * 
IMP_JOBProfessional + 0.11996423068589 * IMP_JOBStudent + 0.12168946254826 * STATUSYes + 0.01327223153299 * VEHICLE_TYPEFamily + 0.33025959542867 * VEHICLE_TYPEMinivan + -0.04886183077006 * VEHICLE_TYPEPanel_Truck + -0.12533010441225 * VEHICLE_TYPEPickup 
+ 0.11531405526395 * VEHICLE_TYPERacing + 0.12635876022536 * VEHICLE_TYPESports_Car + 0.05706866455416 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.13198299387646 * EDU_LEVEL_High_School + 0.07952581536262 * EDU_LEVELBachelors + -0.04814058636927 * EDU_LEVELMasters + 0.06274024346926 * EDU_LEVELPhD + -0.2005165876453 * IMP_JOBBanking + -0.00915683041459 * 
IMP_JOBClerical + 0.20097021636982 * IMP_JOBDoctor + 0.02679241132525 * IMP_JOBHome_Maker + 0.37587954695574 * IMP_JOBManager + 0.25082021118807 * IMP_JOBNone + 0.06377653035254 * IMP_JOBNurse + 0.16550460280677 * IMP_JOBPolice + -0.09241142872098 * 
IMP_JOBProfessional + 0.05704133115144 * IMP_JOBStudent + 0.00263674742168 * STATUSYes + -0.06640480329391 * VEHICLE_TYPEFamily + 0.04876392351213 * VEHICLE_TYPEMinivan + 0.0656801233804 * VEHICLE_TYPEPanel_Truck + 0.06231801230658 * VEHICLE_TYPEPickup + 
-0.23259576170321 * VEHICLE_TYPERacing + -0.15377055909618 * VEHICLE_TYPESports_Car + 0.00640185536184 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.26315700936106 * EDU_LEVEL_High_School + 0.22074289716418 * EDU_LEVELBachelors + 0.18628296340056 * EDU_LEVELMasters + 0.09986605216592 * EDU_LEVELPhD + -0.2622112559314 * IMP_JOBBanking + 0.03725875781862 * 
IMP_JOBClerical + -0.07200253248292 * IMP_JOBDoctor + -0.07871363415609 * IMP_JOBHome_Maker + 0.15100009342818 * IMP_JOBManager + 0.17694225925447 * IMP_JOBNone + -0.14173626127119 * IMP_JOBNurse + 0.05751500881654 * IMP_JOBPolice + 0.00104277589997 * 
IMP_JOBProfessional + 0.18519010022872 * IMP_JOBStudent + -0.33944129562496 * STATUSYes + 0.20718129090899 * VEHICLE_TYPEFamily + -0.2188927779257 * VEHICLE_TYPEMinivan + 0.03043081902611 * VEHICLE_TYPEPanel_Truck + -0.214703107256 * VEHICLE_TYPEPickup + 
0.13940551771385 * VEHICLE_TYPERacing + 0.4635566353328 * VEHICLE_TYPESports_Car + 0.01281973104976 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.19729039886182 * EDU_LEVEL_High_School + -0.05396286074248 * EDU_LEVELBachelors + -0.10042909376128 * EDU_LEVELMasters + -0.04584335398667 * EDU_LEVELPhD + -0.22015306379087 * IMP_JOBBanking + 0.0766182810605 * 
IMP_JOBClerical + -0.24293129283995 * IMP_JOBDoctor + -0.30036559972736 * IMP_JOBHome_Maker + -0.10753756574605 * IMP_JOBManager + 0.04247424577455 * IMP_JOBNone + 0.06282611570352 * IMP_JOBNurse + -0.0930542371959 * IMP_JOBPolice + 0.1854148864381 * 
IMP_JOBProfessional + -0.27933332170021 * IMP_JOBStudent + -0.09884602955679 * STATUSYes + 0.08996010965121 * VEHICLE_TYPEFamily + 0.06976660786142 * VEHICLE_TYPEMinivan + -0.10840272554205 * VEHICLE_TYPEPanel_Truck + 0.13713991315689 * VEHICLE_TYPEPickup 
+ 0.01170632312308 * VEHICLE_TYPERacing + 0.07721114936642 * VEHICLE_TYPESports_Car + 0.27531715268863 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H11 = 2.08268740392997 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 0.68610985953751 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -1.10419541996227 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -0.89819562131402 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = -1.65400322910692 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLAIM_IND ;
MPRINT(EM_DIAGRAM):   drop CLAIM_IND1 CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   label F_CLAIM_IND = 'From: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   length F_CLAIM_IND $ 12;
MPRINT(EM_DIAGRAM):   F_CLAIM_IND = put( CLAIM_IND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_CLAIM_IND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( CLAIM_IND ) then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_CLAIM_IND = '0' then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = 0;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_CLAIM_IND = '1' then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = 1;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = 0.40408785707406 * H11 + -1.68666042712376 * H12 + -1.88021541558799 * H13 + 1.91127916472255 * H14 + 0.99093191656244 * H15 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = -0.60088045314461 + P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_CLAIM_IND1 , P_CLAIM_IND0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = EXP(P_CLAIM_IND1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = EXP(P_CLAIM_IND0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = P_CLAIM_IND1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = P_CLAIM_IND0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = 0.27051966974259;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = 0.7294803302574;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( CLAIM_IND1 ) THEN R_CLAIM_IND1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_CLAIM_IND1 = CLAIM_IND1 - P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( CLAIM_IND0 ) THEN R_CLAIM_IND0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_CLAIM_IND0 = CLAIM_IND0 - P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_CLAIM_IND AND U_CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   I_CLAIM_IND = "1           " ;
MPRINT(EM_DIAGRAM):   U_CLAIM_IND = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_CLAIM_IND0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   I_CLAIM_IND = "0           " ;
MPRINT(EM_DIAGRAM):   U_CLAIM_IND = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   drop S_:;
MPRINT(EM_DIAGRAM):   run;
22352      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22353      quit;
22354      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22355      filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22356      *------------------------------------------------------------*;
22357      * Neural: Scoring VALIDATE data;
22358      *------------------------------------------------------------*;
22359      data EMWS1.Neural_VALIDATE
22360      / view=EMWS1.Neural_VALIDATE
22361      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
22362      set EMWS1.Reg_VALIDATE
22363      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VALIDATE ;
22364      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_CLAIM_IND $ 12 ;
MPRINT(EM_DIAGRAM):   label S_CHILD_DRIV = 'Standard: CHILD_DRIV' ;
MPRINT(EM_DIAGRAM):   label S_CLM_FREQ = 'Standard: CLM_FREQ' ;
MPRINT(EM_DIAGRAM):   label S_DISTANCE = 'Standard: DISTANCE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_LOG_INCOME = 'Standard: IMP_LOG_INCOME' ;
MPRINT(EM_DIAGRAM):   label S_LOG_VEHICLE_VAL = 'Standard: LOG_VEHICLE_VAL' ;
MPRINT(EM_DIAGRAM):   label S_MVR_PTS = 'Standard: MVR_PTS' ;
MPRINT(EM_DIAGRAM):   label AREAHighly_Urban__Urban = 'Dummy: AREA=Highly Urban/ Urban' ;
MPRINT(EM_DIAGRAM):   label CAR_USECommercial = 'Dummy: CAR_USE=Commercial' ;
MPRINT(EM_DIAGRAM):   label M_YOJ0 = 'Dummy: M_YOJ=0' ;
MPRINT(EM_DIAGRAM):   label REVOKEDNo = 'Dummy: REVOKED=No' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVEL_High_School = 'Dummy: EDU_LEVEL=<High School' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELBachelors = 'Dummy: EDU_LEVEL=Bachelors' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELMasters = 'Dummy: EDU_LEVEL=Masters' ;
MPRINT(EM_DIAGRAM):   label EDU_LEVELPhD = 'Dummy: EDU_LEVEL=PhD' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBBanking = 'Dummy: IMP_JOB=Banking' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBClerical = 'Dummy: IMP_JOB=Clerical' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBDoctor = 'Dummy: IMP_JOB=Doctor' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBHome_Maker = 'Dummy: IMP_JOB=Home Maker' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBManager = 'Dummy: IMP_JOB=Manager' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBNone = 'Dummy: IMP_JOB=None' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBNurse = 'Dummy: IMP_JOB=Nurse' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBPolice = 'Dummy: IMP_JOB=Police' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBProfessional = 'Dummy: IMP_JOB=Professional' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBStudent = 'Dummy: IMP_JOB=Student' ;
MPRINT(EM_DIAGRAM):   label STATUSYes = 'Dummy: STATUS=Yes' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEFamily = 'Dummy: VEHICLE_TYPE=Family' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEMinivan = 'Dummy: VEHICLE_TYPE=Minivan' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEPanel_Truck = 'Dummy: VEHICLE_TYPE=Panel Truck' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEPickup = 'Dummy: VEHICLE_TYPE=Pickup' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPERacing = 'Dummy: VEHICLE_TYPE=Racing' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPESports_Car = 'Dummy: VEHICLE_TYPE=Sports Car' ;
MPRINT(EM_DIAGRAM):   label VEHICLE_TYPEVan = 'Dummy: VEHICLE_TYPE=Van' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_CLAIM_IND = 'Into: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label F_CLAIM_IND = 'From: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label U_CLAIM_IND = 'Unnormalized Into: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   label P_CLAIM_IND1 = 'Predicted: CLAIM_IND=1' ;
MPRINT(EM_DIAGRAM):   label R_CLAIM_IND1 = 'Residual: CLAIM_IND=1' ;
MPRINT(EM_DIAGRAM):   label P_CLAIM_IND0 = 'Predicted: CLAIM_IND=0' ;
MPRINT(EM_DIAGRAM):   label R_CLAIM_IND0 = 'Residual: CLAIM_IND=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AREA ;
MPRINT(EM_DIAGRAM):   drop AREAHighly_Urban__Urban ;
MPRINT(EM_DIAGRAM):   if missing( AREA ) then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm21 $ 21;
MPRINT(EM_DIAGRAM):   drop _dm21 ;
MPRINT(DMNORMCP):   _dm21=dmnorm(AREA,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm21 = 'HIGHLY URBAN/ URBAN' then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm21 = 'Z_HIGHLY RURAL/ RURAL' then do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   AREAHighly_Urban__Urban = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CAR_USE ;
MPRINT(EM_DIAGRAM):   drop CAR_USECommercial ;
MPRINT(EM_DIAGRAM):   if missing( CAR_USE ) then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(DMNORMCP):   _dm10=dmnorm(CAR_USE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'PRIVATE' then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'COMMERCIAL' then do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CAR_USECommercial = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_YOJ ;
MPRINT(EM_DIAGRAM):   drop M_YOJ0 ;
MPRINT(EM_DIAGRAM):   if missing( M_YOJ ) then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( M_YOJ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   M_YOJ0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REVOKED ;
MPRINT(EM_DIAGRAM):   drop REVOKEDNo ;
MPRINT(EM_DIAGRAM):   if missing( REVOKED ) then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(DMNORMCP):   _dm3=dmnorm(REVOKED,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   REVOKEDNo = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for EDU_LEVEL ;
MPRINT(EM_DIAGRAM):   drop EDU_LEVEL_High_School EDU_LEVELBachelors EDU_LEVELMasters EDU_LEVELPhD ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = 0;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = 0;
MPRINT(EM_DIAGRAM):   if missing( EDU_LEVEL ) then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm13 $ 13;
MPRINT(EM_DIAGRAM):   drop _dm13 ;
MPRINT(DMNORMCP):   _dm13=dmnorm(EDU_LEVEL,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm13 = 'Z_HIGH SCHOOL' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = -1;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'BACHELORS' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'MASTERS' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = '<HIGH SCHOOL' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm13 = 'PHD' then do;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   EDU_LEVEL_High_School = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELBachelors = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELMasters = .;
MPRINT(EM_DIAGRAM):   EDU_LEVELPhD = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   drop IMP_JOBBanking IMP_JOBClerical IMP_JOBDoctor IMP_JOBHome_Maker IMP_JOBManager IMP_JOBNone IMP_JOBNurse IMP_JOBPolice IMP_JOBProfessional IMP_JOBStudent ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = .;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = .;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = .;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = .;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = .;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = .;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm13 $ 13;
MPRINT(EM_DIAGRAM):   drop _dm13 ;
MPRINT(EM_DIAGRAM):   _dm13 = put( IMP_JOB , $13. );
MPRINT(DMNORMIP):   call dmnorm(_dm13,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'NONE' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'DOCTOR' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'CLERICAL' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'BANKING' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'CLERICAL' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'DOCTOR' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'MANAGER' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'HOME MAKER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'MANAGER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'NONE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'PROFESSIONAL' then do;
MPRINT(EM_DIAGRAM):   if _dm13 <= 'POLICE' then do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'NURSE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'POLICE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'PROFESSIONAL' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm13 = 'TEACHER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   IMP_JOBBanking = .;
MPRINT(EM_DIAGRAM):   IMP_JOBClerical = .;
MPRINT(EM_DIAGRAM):   IMP_JOBDoctor = .;
MPRINT(EM_DIAGRAM):   IMP_JOBHome_Maker = .;
MPRINT(EM_DIAGRAM):   IMP_JOBManager = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNone = .;
MPRINT(EM_DIAGRAM):   IMP_JOBNurse = .;
MPRINT(EM_DIAGRAM):   IMP_JOBPolice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfessional = .;
MPRINT(EM_DIAGRAM):   IMP_JOBStudent = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for STATUS ;
MPRINT(EM_DIAGRAM):   drop STATUSYes ;
MPRINT(EM_DIAGRAM):   if missing( STATUS ) then do;
MPRINT(EM_DIAGRAM):   STATUSYes = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(DMNORMCP):   _dm5=dmnorm(STATUS,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   STATUSYes = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'Z_NO' then do;
MPRINT(EM_DIAGRAM):   STATUSYes = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   STATUSYes = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for VEHICLE_TYPE ;
MPRINT(EM_DIAGRAM):   drop VEHICLE_TYPEFamily VEHICLE_TYPEMinivan VEHICLE_TYPEPanel_Truck VEHICLE_TYPEPickup VEHICLE_TYPERacing VEHICLE_TYPESports_Car VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = 0;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = 0;
MPRINT(EM_DIAGRAM):   if missing( VEHICLE_TYPE ) then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
MPRINT(DMNORMCP):   _dm11=dmnorm(VEHICLE_TYPE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'PICKUP' then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'MINIVAN' then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'FAMILY' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'MINIVAN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'PANEL TRUCK' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'PICKUP' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'SPORTS CAR' then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'RACING' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'SPORTS CAR' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'UNKNOWN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = -1;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'VAN' then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEFamily = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEMinivan = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPanel_Truck = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEPickup = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPERacing = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPESports_Car = .;
MPRINT(EM_DIAGRAM):   VEHICLE_TYPEVan = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( CHILD_DRIV , CLM_FREQ , DISTANCE , IMP_LOG_INCOME , LOG_VEHICLE_VAL , MVR_PTS ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_CHILD_DRIV = -0.33889829319443 + 1.98236245933903 * CHILD_DRIV ;
MPRINT(EM_DIAGRAM):   S_CLM_FREQ = -1.18335194737188 + 0.66003566562067 * CLM_FREQ ;
MPRINT(EM_DIAGRAM):   S_DISTANCE = -4.92891307224816 + 0.06256903395884 * DISTANCE ;
MPRINT(EM_DIAGRAM):   S_IMP_LOG_INCOME = -7.71975589401575 + 0.73483797312181 * IMP_LOG_INCOME ;
MPRINT(EM_DIAGRAM):   S_LOG_VEHICLE_VAL = -14.7013556030914 + 1.55052342831751 * LOG_VEHICLE_VAL ;
MPRINT(EM_DIAGRAM):   S_MVR_PTS = -1.22354744241005 + 0.37986794088092 * MVR_PTS ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( CHILD_DRIV ) THEN S_CHILD_DRIV = . ;
MPRINT(EM_DIAGRAM):   ELSE S_CHILD_DRIV = -0.33889829319443 + 1.98236245933903 * CHILD_DRIV ;
MPRINT(EM_DIAGRAM):   IF MISSING( CLM_FREQ ) THEN S_CLM_FREQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_CLM_FREQ = -1.18335194737188 + 0.66003566562067 * CLM_FREQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( DISTANCE ) THEN S_DISTANCE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_DISTANCE = -4.92891307224816 + 0.06256903395884 * DISTANCE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_LOG_INCOME ) THEN S_IMP_LOG_INCOME = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_LOG_INCOME = -7.71975589401575 + 0.73483797312181 * IMP_LOG_INCOME ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_VEHICLE_VAL ) THEN S_LOG_VEHICLE_VAL = . ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_VEHICLE_VAL = -14.7013556030914 + 1.55052342831751 * LOG_VEHICLE_VAL ;
MPRINT(EM_DIAGRAM):   IF MISSING( MVR_PTS ) THEN S_MVR_PTS = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MVR_PTS = -1.22354744241005 + 0.37986794088092 * MVR_PTS ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -0.1252378074658 * S_CHILD_DRIV + 0.09408574105602 * S_CLM_FREQ + -0.07946846054203 * S_DISTANCE + 0.00841139818475 * S_IMP_LOG_INCOME + -0.38957464959927 * S_LOG_VEHICLE_VAL + -0.17788416999258 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H12 = -0.20757966026726 * S_CHILD_DRIV + -0.10902479833941 * S_CLM_FREQ + 0.03432411285676 * S_DISTANCE + 0.07241010606637 * S_IMP_LOG_INCOME + 0.14171911009909 * S_LOG_VEHICLE_VAL + -0.23938254396847 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H13 = 0.0152623414381 * S_CHILD_DRIV + 0.0242266546183 * S_CLM_FREQ + -0.40476149909825 * S_DISTANCE + 0.24385773761884 * S_IMP_LOG_INCOME + 0.10439093147282 * S_LOG_VEHICLE_VAL + 0.02589402426179 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H14 = 0.17995797588877 * S_CHILD_DRIV + 0.06573232117785 * S_CLM_FREQ + 0.09547306793793 * S_DISTANCE + 0.02947537838749 * S_IMP_LOG_INCOME + 0.06424319514932 * S_LOG_VEHICLE_VAL + -0.09430275588411 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H15 = -0.16237500595013 * S_CHILD_DRIV + -0.06759509101746 * S_CLM_FREQ + 0.08264282633625 * S_DISTANCE + -0.43427175295388 * S_IMP_LOG_INCOME + 0.00206610743942 * S_LOG_VEHICLE_VAL + -0.01036610365646 * S_MVR_PTS ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.10330274635216 * AREAHighly_Urban__Urban + -0.13536656726171 * CAR_USECommercial + 0.24635675473307 * M_YOJ0 + -0.00353047570297 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.72361958024483 * AREAHighly_Urban__Urban + -0.19683060426702 * CAR_USECommercial + 0.1546229365424 * M_YOJ0 + -0.11828897886945 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1968870084944 * AREAHighly_Urban__Urban + -0.11419679788138 * CAR_USECommercial + -0.08579965938502 * M_YOJ0 + 0.04069984887363 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.3756494564891 * AREAHighly_Urban__Urban + 0.01718396842312 * CAR_USECommercial + -0.18790984790795 * M_YOJ0 + -0.26122208587085 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.45031626809909 * AREAHighly_Urban__Urban + 0.18312708887385 * CAR_USECommercial + 0.16247004537545 * M_YOJ0 + -0.28331520830214 * REVOKEDNo ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.17300254217076 * EDU_LEVEL_High_School + -0.00337395451316 * EDU_LEVELBachelors + 0.00875474659916 * EDU_LEVELMasters + -0.08565040121022 * EDU_LEVELPhD + -0.06986035759261 * IMP_JOBBanking + 0.04850709510363 * 
IMP_JOBClerical + -0.2982277772542 * IMP_JOBDoctor + 0.10896991556589 * IMP_JOBHome_Maker + 0.03794641786246 * IMP_JOBManager + -0.03151051727722 * IMP_JOBNone + -0.06120477592314 * IMP_JOBNurse + 0.29775783361704 * IMP_JOBPolice + -0.18430507294012 * 
IMP_JOBProfessional + 0.03502420567248 * IMP_JOBStudent + 0.03239045387589 * STATUSYes + -0.00043259759814 * VEHICLE_TYPEFamily + -0.16192825250518 * VEHICLE_TYPEMinivan + 0.09320447463126 * VEHICLE_TYPEPanel_Truck + 0.24022891019073 * VEHICLE_TYPEPickup 
+ 0.09747826531222 * VEHICLE_TYPERacing + -0.23932091258751 * VEHICLE_TYPESports_Car + -0.13947192218984 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.24067336974208 * EDU_LEVEL_High_School + 0.0993434567293 * EDU_LEVELBachelors + 0.28374667780048 * EDU_LEVELMasters + 0.40715354997677 * EDU_LEVELPhD + -0.07127803588024 * IMP_JOBBanking + -0.28763219470482 * 
IMP_JOBClerical + 0.10087267931556 * IMP_JOBDoctor + 0.08098977985857 * IMP_JOBHome_Maker + 0.38669781180368 * IMP_JOBManager + 0.04430411601632 * IMP_JOBNone + -0.37978805878021 * IMP_JOBNurse + -0.48413141489338 * IMP_JOBPolice + 0.10090637437493 * 
IMP_JOBProfessional + 0.11996423068589 * IMP_JOBStudent + 0.12168946254826 * STATUSYes + 0.01327223153299 * VEHICLE_TYPEFamily + 0.33025959542867 * VEHICLE_TYPEMinivan + -0.04886183077006 * VEHICLE_TYPEPanel_Truck + -0.12533010441225 * VEHICLE_TYPEPickup 
+ 0.11531405526395 * VEHICLE_TYPERacing + 0.12635876022536 * VEHICLE_TYPESports_Car + 0.05706866455416 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.13198299387646 * EDU_LEVEL_High_School + 0.07952581536262 * EDU_LEVELBachelors + -0.04814058636927 * EDU_LEVELMasters + 0.06274024346926 * EDU_LEVELPhD + -0.2005165876453 * IMP_JOBBanking + -0.00915683041459 * 
IMP_JOBClerical + 0.20097021636982 * IMP_JOBDoctor + 0.02679241132525 * IMP_JOBHome_Maker + 0.37587954695574 * IMP_JOBManager + 0.25082021118807 * IMP_JOBNone + 0.06377653035254 * IMP_JOBNurse + 0.16550460280677 * IMP_JOBPolice + -0.09241142872098 * 
IMP_JOBProfessional + 0.05704133115144 * IMP_JOBStudent + 0.00263674742168 * STATUSYes + -0.06640480329391 * VEHICLE_TYPEFamily + 0.04876392351213 * VEHICLE_TYPEMinivan + 0.0656801233804 * VEHICLE_TYPEPanel_Truck + 0.06231801230658 * VEHICLE_TYPEPickup + 
-0.23259576170321 * VEHICLE_TYPERacing + -0.15377055909618 * VEHICLE_TYPESports_Car + 0.00640185536184 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.26315700936106 * EDU_LEVEL_High_School + 0.22074289716418 * EDU_LEVELBachelors + 0.18628296340056 * EDU_LEVELMasters + 0.09986605216592 * EDU_LEVELPhD + -0.2622112559314 * IMP_JOBBanking + 0.03725875781862 * 
IMP_JOBClerical + -0.07200253248292 * IMP_JOBDoctor + -0.07871363415609 * IMP_JOBHome_Maker + 0.15100009342818 * IMP_JOBManager + 0.17694225925447 * IMP_JOBNone + -0.14173626127119 * IMP_JOBNurse + 0.05751500881654 * IMP_JOBPolice + 0.00104277589997 * 
IMP_JOBProfessional + 0.18519010022872 * IMP_JOBStudent + -0.33944129562496 * STATUSYes + 0.20718129090899 * VEHICLE_TYPEFamily + -0.2188927779257 * VEHICLE_TYPEMinivan + 0.03043081902611 * VEHICLE_TYPEPanel_Truck + -0.214703107256 * VEHICLE_TYPEPickup + 
0.13940551771385 * VEHICLE_TYPERacing + 0.4635566353328 * VEHICLE_TYPESports_Car + 0.01281973104976 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.19729039886182 * EDU_LEVEL_High_School + -0.05396286074248 * EDU_LEVELBachelors + -0.10042909376128 * EDU_LEVELMasters + -0.04584335398667 * EDU_LEVELPhD + -0.22015306379087 * IMP_JOBBanking + 0.0766182810605 * 
IMP_JOBClerical + -0.24293129283995 * IMP_JOBDoctor + -0.30036559972736 * IMP_JOBHome_Maker + -0.10753756574605 * IMP_JOBManager + 0.04247424577455 * IMP_JOBNone + 0.06282611570352 * IMP_JOBNurse + -0.0930542371959 * IMP_JOBPolice + 0.1854148864381 * 
IMP_JOBProfessional + -0.27933332170021 * IMP_JOBStudent + -0.09884602955679 * STATUSYes + 0.08996010965121 * VEHICLE_TYPEFamily + 0.06976660786142 * VEHICLE_TYPEMinivan + -0.10840272554205 * VEHICLE_TYPEPanel_Truck + 0.13713991315689 * VEHICLE_TYPEPickup 
+ 0.01170632312308 * VEHICLE_TYPERacing + 0.07721114936642 * VEHICLE_TYPESports_Car + 0.27531715268863 * VEHICLE_TYPEVan ;
MPRINT(EM_DIAGRAM):   H11 = 2.08268740392997 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 0.68610985953751 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -1.10419541996227 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -0.89819562131402 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = -1.65400322910692 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLAIM_IND ;
MPRINT(EM_DIAGRAM):   drop CLAIM_IND1 CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   label F_CLAIM_IND = 'From: CLAIM_IND' ;
MPRINT(EM_DIAGRAM):   length F_CLAIM_IND $ 12;
MPRINT(EM_DIAGRAM):   F_CLAIM_IND = put( CLAIM_IND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_CLAIM_IND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( CLAIM_IND ) then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_CLAIM_IND = '0' then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = 0;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_CLAIM_IND = '1' then do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = 1;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = 0.40408785707406 * H11 + -1.68666042712376 * H12 + -1.88021541558799 * H13 + 1.91127916472255 * H14 + 0.99093191656244 * H15 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = -0.60088045314461 + P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_CLAIM_IND1 , P_CLAIM_IND0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = EXP(P_CLAIM_IND1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = EXP(P_CLAIM_IND0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = P_CLAIM_IND1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = P_CLAIM_IND0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = .;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND1 = 0.27051966974259;
MPRINT(EM_DIAGRAM):   P_CLAIM_IND0 = 0.7294803302574;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( CLAIM_IND1 ) THEN R_CLAIM_IND1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_CLAIM_IND1 = CLAIM_IND1 - P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( CLAIM_IND0 ) THEN R_CLAIM_IND0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_CLAIM_IND0 = CLAIM_IND0 - P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_CLAIM_IND AND U_CLAIM_IND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_CLAIM_IND1 ;
MPRINT(EM_DIAGRAM):   I_CLAIM_IND = "1           " ;
MPRINT(EM_DIAGRAM):   U_CLAIM_IND = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_CLAIM_IND0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_CLAIM_IND0 ;
MPRINT(EM_DIAGRAM):   I_CLAIM_IND = "0           " ;
MPRINT(EM_DIAGRAM):   U_CLAIM_IND = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   drop S_:;
23142      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23143      quit;
23144      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23145      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23146      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
23147      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Gaurav\Desktop\second sem\Data Mining\Project 2\Automobile Insurance Claim\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M0SJ0F0Z noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SJ0F0Z;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SJ0F0Z(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SJ0F0Z;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SJ0F0Z;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2_T6O2L NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2CA97KZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_T6O2L;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_CLAIM_IND1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLAIM_IND1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("P_CLAIM_IND0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLAIM_IND0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("F_CLAIM_IND") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("I_CLAIM_IND") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("U_CLAIM_IND") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("CLAIM_IND") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
23500      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
23501      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
23502      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
23503      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23504      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
23505      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
23506      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
23507      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
23511      run;
23512      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
23513      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
23514      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23515      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
23516      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23517      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23518      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
23519      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23520      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23521      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
23522      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23523      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23524      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
23525      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
23526      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23527      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23528      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
23529      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
23530      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
23531      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
